declare type EventTargetOrMore = EventTarget | NodeList | [Node];
/**
 * Extension type for events bound with dom-native on(...) or onEvent/onDoc/onWin decorator.
 * - Add the selectTarget
 * - Parameterized detail
 * - Makes target and currentTarget HTMLElement to avoid redundant typescript casting
 */
export interface OnEvent<T = any | undefined> extends Event {
    selectTarget: HTMLElement;
    detail: T;
    target: HTMLElement;
    currentTarget: HTMLElement;
}
/** The current strategy is to merge the common HTML events for convenient binding, and add &object to allow further casting */
export declare type OnEventListener = (evt: Event & OnEvent) => void;
/** A key/value object representing a list of binding with the ky becase a typeAndSelector string */
export declare type OnListenerBySelector = {
    [selector: string]: OnEventListener;
};
export interface OnEventOptions {
    /** The context with which the call back will be called (i.e. 'this' context) */
    ctx?: object;
    /** The namespace used to bind this event, which will allow to remove all of the binding done with this namespace with .off */
    ns?: string;
    /** AddEventListenerOptions.capture */
    capture?: boolean;
    /** AddEventListenerOptions.passive */
    passive?: boolean;
    /**
     * If true, will be quiet if ctx instannceof HTMLElement && ctx.isConnected === false
     */
    silenceDisconnectedCtx?: boolean;
}
interface OffOptions {
    ns?: string;
}
export declare function addOnEvents(target: OnListenerBySelector | undefined, source: OnListenerBySelector): OnListenerBySelector;
export declare function on<K extends keyof HTMLElementEventMap>(els: EventTargetOrMore | null, type: K, listener: (this: HTMLElement, ev: {
    selectTarget: HTMLElement;
} & HTMLElementEventMap[K]) => void, opts?: OnEventOptions): void;
/**
 * Bind one or more evevent type to one or more HTMLElements
 * @param els single or array of the base dom elements to bind the event listener upon.
 * @param types event type (like 'click' or can be custom event).
 * @param listener function which will get the "event" as first parameter
 * @param opts (optional) {capture, passive, ctx, ns} optional namespace (ns) and ctx (i.e. this)
 */
export declare function on(els: EventTargetOrMore | null, types: string, listener: OnEventListener, opts?: OnEventOptions): void;
export declare function on<K extends keyof HTMLElementEventMap>(els: EventTargetOrMore | null, type: K, selector: string | null, listener: (this: HTMLElement, ev: {
    selectTarget: HTMLElement;
} & HTMLElementEventMap[K]) => void, opts?: OnEventOptions): void;
/**
 * Bind one or more evevent type to one or more HTMLElements matching a css selector
 * @param els single or array of the base dom elements to bind the event listener upon.
 * @param selector e.g. `.my-class`
 * @param types event type (like 'click' or can be custom event).
 * @param listener function which will get the "event" as first parameter
 * @param opts (optional) {capture, passive, ctx, ns} optional namespace (ns) and ctx (i.e. this)
 */
export declare function on(els: EventTargetOrMore | null, types: string, selector: string | null, listener: OnEventListener, opts?: OnEventOptions): void;
export declare function off(els: EventTargetOrMore | null): void;
export declare function off(els: EventTargetOrMore | null, type: string): void;
export declare function off(els: EventTargetOrMore | null, type: string, selector: string): void;
export declare function off(els: EventTargetOrMore | null, type: string, listener?: OnEventListener): void;
export declare function off(els: EventTargetOrMore | null, type: string, selector: string, listener?: OnEventListener): void;
export declare function off(els: EventTargetOrMore | null, opts?: OffOptions): void;
export declare function trigger(els: EventTargetOrMore | null | undefined, type: string, evtInit?: CustomEventInit): void;
/**
 * Bind a list of bindings
 *
 * @param typeAndSelector e.g., `click` or `click; button.add`
 */
export declare function bindOnEvents(el: EventTarget, eventDics: OnListenerBySelector | OnListenerBySelector[], opts: OnEventOptions): void;
/**
 * Bind one event to a el by appropriately parsing the `typeAndSelector` might contains a selector;
 *
 * @param typeAndSelector e.g., `click` or `click; button.add`
 */
export declare function bindOnEvent(el: EventTarget, typeAndSelector: string, fn: OnEventListener, opts: OnEventOptions): void;
export {};
