// implementation
export function attr(els, arg, val) {
    // if we have a val, then, its a single attribute setting (on one or more element)
    if (val !== undefined) {
        if (typeof arg !== 'string') {
            throw new Error(`attr - attr(els, name, value) must have name as string and not: ${arg}`);
        }
        const name = arg;
        if (els instanceof Array) {
            for (const el of els) {
                _setAttribute(el, name, val);
            }
        }
        else {
            _setAttribute(els, name, val);
        }
        return els;
    }
    // else, if arg is string or array, we assume its a getter (for now, assume the array is an array of string)
    else if (typeof arg === 'string' || arg instanceof Array) {
        return _attrGet(els, arg);
    }
    // otherwise, it is a setter 
    else {
        return _attrSet(els, arg); // TODO
    }
}
export function _attrSet(els, arg) {
    if (els instanceof Array) {
        for (const el of els) {
            _setAttributes(el, arg);
        }
    }
    else {
        _setAttributes(els, arg);
    }
    return els;
}
function _setAttributes(el, nameValueObject) {
    for (const name of Object.keys(nameValueObject)) {
        _setAttribute(el, name, nameValueObject[name]);
    }
}
function _setAttribute(el, name, val) {
    // if it is a boolean, true will set the attribute empty, and false will set txtVal to null, which will remove it.
    let txtVal = (typeof val !== 'boolean') ? val : (val === true) ? '' : null;
    if (txtVal !== null) {
        if (typeof txtVal !== 'string')
            txtVal = '' + txtVal;
        el.setAttribute(name, txtVal);
    }
    else {
        el.removeAttribute(name);
    }
}
export function _attrGet(els, arg) {
    // If HTMLElement[]
    if (els instanceof Array) {
        const ells = els;
        return ells.map(el => {
            const r = _getAttrEl(el, arg);
            return r;
        });
    }
    // otherwise, assum HTMLElement
    else {
        const r = _getAttrEl(els, arg);
        return r;
    }
}
export function _getAttrEl(el, names) {
    if (names instanceof Array) {
        return names.map(n => { return el.getAttribute(n); });
    }
    // else singloe
    else {
        return el.getAttribute(names);
    }
}
//# sourceMappingURL=attribute.js.map