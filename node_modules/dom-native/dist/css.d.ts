/**
 * Adopt a cssObject on shadowRoot (use constructable stylesheets if browser support, or append(style) if not)
 * @param el - Host to a shadowRoot or the shadowRoot itself (throw exception if not supported)
 * @return el for chainability
 */
export declare function adoptStyleSheets(el: HTMLElement | ShadowRoot, cssObject: CSSObject | CSSObject[]): HTMLElement | ShadowRoot;
declare const cssTextProp: unique symbol;
declare const styleRefProp: unique symbol;
declare const sheetProp: unique symbol;
/**
 *
 * CSSObject is the returned object from css tagged template or function call. It's immutable, and provides
 * getters to get style element from the cssText, or constructible CSSStyleSheet object (if supported by browser)
 *
 * This can be used as a stand alone utility, or with the  adoptStyle()
 */
export declare class CSSObject {
    [cssTextProp]: string;
    [styleRefProp]: HTMLElement | undefined;
    [sheetProp]: CSSStyleSheet | undefined;
    constructor(cssText: string, guard: symbol);
    get text(): string;
    /**
     * Returns a new style HTMLELement with the css text of this CSSObject
     * Note: (lazy created; cloned from reference style element )
     **/
    get newStyle(): HTMLElement;
    /**
     * Returns the CSSStyleSheet (lazy created)
     *
     * NOTE: while the CSSObject.cssText is immutable, the returned sheet is not, and since it would not
     *            make sense to create a new sheet on each call (defeating its purpose), it is up to the user
     *            to have the appropriate strategy to mutate the returned sheet.
     **/
    get sheet(): CSSStyleSheet | null;
}
/**
 * Create an immutable CSSObject. Can be used as a function or tagged template
 *
 * Note: Inspiration https://github.com/Polymer/lit-element/blob/master/src/lib/css-tag.ts, but quite different.
 */
export declare function css(str: string): CSSObject;
export declare function css(strings: TemplateStringsArray, ...values: any[]): CSSObject;
export {};
