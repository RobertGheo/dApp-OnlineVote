// NOTE: Using 'String' rather than 'string' in the typing above is critical to allow to get A[K] to match TagName type. 
//       Which will allow to correctly type `elem('input', 'un-known') // type[HTMLInputElement, HTMLElement]`
//       Otherwise, if use 'string', all A[K] will become "wider" and won't match to TagName, so all types are HTMLElement
export function elem(...names) {
    if (names.length === 1) {
        return document.createElement(names[0]);
    }
    else {
        return names.map(n => { return document.createElement(n); });
    }
}
export function html(strings, ...values) {
    var _a;
    let html;
    if (typeof strings === 'string') {
        html = strings.trim();
    }
    else {
        let r = '';
        for (let i = 0; i < strings.length; i++) {
            r += strings[i] + ((_a = values[i]) !== null && _a !== void 0 ? _a : '');
        }
        // make it null proof
        html = r;
    }
    const template = document.createElement("template");
    if (html) {
        template.innerHTML = html;
    }
    return template.content;
}
//#endregion ---------- /DocumentFragment builder ---------- 
/**
 * NOTE: deprecated in favor of html
 *
 * Returns a DocumentFragment for the html string. If html is null or undefined, returns an empty document fragment.
 * @param html the html string or null/undefined
 * @deprecated use html()
 */
export function frag(html) {
    // make it null proof
    html = (html) ? html.trim() : null;
    const template = document.createElement("template");
    if (html) {
        template.innerHTML = html;
    }
    return template.content;
}
//# sourceMappingURL=dom-builders.js.map