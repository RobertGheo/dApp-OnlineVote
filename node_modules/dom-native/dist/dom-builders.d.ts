declare type TagName = keyof HTMLElementTagNameMap;
/**
 * Shorthand for document.createElement(name)
 *
 * Note: If name match a name in the HTMLElementTagNameMap type, it will return the appropriate type
 * So, `const el = elem('input'); // type returned is HTMLInputElement
 * But, `const el = elem('my-comp'); // type is HTMLElement (assuming HTMLElementTagNameMap namespace was not augmented with this tag name)
 */
export declare function elem<A extends string | TagName>(tagName: A): A extends TagName ? HTMLElementTagNameMap[A] : HTMLElement;
/**
 * Create multiple HTMLElement via document.createElement
 *
 * @param names tag names
 *
 * Note: If name match a name in the HTMLElementTagNameMap type, it will return the appropriate type
 * So, `const el = elem('input', 'canvas'); // type returned is [HTMLInputElement, HTMLCanvasElement]
 * But, `const el = elem('input', 'my-comp'); // type is [HTMLInputElement, HTMLElement] (assuming HTMLElementTagNameMap namespace was not augmented with this tag name)

 */
export declare function elem<A extends (TagName | String)[]>(...tagNames: A): {
    [K in keyof A]: A[K] extends TagName ? HTMLElementTagNameMap[A[K]] : HTMLElement;
};
/** Create a DocumentFragment from an HTML string (using template.innerHTML and returning template.content ) */
export declare function html(str: string): DocumentFragment;
export declare function html(strings: TemplateStringsArray, ...values: any[]): DocumentFragment;
/**
 * NOTE: deprecated in favor of html
 *
 * Returns a DocumentFragment for the html string. If html is null or undefined, returns an empty document fragment.
 * @param html the html string or null/undefined
 * @deprecated use html()
 */
export declare function frag(html: string | null | undefined): DocumentFragment;
export {};
