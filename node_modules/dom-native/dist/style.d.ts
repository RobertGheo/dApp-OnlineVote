/** Conditional typing override for  */
export declare function style<T extends HTMLElement | HTMLElement[] | null | undefined>(el: T, style: Partial<CSSStyleDeclaration>): T;
/**
 * Minimilist DOM css class name helper. Add or Remove class name based on object property value.
 *
 * e.g., `className(el, {prime: true, 'dark-mode': false} )`
 *
 * - false | null means remove class name
 * - true | any defined object add class name
 * - undefined values will ignore the property name
 *
 * @returns pathrough return
 *
 * Examples:
 *   - `className(el, {prime: true, 'dark-mode': false} )` add css class 'prime' and remove 'dark-mode'
 *   - `className(el, {prime: someNonNullObject, 'dark-mode': false})` same as above.
 *   - `className(els, {prime: someNonNullObject, 'dark-mode': false})` Will add/remove class for all of the elements.
 *
 * @param el
 * @param keyValues e.g. `{prime: true, 'dark-mode': fase, 'compact-view': someObj}`
 */
export declare function className<E extends HTMLElement | HTMLElement[] | null | undefined>(els: E, keyValues: {
    [name: string]: boolean | object | null | undefined;
}): E;
