export declare type AppendPosition = "first" | "last" | "empty" | "before" | "after";
declare type TagName = keyof HTMLElementTagNameMap;
/** Shortchut to el.querySelector, but allow el to be null (in which case will return null) */
export declare function first<K extends keyof HTMLElementTagNameMap>(el: Document | HTMLElement | DocumentFragment | null | undefined, selector: K): HTMLElementTagNameMap[K] | null;
/** Shortchut to el.querySelector, but allow el to be null (in which case will return null) */
export declare function first(el: Document | HTMLElement | DocumentFragment | null | undefined, selector: string): HTMLElement | null;
/** Returns the first HTMLElement from the document if exists, otherwise returns null */
export declare function first(selector: string): HTMLElement | null;
/** Returns the first HTMLElement from the document if exists, otherwise returns null */
export declare function first<K extends keyof HTMLElementTagNameMap>(selector: K): HTMLElementTagNameMap[K] | null;
/** Return the first HTMLElement child if exists, otherwise returns null */
export declare function first(el: Document | HTMLElement | DocumentFragment | null | undefined): HTMLElement | null;
/**
 * Convenient and normalized API for .querySelectorAll. Return Array (and not node list)
*/
export declare function all(el: Document | HTMLElement | DocumentFragment | null | undefined, selector: string): HTMLElement[];
export declare function all(selector: string): HTMLElement[];
/**
 * Get the first direct children that matches the selector. If selector match a HTMLElementTagNameMap, will return appropriate type.
 *
 * @throws Error no matching child.
 *
 * Note: For a more flexible function that give full querySelector capability, use `all(el, _full_query_filter_string)`
 */
export declare function getChild<K extends keyof HTMLElementTagNameMap>(el: Document | HTMLElement | DocumentFragment, selector: K): HTMLElementTagNameMap[K];
export declare function getChild(el: Document | HTMLElement | DocumentFragment, selector: string): HTMLElement;
/**
 * Cherry pick direct HTMlElement children in order of the names (can be partial, but all have to be present and match is done in orders)
 * If name matches known TagName (in HTMLElementTagNameMap), then, the appropriate type will be returned.
 *
 * @throws Error if one or more names are not match.
 *
 * Note: For a more flexible function that give full querySelector capability, use `all(el, _full_query_filter_string)`
*/
export declare function getChildren<A extends (TagName | String)[]>(el: Document | HTMLElement | DocumentFragment, ...names: A): {
    [K in keyof A]: A[K] extends TagName ? HTMLElementTagNameMap[A[K]] : HTMLElement;
};
/**
 * Get the eventual next sibling of an HTMLElement given (optionally as selector)
 */
export declare function next(el: Node | null | undefined, selector?: string): HTMLElement | null;
/**
 * Get the eventual previous sibling
 */
export declare function prev(el: Node | null | undefined, selector?: string): HTMLElement | null;
/**
 * call el.closest, but allow el to be null (return null in this case)
 */
export declare function closest(el: HTMLElement | null | undefined, selector: string): HTMLElement | null;
export declare function append<T extends HTMLElement | HTMLElement[] | DocumentFragment | string>(this: any, refEl: HTMLElement | DocumentFragment, newEl: T, position?: AppendPosition): T extends HTMLElement ? HTMLElement : HTMLElement[];
export {};
