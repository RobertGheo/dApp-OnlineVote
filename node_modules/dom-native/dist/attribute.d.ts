declare type AttrValType = string | null;
declare type NameValMap = {
    [name: string]: string | number | boolean | null;
};
/**
 * setAttribute DOM helper to Get and Set attribute to DOM HTMLElement(s).
 *
 * Note: For setters, null and boolean-false value will remove the attribute, `true` will set empty string.
 *
 * Examples:
 *
 *   Getters:
 *     - `attr(el, 'name')` returns `string | null`, Get of the attribute `name`
 *     - `attr(el, ['name', 'label'])` returns the attribute `[name, label]` (string | null)[]
 *     - `attr(els,'name')` returns `[name, name, ...]` for each attribute for all els. Item is null if no attribute with this anme.
 *     - `attr(els,['name', 'label'])` returns `[name,label][]` for each element.
 *
 *   Setters:
 *     - `attr(el, 'name', 'username')` Set attribute name. If value is null, then, remove will be applied. TODO: Might deprecate. But ok shorthand, and handle the null/remove case, and return el.
 *     - `attr(el, {name: 'username', placeholder: 'Enter username'})` Will set the attributes specified in the object to this element, and returl el,
 *     - `attr(els, {checked: true, readonly: ''})` Will set the attributes specified in the object for all of the elements, and return els.
 *
 * TODO: On 'set' should be a passtrough return (return null | undefined as well)
 */
export declare function attr(el: HTMLElement, name: string): string | null;
export declare function attr(els: HTMLElement[], name: string): (string | null)[];
export declare function attr(el: HTMLElement, names: string[]): (string | null)[];
export declare function attr(els: HTMLElement[], names: string[]): (string | null)[][];
export declare function attr(el: HTMLElement, nameValues: {
    [name: string]: string | number | boolean | null;
}): HTMLElement;
export declare function attr(els: HTMLElement[], nameValues: {
    [name: string]: string | number | boolean | null;
}): HTMLElement[];
export declare function attr(el: HTMLElement, name: string, val: string | number | boolean | null): HTMLElement;
export declare function attr(els: HTMLElement[], name: string, val: string | number | boolean | null): HTMLElement[];
export declare function _attrSet<E extends HTMLElement | HTMLElement[]>(els: E, arg: NameValMap): E;
export declare function _attrGet<E extends HTMLElement | HTMLElement[], A extends string | string[]>(els: E, arg: A): AttrValType | AttrValType[] | AttrValType[][] | E;
export declare function _getAttrEl<N extends string | string[]>(el: HTMLElement, names: N): N extends string ? string | null : (string | null)[];
export {};
