{"version":3,"file":"index.modern.js","sources":["../node_modules/babel-plugin-transform-async-to-promises/helpers.mjs","../src/redux/commonActions.ts","../src/redux/selectors/helpers.ts","../src/redux/selectors/networkConfigSelectors.ts","../src/types/enums.ts","../src/redux/selectors/accountInfoSelectors.ts","../src/redux/selectors/loginInfoSelectors.ts","../src/utils/internal/getNewLoginExpiresTimestamp.ts","../src/utils/internal/optionalRedirect.ts","../src/utils/internal/getBridgeAddressFromNetwork.ts","../src/redux/slices/loginInfoSlice.ts","../src/redux/middlewares/loginSessionMiddleware.ts","../src/redux/slices/accountInfoSlice.ts","../src/utils/provider.ts","../src/redux/slices/extraActionsSlice.ts","../src/redux/slices/modalsSlice.ts","../src/redux/slices/networkConfigSlice.ts","../src/redux/slices/transactionsInfoSlice.ts","../src/types/transactions.ts","../src/utils/smartContracts.ts","../src/utils/transactions/transactionStateByStatus.ts","../src/utils/decoders/base64Utils.ts","../src/utils/decoders/decodePart.ts","../src/utils/getAllStringOccurrences.ts","../src/utils/transactions/parseMultiEsdtTransferData.ts","../src/utils/transactions/getTokenFromData.ts","../src/utils/transactions/isTokenTransfer.ts","../src/utils/transactions/buildReplyUrl.tsx","../src/utils/transactions/parseTransactionAfterSigning.ts","../src/redux/slices/transactionsSlice.ts","../src/redux/reducers.ts","../src/redux/store.ts","../src/redux/selectors/extraActionsSelectors.ts","../src/models/newTransaction.ts","../src/redux/selectors/transactionsSelectors.ts","../src/redux/selectors/transactionsInfoSelectors.ts","../src/redux/selectors/modalsSelectors.ts","../src/utils/getIsLoggedIn.ts","../src/utils/logout.ts","../src/utils/buildUrlParams.ts","../src/utils/switchTrue.ts","../src/utils/account/addressIsValid.ts","../src/utils/network/getNetworkProxy.ts","../src/utils/network/getApiProvider.ts","../src/utils/network/getAccountProvider.ts","../src/utils/network/getAccountProviderType.ts","../src/utils/network/getChainID.ts","../src/utils/network/getNetworkConfig.ts","../src/utils/network/getEgldLabel.ts","../src/utils/network/getIsProviderEqualTo.ts","../src/utils/account/getAddress.tsx","../src/utils/account/getAccount.tsx","../src/utils/account/setNonce.tsx","../src/utils/account/getLatestNonce.tsx","../src/utils/account/getAccountBalance.tsx","../src/utils/account/refreshAccount.tsx","../src/utils/account/getShardOfAddress.ts","../src/utils/math.ts","../src/constants/ledgerErrorCodes.ts","../src/constants/network.ts","../src/constants/index.ts","../src/utils/operations/pipe.ts","../src/utils/operations/denominate.ts","../src/utils/operations/nominate.ts","../src/optionalPackages/classnames.ts","../src/utils/getGeneratedClasses.ts","../src/utils/wrapperClassName.ts","../src/optionalPackages/moment.ts","../src/utils/session.ts","../src/redux/DappProviderContext.ts","../src/services/login/useExtensionLogin.ts","../src/services/login/useWebWalletLogin.ts","../src/services/login/useLedgerLogin.ts","../src/hooks/useUpdateEffect.ts","../src/services/login/useWalletConnectLogin.ts","../src/services/transactions/utils.ts","../src/services/transactions/signTransactions.tsx","../src/services/transactions/transformAndSignTransactions.ts","../src/services/transactions/sendTransactions.ts","../src/services/transactions/hooks/useTrackTransactionStatus.ts","../src/services/transactions/hooks/useGetPendingTransactions.ts","../src/services/transactions/hooks/useGetFailedTransactions.ts","../src/services/transactions/hooks/useGetSuccessfulTransactions.ts","../src/services/transactions/hooks/useParseMultiEsdtTransferData.ts","../src/services/transactions/hooks/useGetActiveTransactionsStatus.ts","../src/services/transactions/hooks/useGetCompletedTransactions.ts","../src/APICalls/transactions/sendSignedTransactions.ts","../src/APICalls/transactions/getTransactionsByHashes.ts","../src/components/ProviderInitializer.tsx","../src/contexts/OverrideDefaultBehaviourContext.tsx","../src/components/TransactionSender/index.ts","../src/components/TransactionsTracker/TransactionStatusTracker.tsx","../src/components/TransactionsTracker/index.tsx","../src/APICalls/configuration/getServerConfiguration.ts","../src/hooks/useGetNetworkConfig.ts","../src/hooks/useGetNotification.ts","../src/hooks/transactions/useGetTransactionDisplayInfo.ts","../src/hooks/transactions/useParseSignedTransactions.tsx","../src/hooks/transactions/useSignTransactions.tsx","../src/hooks/transactions/useGetSignedTransactions.ts","../src/optionalPackages/swr.ts","../src/hooks/transactions/useGetTokenDetails.tsx","../src/hooks/transactions/useSignTransactionsWithLedger.tsx","../src/hooks/transactions/useGetSignTransactionsError.ts","../src/hooks/account/useGetAccountInfo.ts","../src/hooks/account/useGetLoginInfo.ts","../src/hooks/account/useGetAccountProvider.ts","../src/utils/account/getAccountShard.tsx","../src/wrappers/AppInitializer.tsx","../src/redux/DappProvider.tsx","../src/wrappers/AuthenticatedRoutesWrapper/index.tsx","../src/models/TransactionParameter.ts","../src/wrappers/withClassNameWrapper.tsx","../src/UI/Denominate/index.tsx","../src/optionalPackages/fortawesome-free-solid-svg-icons.ts","../src/optionalPackages/react-fontawesome.ts","../src/UI/ExplorerLink/index.tsx","../src/UI/extension/LoginButton/index.tsx","../src/optionalPackages/react-bootstrap.tsx","../src/UI/ModalContainer/index.tsx","../node_modules/classnames/index.js","../src/UI/PageState/index.tsx","../src/UI/ledger/LoginModal/AddressRow.tsx","../src/UI/ledger/LoginModal/AddressTable.tsx","../src/UI/ledger/LoginModal/ConfirmAddress.tsx","../src/UI/ledger/LoginModal/LedgerConnect.tsx","../src/UI/ledger/LoginModal/index.tsx","../src/UI/ledger/LoginButton/index.tsx","../src/UI/NotificationModal/index.tsx","../src/UI/SignTransactionsModals/SignWithExtensionModal/index.tsx","../src/UI/TokenDetails/TokenSymbol/index.tsx","../src/UI/TokenDetails/index.tsx","../src/UI/TransactionData/index.tsx","../src/UI/SignTransactionsModals/SignWithLedgerModal/SignStep.tsx","../src/UI/SignTransactionsModals/SignWithLedgerModal/index.tsx","../src/UI/SignTransactionsModals/SignWithWalletConnectModal/index.tsx","../src/UI/SignTransactionsModals/index.tsx","../src/storage/session.ts","../src/services/transactions/isCrossShardTransaction.ts","../src/UI/IconState/index.tsx","../src/UI/Progress/index.tsx","../src/UI/CopyButton/helpers/copyToClipboard.tsx","../src/UI/CopyButton/index.tsx","../src/UI/Trim/index.tsx","../src/UI/TxDetails/index.tsx","../src/UI/TransactionToast/index.tsx","../src/UI/TransactionsToastList/index.tsx","../src/optionalPackages/platform.ts","../src/optionalPackages/qrcode.ts","../src/UI/walletConnect/WalletConnectLoginContainer/index.tsx","../src/UI/walletConnect/WalletConnectLoginButton/index.tsx","../src/UI/webWallet/LoginButton/index.tsx","../src/UI/pages/UnlockPage/index.tsx"],"sourcesContent":["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import { createAction } from '@reduxjs/toolkit';\nimport { LoginMethodsEnum } from 'types/enums';\n\nexport interface LoginActionPayloadType {\n  address: string;\n  loginMethod: LoginMethodsEnum;\n}\n\nexport const logoutAction = createAction('logout');\n\nexport const loginAction = createAction(\n  'login',\n  (payload: LoginActionPayloadType) => ({ payload })\n);\n","import isEqual from 'lodash/isEqual';\nimport { createSelectorCreator, defaultMemoize } from 'reselect';\n\nexport const createDeepEqualSelector = createSelectorCreator(\n  defaultMemoize,\n  isEqual\n);\n","import { ChainID } from '@elrondnetwork/erdjs';\nimport { RootState } from '../store';\nimport { createDeepEqualSelector } from './helpers';\n\nexport const networkConfigSelector = (state: RootState) => state.networkConfig;\n\nexport const proxySelector = createDeepEqualSelector(\n  networkConfigSelector,\n  (state) => state.proxy\n);\n\nexport const providerSelector = createDeepEqualSelector(\n  networkConfigSelector,\n  (state) => state.provider\n);\n\nexport const chainIDSelector = createDeepEqualSelector(\n  networkConfigSelector,\n  (state) => new ChainID(state.chainID)\n);\n\nexport const apiProviderSelector = createDeepEqualSelector(\n  networkConfigSelector,\n  (state) => state.apiProvider\n);\n\nexport const walletConnectBridgeAddressSelector = createDeepEqualSelector(\n  networkConfigSelector,\n  (state) => state.network.walletConnectBridgeAddress\n);\n\nexport const walletConnectDeepLinkSelector = createDeepEqualSelector(\n  networkConfigSelector,\n  (state) => state.network.walletConnectDeepLink\n);\n\nexport const networkSelector = createDeepEqualSelector(\n  networkConfigSelector,\n  (state) => state.network\n);\n\nexport const apiNetworkSelector = createDeepEqualSelector(\n  networkSelector,\n  (state) => state.apiAddress\n);\n\nexport const explorerAddressSelector = createDeepEqualSelector(\n  networkSelector,\n  (state) => state.explorerAddress\n);\n\nexport const egldLabelSelector = createDeepEqualSelector(\n  networkSelector,\n  (state) => state.egldLabel\n);\n","export enum TransactionServerStatusesEnum {\n  'pending' = 'pending',\n  'fail' = 'fail',\n  'invalid' = 'invalid',\n  'success' = 'success',\n  'executed' = 'executed',\n  'completed' = 'completed'\n}\n\nexport enum TransactionBatchStatusesEnum {\n  'signed' = 'signed',\n  'cancelled' = 'cancelled',\n  'success' = 'success',\n  'sent' = 'sent',\n  'fail' = 'fail',\n  'timedOut' = 'timedOut'\n}\n\nexport enum LoginMethodsEnum {\n  ledger = 'ledger',\n  walletconnect = 'walletconnect',\n  wallet = 'wallet',\n  extension = 'extension',\n  extra = 'extra',\n  none = ''\n}\n\nexport enum NotificationTypesEnum {\n  warning = 'warning',\n  error = 'error',\n  success = 'success'\n}\n\nexport enum TypesOfSmartContractCallsEnum {\n  MultiESDTNFTTransfer = 'MultiESDTNFTTransfer',\n  ESDTNFTTransfer = 'ESDTNFTTransfer'\n}\n\nexport enum EnvironmentsEnum {\n  testnet = 'testnet',\n  devnet = 'devnet',\n  mainnet = 'mainnet'\n}\n","import { RootState } from '../store';\nimport { createDeepEqualSelector } from './helpers';\n\nexport const accountInfoSelector = (state: RootState) => state.account;\n\nexport const addressSelector = createDeepEqualSelector(\n  accountInfoSelector,\n  (state) => state.address\n);\n\nexport const accountSelector = createDeepEqualSelector(\n  accountInfoSelector,\n  (state) => state.account\n);\n\nexport const accountBalanceSelector = createDeepEqualSelector(\n  accountSelector,\n  (account) => account.balance\n);\n\nexport const accountNonceSelector = createDeepEqualSelector(\n  accountSelector,\n  (state) => state?.nonce?.valueOf() || 0\n);\n\nexport const shardSelector = createDeepEqualSelector(\n  accountInfoSelector,\n  (state) => state.shard\n);\n\nexport const ledgerAccountSelector = createDeepEqualSelector(\n  accountInfoSelector,\n  (state) => state.ledgerAccount\n);\n\nexport const walletConnectAccountSelector = createDeepEqualSelector(\n  accountInfoSelector,\n  (state) => state.walletConnectAccount\n);\n\nexport const isAccountLoadingSelector = createDeepEqualSelector(\n  accountInfoSelector,\n  (state) => state.isAccountLoading\n);\n\nexport const isAccountLoadingErrorSelector = createDeepEqualSelector(\n  accountInfoSelector,\n  (state) => state.accountLoadingError\n);\n","import { LoginMethodsEnum } from 'types/enums';\nimport { RootState } from '../store';\nimport { addressSelector } from './accountInfoSelectors';\nimport { createDeepEqualSelector } from './helpers';\n\nexport const loginInfoSelector = (state: RootState) => state.loginInfo;\n\nexport const loginMethodSelector = createDeepEqualSelector(\n  loginInfoSelector,\n  (state) => state.loginMethod\n);\n\nexport const isLoggedInSelector = createDeepEqualSelector(\n  loginInfoSelector,\n  addressSelector,\n  (state, address) =>\n    state.loginMethod != LoginMethodsEnum.none && Boolean(address)\n);\n\nexport const walletConnectLoginSelector = createDeepEqualSelector(\n  loginInfoSelector,\n  (state) => state.walletConnectLogin\n);\n\nexport const ledgerLoginSelector = createDeepEqualSelector(\n  loginInfoSelector,\n  (state) => state.ledgerLogin\n);\n\nexport const walletLoginSelector = createDeepEqualSelector(\n  loginInfoSelector,\n  (state) => state.walletLogin\n);\n\nexport const loginExpiresAtSelector = createDeepEqualSelector(\n  loginInfoSelector,\n  (state) => state.loginExpiresAt\n);\n","export function getNewLoginExpiresTimestamp() {\n  return new Date().setHours(new Date().getHours() + 24);\n}\n\nexport default getNewLoginExpiresTimestamp;\n","export function optionalRedirect(\n  callbackUrl?: string,\n  shouldRedirect?: boolean\n) {\n  if (shouldRedirect && callbackUrl != null) {\n    setTimeout(() => {\n      if (!window.location.pathname.includes(callbackUrl)) {\n        window.location.href = callbackUrl;\n      }\n    }, 200);\n  }\n}\n","export function getBridgeAddressFromNetwork(\n  walletConnectBridgeAddresses: string[]\n) {\n  return walletConnectBridgeAddresses[\n    Math.floor(Math.random() * walletConnectBridgeAddresses.length)\n  ];\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { LoginMethodsEnum } from 'types/enums';\nimport { getNewLoginExpiresTimestamp } from 'utils/internal';\nimport {\n  loginAction,\n  logoutAction,\n  LoginActionPayloadType\n} from '../commonActions';\n\nexport interface WalletConnectLoginType {\n  loginType: string;\n  callbackRoute: string;\n  logoutRoute: string;\n}\n\nexport interface LedgerLoginType {\n  index: number;\n  loginType: string;\n}\n\nexport interface LoginInfoType {\n  data: any;\n  expires: number;\n}\n\nexport interface TokenLoginType {\n  loginToken: string;\n  signature?: string;\n}\n\nexport interface LoginInfoStateType {\n  loginMethod: LoginMethodsEnum;\n  walletConnectLogin: WalletConnectLoginType | null;\n  ledgerLogin: LedgerLoginType | null;\n  tokenLogin: TokenLoginType | null;\n  walletLogin: LoginInfoType | null;\n  extensionLogin: LoginInfoType | null;\n  loginExpiresAt: number;\n}\n\nconst initialState: LoginInfoStateType = {\n  loginMethod: LoginMethodsEnum.none,\n  walletConnectLogin: null,\n  ledgerLogin: null,\n  tokenLogin: null,\n  walletLogin: null,\n  extensionLogin: null,\n  loginExpiresAt: getNewLoginExpiresTimestamp()\n};\n\nexport const loginInfoSlice = createSlice({\n  name: 'loginInfoSlice',\n  initialState: initialState,\n  reducers: {\n    setLoginMethod: (\n      state: LoginInfoStateType,\n      action: PayloadAction<LoginMethodsEnum>\n    ) => {\n      state.loginMethod = action.payload;\n    },\n    setTokenLogin: (\n      state: LoginInfoStateType,\n      action: PayloadAction<TokenLoginType>\n    ) => {\n      state.tokenLogin = action.payload;\n    },\n    setTokenLoginSignature: (\n      state: LoginInfoStateType,\n      action: PayloadAction<string>\n    ) => {\n      if (state?.tokenLogin != null) {\n        state.tokenLogin.signature = action.payload;\n      }\n    },\n    setWalletLogin: (\n      state: LoginInfoStateType,\n      action: PayloadAction<LoginInfoType | null>\n    ) => {\n      state.walletLogin = action.payload;\n    },\n    setWalletConnectLogin: (\n      state: LoginInfoStateType,\n      action: PayloadAction<WalletConnectLoginType | null>\n    ) => {\n      state.walletConnectLogin = action.payload;\n    },\n    setLedgerLogin: (\n      state: LoginInfoStateType,\n      action: PayloadAction<LedgerLoginType | null>\n    ) => {\n      state.ledgerLogin = action.payload;\n    },\n    setLoginExpiresAt: (\n      state: LoginInfoStateType,\n      action: PayloadAction<number>\n    ) => {\n      state.loginExpiresAt = action.payload;\n    }\n  },\n  extraReducers: (builder) => {\n    builder.addCase(logoutAction, () => {\n      return initialState;\n    });\n    builder.addCase(\n      loginAction,\n      (\n        state: LoginInfoStateType,\n        action: PayloadAction<LoginActionPayloadType>\n      ) => {\n        state.loginMethod = action.payload.loginMethod;\n        state.loginExpiresAt = getNewLoginExpiresTimestamp();\n      }\n    );\n  }\n});\n\nexport const {\n  setLoginMethod,\n  setWalletConnectLogin,\n  setLedgerLogin,\n  setTokenLogin,\n  setTokenLoginSignature,\n  setWalletLogin,\n  setLoginExpiresAt\n} = loginInfoSlice.actions;\n\nexport default loginInfoSlice.reducer;\n","import { PayloadAction } from '@reduxjs/toolkit';\nimport throttle from 'lodash/throttle';\nimport { logoutAction } from 'redux/commonActions';\nimport {\n  isLoggedInSelector,\n  loginExpiresAtSelector\n} from 'redux/selectors/loginInfoSelectors';\nimport { providerSelector } from 'redux/selectors/networkConfigSelectors';\nimport { setLoginExpiresAt } from 'redux/slices/loginInfoSlice';\nimport { StoreType } from 'redux/store';\nimport { getNewLoginExpiresTimestamp } from 'utils/internal';\n\nconst whitelistedActions = ['loginInfoSlice/setLoginExpiresAt', 'logout'];\n\nconst throttledSetNewToken = throttle((store: StoreType) => {\n  store.dispatch(setLoginExpiresAt(getNewLoginExpiresTimestamp()));\n}, 5000);\n\nexport const loginSessionMiddleware: any =\n  (store: StoreType) =>\n  (next: (action: PayloadAction) => void) =>\n  (action: PayloadAction) => {\n    if (whitelistedActions.includes(action.type)) {\n      return next(action);\n    }\n    const appState = store.getState();\n    const loginTimestamp = loginExpiresAtSelector(appState);\n    const isLoggedIn = isLoggedInSelector(appState);\n    if (!isLoggedIn) {\n      return next(action);\n    }\n    if (loginTimestamp == null) {\n      return store.dispatch(setLoginExpiresAt(getNewLoginExpiresTimestamp()));\n    }\n    const now = Date.now();\n    const isExpired = loginTimestamp - now < 0;\n    if (isExpired) {\n      return setTimeout(async () => {\n        const provider = providerSelector(store.getState());\n        console.log('session expired');\n        store.dispatch(logoutAction());\n        try {\n          await provider.logout({ callbackUrl: '/' });\n        } catch (err) {\n          console.error('error logging out', err);\n        }\n      }, 1000);\n    } else {\n      throttledSetNewToken(store);\n    }\n    return next(action);\n  };\n\nexport default loginSessionMiddleware;\n","import { Address } from '@elrondnetwork/erdjs';\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { REHYDRATE } from 'redux-persist';\n\nimport {\n  loginAction,\n  logoutAction,\n  LoginActionPayloadType\n} from '../commonActions';\n\nexport interface AccountType {\n  address: string;\n  balance: string;\n  nonce: number;\n  code?: string;\n  username?: string;\n}\nexport interface LedgerAccountType {\n  index: number;\n  address: string;\n}\n\nexport interface AccountInfoSliceType {\n  address: string;\n  shard?: number;\n  account: AccountType;\n  publicKey: string;\n  ledgerAccount: LedgerAccountType | null;\n  walletConnectAccount: string | null;\n  isAccountLoading: boolean;\n  accountLoadingError: string | null;\n}\n\nexport const emptyAccount: AccountType = {\n  balance: '...',\n  address: '',\n  nonce: 0\n};\n\nconst initialState: AccountInfoSliceType = {\n  address: '',\n  account: emptyAccount,\n  ledgerAccount: null,\n  publicKey: '',\n  walletConnectAccount: null,\n  isAccountLoading: true,\n  accountLoadingError: null\n};\n\nexport const accountInfoSlice = createSlice({\n  name: 'accountInfoSlice',\n  initialState: initialState,\n  reducers: {\n    setAddress: (\n      state: AccountInfoSliceType,\n      action: PayloadAction<string>\n    ) => {\n      const address = action.payload;\n      state.address = address;\n      state.publicKey = new Address(address).hex();\n    },\n    setAccount: (\n      state: AccountInfoSliceType,\n      action: PayloadAction<AccountType>\n    ) => {\n      state.account = action.payload;\n      state.isAccountLoading = false;\n      state.accountLoadingError = null;\n    },\n    setAccountNonce: (\n      state: AccountInfoSliceType,\n      action: PayloadAction<number>\n    ) => {\n      state.account.nonce = action.payload;\n    },\n    setAccountShard: (\n      state: AccountInfoSliceType,\n      action: PayloadAction<number>\n    ) => {\n      state.shard = action.payload;\n    },\n    setLedgerAccount: (\n      state: AccountInfoSliceType,\n      action: PayloadAction<LedgerAccountType | null>\n    ) => {\n      state.ledgerAccount = action.payload;\n    },\n    setWalletConnectAccount: (\n      state: AccountInfoSliceType,\n      action: PayloadAction<string | null>\n    ) => {\n      state.walletConnectAccount = action.payload;\n    },\n    setIsAccountLoading: (\n      state: AccountInfoSliceType,\n      action: PayloadAction<boolean>\n    ) => {\n      state.isAccountLoading = action.payload;\n      state.accountLoadingError = null;\n    },\n    setAccountLoadingError: (\n      state: AccountInfoSliceType,\n      action: PayloadAction<string | null>\n    ) => {\n      state.accountLoadingError = action.payload;\n      state.isAccountLoading = false;\n    }\n  },\n  extraReducers: (builder) => {\n    builder.addCase(logoutAction, () => {\n      return initialState;\n    });\n    builder.addCase(\n      loginAction,\n      (\n        state: AccountInfoSliceType,\n        action: PayloadAction<LoginActionPayloadType>\n      ) => {\n        const { address } = action.payload;\n        state.address = address;\n        state.publicKey = new Address(address).hex();\n      }\n    );\n    builder.addCase(REHYDRATE, (state, action: any) => {\n      if (!action.payload?.account) {\n        return;\n      }\n\n      const { account: accountInfo } = action.payload;\n      const { address, shard, account, publicKey } = accountInfo;\n      state.address = address;\n      state.shard = shard;\n      state.account = account;\n      state.publicKey = publicKey;\n    });\n  }\n});\n\nexport const {\n  setAccount,\n  setAddress,\n  setAccountNonce,\n  setAccountShard,\n  setLedgerAccount,\n  setWalletConnectAccount,\n  setIsAccountLoading,\n  setAccountLoadingError\n} = accountInfoSlice.actions;\n\nexport default accountInfoSlice.reducer;\n","import {\n  ExtensionProvider,\n  HWProvider,\n  IDappProvider,\n  SignableMessage,\n  Transaction,\n  WalletConnectProvider,\n  WalletProvider\n} from '@elrondnetwork/erdjs';\nimport { LoginMethodsEnum } from 'types/enums';\n\nexport const DAPP_INIT_ROUTE = '/dapp/init';\n\nexport const getProviderType = (\n  provider: IDappProvider | undefined\n): LoginMethodsEnum => {\n  switch (provider?.constructor) {\n    case WalletProvider:\n      return LoginMethodsEnum.wallet;\n    case WalletConnectProvider:\n      return LoginMethodsEnum.walletconnect;\n    case HWProvider:\n      return LoginMethodsEnum.ledger;\n    case ExtensionProvider:\n      return LoginMethodsEnum.extension;\n    case EmptyProvider:\n      return LoginMethodsEnum.none;\n    default:\n      return LoginMethodsEnum.extra;\n  }\n};\n\nexport const newWalletProvider = (walletAddress: string) =>\n  new WalletProvider(`${walletAddress}${DAPP_INIT_ROUTE}`);\n\nconst notInitializedError = (caller: string) => {\n  return `Unable to perform ${caller}, Provider not initialized`;\n};\n\nexport class EmptyProvider implements IDappProvider {\n  async init() {\n    return false;\n  }\n  login(options?: { callbackUrl?: string; token?: string }): Promise<string> {\n    throw new Error(notInitializedError(`login with options: ${options}`));\n  }\n  async logout(options?: { callbackUrl?: string }): Promise<boolean> {\n    throw new Error(notInitializedError(`logout with options: ${options}`));\n  }\n  async getAddress(): Promise<string> {\n    throw new Error(notInitializedError('getAddress'));\n  }\n  isInitialized(): boolean {\n    return false;\n  }\n  async isConnected(): Promise<boolean> {\n    return false;\n  }\n  async sendTransaction(\n    transaction: Transaction,\n    options?: { callbackUrl?: string }\n  ): Promise<Transaction> {\n    throw new Error(\n      notInitializedError(\n        `sendTransaction with transactions: ${transaction} options: ${options}`\n      )\n    );\n  }\n  async signTransaction(\n    transaction: Transaction,\n    options?: { callbackUrl?: string }\n  ): Promise<Transaction> {\n    throw new Error(\n      notInitializedError(\n        `signTransaction with transactions: ${transaction} options: ${options}`\n      )\n    );\n  }\n  async signTransactions(\n    transactions: Transaction[],\n    options?: { callbackUrl?: string }\n  ): Promise<Transaction[]> {\n    throw new Error(\n      notInitializedError(\n        `signTransactions with transactions: ${transactions} options: ${options}`\n      )\n    );\n  }\n  async signMessage(message: SignableMessage): Promise<SignableMessage> {\n    throw new Error(notInitializedError(`signTransactions with ${message}`));\n  }\n}\n\nexport const emptyProvider = new EmptyProvider();\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { ExtraActionsType } from 'types';\nimport { emptyProvider } from 'utils/provider';\n\ntype ExtraActionsSliceState = ExtraActionsType;\n\nconst initialState: ExtraActionsSliceState = {\n  log: () => null,\n  getProvider: () => emptyProvider,\n  init: () => null\n};\n\nexport const extraActionsSlice = createSlice({\n  name: 'extraActionsSlice',\n  initialState,\n  reducers: {\n    initializeExtraActions: (\n      state: ExtraActionsSliceState,\n      action: PayloadAction<ExtraActionsSliceState>\n    ) => {\n      return { ...state, ...action.payload };\n    }\n  }\n});\n\nexport const { initializeExtraActions } = extraActionsSlice.actions;\n\nexport default extraActionsSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { NotificationTypesEnum } from 'types';\nimport { logoutAction } from '../commonActions';\n\nexport interface TxSubmittedModal {\n  sessionId: string;\n  submittedMessage: string;\n}\n\nexport interface NotificationModal {\n  type: NotificationTypesEnum;\n  iconClassName: string;\n  title: string;\n  description: string;\n}\n\nexport interface ModalsSliceState {\n  txSubmittedModal?: TxSubmittedModal;\n  notificationModal?: NotificationModal;\n}\n\nconst initialState: ModalsSliceState = {};\n\nexport const modalsSlice = createSlice({\n  name: 'modalsSlice',\n  initialState,\n  reducers: {\n    setTxSubmittedModal: (\n      state: ModalsSliceState,\n      action: PayloadAction<TxSubmittedModal>\n    ) => {\n      state.txSubmittedModal = action.payload;\n    },\n    setNotificationModal: (\n      state: ModalsSliceState,\n      action: PayloadAction<NotificationModal>\n    ) => {\n      state.notificationModal = action.payload;\n    },\n    clearTxSubmittedModal: (state: ModalsSliceState) => {\n      state.txSubmittedModal = undefined;\n    },\n    clearNotificationModal: (state: ModalsSliceState) => {\n      state.notificationModal = undefined;\n    }\n  },\n\n  extraReducers: (builder) => {\n    builder.addCase(logoutAction, () => {\n      return initialState;\n    });\n  }\n});\n\nexport const {\n  setTxSubmittedModal,\n  setNotificationModal,\n  clearTxSubmittedModal,\n  clearNotificationModal\n} = modalsSlice.actions;\n\nexport default modalsSlice.reducer;\n","import {\n  IDappProvider,\n  IProvider,\n  IApiProvider,\n  ProxyProvider,\n  ApiProvider\n} from '@elrondnetwork/erdjs';\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport omit from 'lodash/omit';\nimport {\n  AccountInfoSliceNetworkType,\n  BaseNetworkType,\n  NetworkType\n} from 'types';\nimport { getBridgeAddressFromNetwork } from 'utils/internal';\nimport { emptyProvider } from 'utils/provider';\nimport { logoutAction } from '../commonActions';\n\nexport const defaultNetwork: AccountInfoSliceNetworkType = {\n  id: 'not-configured',\n  name: 'NOT CONFIGURED',\n  egldLabel: '',\n  egldDenomination: '18',\n  decimals: '4',\n  gasPerDataByte: '1500',\n  walletConnectDeepLink: '',\n  walletConnectBridgeAddress: '',\n  walletAddress: '',\n\n  apiAddress: '',\n  explorerAddress: '',\n  apiTimeout: '4000'\n};\n\nexport interface NetworkConfigStateType {\n  provider: IDappProvider;\n  proxy: IProvider;\n  apiProvider: IApiProvider;\n  network: AccountInfoSliceNetworkType;\n  chainID: string;\n}\n\nconst initialState: NetworkConfigStateType = {\n  network: defaultNetwork,\n  proxy: new ProxyProvider(defaultNetwork.apiAddress, {\n    timeout: Number(defaultNetwork.apiTimeout)\n  }),\n  apiProvider: new ApiProvider(defaultNetwork.apiAddress, {\n    timeout: Number(defaultNetwork.apiTimeout)\n  }),\n  provider: emptyProvider,\n  chainID: '-1'\n};\n\nexport const networkConfigSlice = createSlice({\n  name: 'appConfig',\n  initialState: initialState,\n  reducers: {\n    initializeNetworkConfig: (\n      state: NetworkConfigStateType,\n      action: PayloadAction<NetworkType>\n    ) => {\n      const walletConnectBridgeAddress = getBridgeAddressFromNetwork(\n        action.payload.walletConnectBridgeAddresses\n      );\n      const network: BaseNetworkType = omit(\n        action.payload,\n        'walletConnectBridgeAddresses'\n      );\n      const { apiAddress } = network;\n\n      if (apiAddress) {\n        state.proxy = new ProxyProvider(apiAddress, {\n          timeout: Number(network.apiTimeout || defaultNetwork.apiTimeout)\n        });\n        state.apiProvider = new ApiProvider(apiAddress, {\n          timeout: Number(network.apiTimeout || defaultNetwork.apiTimeout)\n        });\n      }\n      state.network = {\n        ...state.network,\n        ...network,\n        walletConnectBridgeAddress\n      };\n    },\n    setChainID: (\n      state: NetworkConfigStateType,\n      action: PayloadAction<string>\n    ) => {\n      state.chainID = action.payload;\n    },\n    setProvider: (\n      state: NetworkConfigStateType,\n      action: PayloadAction<IDappProvider>\n    ) => {\n      state.provider = action.payload;\n    }\n  },\n  extraReducers: (builder) => {\n    builder.addCase(logoutAction, (state) => {\n      state.provider = initialState.provider;\n    });\n  }\n});\n\nexport const { initializeNetworkConfig, setChainID, setProvider } =\n  networkConfigSlice.actions;\n\nexport default networkConfigSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { TransactionsDisplayInfoType } from 'types/transactions';\nimport { logoutAction } from '../commonActions';\n\nexport interface StateType {\n  [sessionId: string]: TransactionsDisplayInfoType;\n}\n\nexport interface SetTransactionsInfoPayloadType {\n  sessionId: string;\n  transactionsDisplayInfo: TransactionsDisplayInfoType;\n}\n\nexport const defaultTransactionErrorMessage = 'Transaction failed';\nexport const defaultTransactionSuccessMessage = 'Transaction successful';\nexport const defaultTransactionProcessingMessage = 'Processing transaction';\nexport const defaultTransactionSubmittedMessage = 'Transaction submitted';\n\nconst initialState: StateType = {};\n\nexport const signTransactionsSlice = createSlice({\n  name: 'transactionsInfo',\n  initialState,\n  reducers: {\n    setTransactionsDisplayInfo(\n      state: StateType,\n      action: PayloadAction<SetTransactionsInfoPayloadType>\n    ) {\n      const { sessionId, transactionsDisplayInfo } = action.payload;\n      if (sessionId != null) {\n        state[sessionId] = {\n          errorMessage:\n            transactionsDisplayInfo?.errorMessage ||\n            defaultTransactionErrorMessage,\n          successMessage:\n            transactionsDisplayInfo?.successMessage ||\n            defaultTransactionSuccessMessage,\n          processingMessage:\n            transactionsDisplayInfo?.processingMessage ||\n            defaultTransactionProcessingMessage,\n          submittedMessage:\n            transactionsDisplayInfo?.submittedMessage ||\n            defaultTransactionSubmittedMessage,\n          transactionDuration: transactionsDisplayInfo?.transactionDuration\n        };\n      }\n    },\n    clearTransactionsInfoForSessionId(\n      state: StateType,\n      action: PayloadAction<string | undefined>\n    ) {\n      if (action.payload != null) {\n        delete state[action.payload];\n      }\n    },\n    clearTransactionsInfo: () => initialState\n  },\n  extraReducers: (builder) => {\n    builder.addCase(logoutAction, () => {\n      return initialState;\n    });\n  }\n});\n\nexport const {\n  clearTransactionsInfo,\n  setTransactionsDisplayInfo,\n  clearTransactionsInfoForSessionId\n} = signTransactionsSlice.actions;\n\nexport default signTransactionsSlice.reducer;\n","import { Address, Transaction } from '@elrondnetwork/erdjs';\nimport {\n  TransactionBatchStatusesEnum,\n  TransactionServerStatusesEnum\n} from './enums';\n\nexport interface TransactionsToSignType {\n  transactions: RawTransactionType[];\n  callbackRoute: string;\n  redirectAfterSign: boolean;\n  sessionId: string;\n  sessionInformation?: any;\n}\n\nexport interface SignedTransactionsBodyType {\n  transactions?: SignedTransactionType[];\n  status?: TransactionBatchStatusesEnum;\n  errorMessage?: string;\n  sessionInformation?: any;\n}\n\nexport interface SignedTransactionsType {\n  [sessionId: string]: SignedTransactionsBodyType;\n}\n\nexport interface TransactionParameter {\n  sender: Address;\n  receiver: Address;\n  functionName: string;\n  inputParameters: string[];\n  outputParameters: string[];\n}\n\nexport interface RawTransactionType {\n  signature?: string;\n  value: string;\n  receiver: string;\n  gasPrice: number;\n  gasLimit: number;\n  sender: string;\n  nonce: number;\n  data: string;\n  chainID: string;\n  version?: number;\n  options?: number;\n}\n\nexport interface SignedTransactionType extends RawTransactionType {\n  hash: string;\n  status: TransactionServerStatusesEnum;\n  errorMessage?: string;\n}\n\nexport interface TxDataTokenType {\n  tokenId: string;\n  amount: string;\n  receiver: string;\n  type?: MultiEsdtTxType['type'] | '';\n  nonce?: string;\n  multiTxData?: string;\n}\n\nexport type TxsDataTokensType = Record<string, TxDataTokenType> | undefined;\n\ninterface MultiEsdtType {\n  type:\n    | TransactionTypesEnum.esdtTransaction\n    | TransactionTypesEnum.nftTransaction;\n  receiver: string;\n  token?: string;\n  nonce?: string;\n  amount?: string;\n  data: string;\n}\n\ninterface MultiEsdtScCallType {\n  type: TransactionTypesEnum.scCall;\n  receiver: string;\n  token?: string;\n  nonce?: string;\n  amount?: string;\n  data: string;\n}\n\nexport type MultiEsdtTxType = MultiEsdtType | MultiEsdtScCallType;\n\nexport type MultiSignTxType = {\n  multiTxData?: string;\n  transactionIndex: number;\n  transaction: Transaction;\n};\n\nexport interface TokenOptionType {\n  name: string;\n  identifier: string;\n  balance: string;\n  decimals: number;\n  collection?: string;\n  avatar?: string;\n}\n\nexport interface SimpleTransactionType {\n  value: string;\n  receiver: string;\n  data?: string;\n  gasPrice?: number;\n  gasLimit?: number;\n  chainID?: string;\n  version?: number;\n  options?: number;\n}\n\nexport interface TransactionsDisplayInfoType {\n  errorMessage?: string;\n  successMessage?: string;\n  processingMessage?: string;\n  submittedMessage?: string;\n  transactionDuration?: number;\n}\n\nexport interface SendSimpleTransactionPropsType {\n  transactions: SimpleTransactionType[];\n  minGasLimit?: number;\n}\n\nexport interface SendTransactionsPropsType {\n  transactions:\n    | Transaction\n    | SimpleTransactionType\n    | (Transaction | SimpleTransactionType)[];\n  redirectAfterSign?: boolean;\n  transactionsDisplayInfo: TransactionsDisplayInfoType;\n  minGasLimit?: number;\n  sessionInformation?: any;\n}\n\nexport interface SignTransactionsPropsType {\n  transactions: Transaction[] | Transaction;\n  minGasLimit?: number;\n  redirectAfterSign?: boolean;\n  callbackRoute?: string;\n  transactionsDisplayInfo: TransactionsDisplayInfoType;\n  sessionInformation?: any;\n}\n\nexport enum TransactionTypesEnum {\n  MultiESDTNFTTransfer = 'MultiESDTNFTTransfer',\n  ESDTTransfer = 'ESDTTransfer',\n  ESDTNFTTransfer = 'ESDTNFTTransfer',\n  esdtTransaction = 'esdtTransaction',\n  nftTransaction = 'nftTransaction',\n  scCall = 'scCall'\n}\n\nexport interface ActiveLedgerTransactionType {\n  transaction: Transaction;\n  transactionTokenInfo: TxDataTokenType;\n  isTokenTransaction: boolean;\n  dataField: string;\n}\n\nexport interface SmartContractResult {\n  hash: string;\n  timestamp: number;\n  nonce: number;\n  gasLimit: number;\n  gasPrice: number;\n  value: string;\n  sender: string;\n  receiver: string;\n  data: string;\n  prevTxHash: string;\n  originalTxHash: string;\n  callType: string;\n  miniBlockHash: string;\n  returnMessage: string;\n}\n\nexport interface SignModalPropsType {\n  handleClose: () => void;\n  error: string | null;\n  callbackRoute?: string;\n  transactions: Transaction[];\n  className?: string;\n}\n","import { Address } from '@elrondnetwork/erdjs';\nimport { SmartContractResult, TypesOfSmartContractCallsEnum } from 'types';\n\nconst okInHex = '6f6b';\n\nexport function areScCallsSuccessful(scResults?: SmartContractResult[]) {\n  if (!scResults) {\n    return true;\n  }\n  let success = false;\n  scResults.forEach((result) => {\n    if (result?.data) {\n      const decoded = Buffer.from(result.data, 'base64').toString().split('@');\n      const hasOkPart = Boolean(decoded.find((part) => part === okInHex));\n      if (hasOkPart) {\n        success = true;\n        return;\n      }\n    }\n  });\n  return success;\n}\n\nexport function isContract(receiver: string, data = ''): boolean {\n  try {\n    const extractedAddress = getAddressFromDataField({ receiver, data });\n    if (!extractedAddress) {\n      return false;\n    }\n    return new Address(extractedAddress).isContractAddress();\n  } catch (err) {\n    console.log('err', err);\n    return false;\n  }\n}\n\nexport function getAddressFromDataField({\n  receiver,\n  data\n}: {\n  receiver: string;\n  data: string;\n}) {\n  try {\n    if (!data) {\n      return receiver;\n    }\n    const addressIndex = getAddressIndex(data);\n    const parts = data.split('@');\n    return addressIndex > -1 ? parts[addressIndex] : receiver;\n  } catch (err) {\n    console.log(err);\n    return;\n  }\n}\n\nfunction getAddressIndex(data: string) {\n  return data.includes(TypesOfSmartContractCallsEnum.MultiESDTNFTTransfer)\n    ? 1\n    : data.includes(TypesOfSmartContractCallsEnum.ESDTNFTTransfer)\n    ? 4\n    : -1;\n}\n\nexport default isContract;\n","import {\n  TransactionBatchStatusesEnum,\n  TransactionServerStatusesEnum\n} from 'types/enums';\n\nexport const pendingBatchTransactionsStates = [\n  TransactionBatchStatusesEnum.sent\n];\nexport const successBatchTransactionsStates = [\n  TransactionBatchStatusesEnum.success\n];\n\nexport const failBatchTransactionsStates = [\n  TransactionBatchStatusesEnum.fail,\n  TransactionBatchStatusesEnum.cancelled,\n  TransactionBatchStatusesEnum.timedOut\n];\n\nexport const timedOutBatchTransactionsStates = [\n  TransactionBatchStatusesEnum.timedOut\n];\n\nexport const pendingServerTransactionsStatuses = [\n  TransactionServerStatusesEnum.pending\n];\n\nexport const successServerTransactionsStates = [\n  TransactionServerStatusesEnum.success\n];\n\nexport const completedServerTransactionsStates = [\n  TransactionServerStatusesEnum.completed\n];\n\nexport const failServerTransactionsStates = [\n  TransactionServerStatusesEnum.fail,\n  TransactionServerStatusesEnum.invalid\n];\n\nexport function getIsTransactionCompleted(\n  status?: TransactionServerStatusesEnum | TransactionBatchStatusesEnum\n) {\n  return completedServerTransactionsStates.includes(\n    status as TransactionServerStatusesEnum\n  );\n}\n\nexport function getIsTransactionPending(\n  status?: TransactionServerStatusesEnum | TransactionBatchStatusesEnum,\n  isScCall = false\n) {\n  const isPending =\n    status != null &&\n    (isBatchTransactionPending(status as TransactionBatchStatusesEnum) ||\n      isServerTransactionPending(status as TransactionServerStatusesEnum));\n  return isScCall\n    ? isPending ||\n        (getIsTransactionSuccessful(status) &&\n          !getIsTransactionCompleted(status))\n    : isPending;\n}\n\nexport function getIsTransactionSuccessful(\n  status?: TransactionServerStatusesEnum | TransactionBatchStatusesEnum\n) {\n  return (\n    status != null &&\n    (isBatchTransactionSuccessful(status as TransactionBatchStatusesEnum) ||\n      isServerTransactionSuccessful(status as TransactionServerStatusesEnum))\n  );\n}\n\nexport function getIsTransactionFailed(\n  status?: TransactionServerStatusesEnum | TransactionBatchStatusesEnum\n) {\n  return (\n    status != null &&\n    (isBatchTransactionFailed(status as TransactionBatchStatusesEnum) ||\n      isServerTransactionFailed(status as TransactionServerStatusesEnum))\n  );\n}\n\nexport function getIsTransactionTimedOut(\n  status?: TransactionServerStatusesEnum | TransactionBatchStatusesEnum\n) {\n  return (\n    status != null &&\n    isBatchTransactionTimedOut(status as TransactionBatchStatusesEnum)\n  );\n}\n\nexport function isBatchTransactionPending(\n  status?: TransactionBatchStatusesEnum\n) {\n  return status != null && pendingBatchTransactionsStates.includes(status);\n}\n\nexport function isBatchTransactionSuccessful(\n  status: TransactionBatchStatusesEnum\n) {\n  return status != null && successBatchTransactionsStates.includes(status);\n}\n\nexport function isBatchTransactionFailed(status: TransactionBatchStatusesEnum) {\n  return status != null && failBatchTransactionsStates.includes(status);\n}\n\nexport function isBatchTransactionTimedOut(\n  status?: TransactionBatchStatusesEnum\n) {\n  return status != null && timedOutBatchTransactionsStates.includes(status);\n}\n\nexport function isServerTransactionPending(\n  status?: TransactionServerStatusesEnum\n) {\n  return status != null && pendingServerTransactionsStatuses.includes(status);\n}\nexport function isServerTransactionSuccessful(\n  status: TransactionServerStatusesEnum\n) {\n  return status != null && successServerTransactionsStates.includes(status);\n}\n\nexport function isServerTransactionFailed(\n  status: TransactionServerStatusesEnum\n) {\n  return status != null && failServerTransactionsStates.includes(status);\n}\n","const base64Regex =\n  /(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)/;\n\nexport function isStringBase64(string: string) {\n  return base64Regex.test(string);\n}\n\nexport function encodeToBase64(string: string) {\n  return btoa(string);\n}\n\nexport function decodeBase64(string: string) {\n  return atob(string);\n}\n","const isUtf8 = (str: string) => {\n  for (let i = 0; i < str.length; i++) {\n    if (str.charCodeAt(i) > 127) return false;\n  }\n  return true;\n};\n\nexport function decodePart(part: string) {\n  let decodedPart = part;\n\n  try {\n    const hexPart = Buffer.from(part, 'hex').toString().trim();\n\n    if (isUtf8(hexPart) && hexPart.length > 1) {\n      decodedPart = hexPart;\n    }\n  } catch (error) {}\n\n  return decodedPart;\n}\n\nexport default decodePart;\n","export const getAllStringOccurrences = (sourceStr: string, searchStr: string) =>\n  [...sourceStr.matchAll(new RegExp(searchStr, 'gi'))].map((a) => a.index);\n","import BigNumber from 'bignumber.js';\nimport { MultiEsdtTxType, TransactionTypesEnum } from 'types/transactions';\nimport { decodePart } from 'utils/decoders';\nimport { getAllStringOccurrences } from '../getAllStringOccurrences';\n\n// TODO: add tests\nexport function parseMultiEsdtTransferData(data?: string) {\n  const transactions: MultiEsdtTxType[] = [];\n  let contractCallDataIndex = 0;\n  try {\n    if (\n      data?.startsWith(TransactionTypesEnum.MultiESDTNFTTransfer) &&\n      data?.includes('@')\n    ) {\n      const [, receiver, encodedTxCount, ...rest] = data?.split('@');\n      if (receiver) {\n        const txCount = new BigNumber(encodedTxCount, 16).toNumber();\n\n        let itemIndex = 0;\n        for (let txIndex = 0; txIndex < txCount; txIndex++) {\n          const transaction: MultiEsdtTxType = {\n            type: TransactionTypesEnum.nftTransaction,\n            data: '',\n            receiver\n          };\n\n          for (let index = 0; index < 3; index++) {\n            switch (index) {\n              case 0:\n                transaction.token = decodePart(rest[itemIndex]);\n                transaction.data = rest[itemIndex];\n                break;\n              case 1: {\n                const encodedNonce =\n                  rest[itemIndex] && rest[itemIndex].length\n                    ? rest[itemIndex]\n                    : '';\n                if (encodedNonce) {\n                  transaction.nonce = encodedNonce;\n                } else {\n                  transaction.type = TransactionTypesEnum.esdtTransaction;\n                }\n                transaction.data = `${transaction.data}@${rest[itemIndex]}`;\n                break;\n              }\n              case 2:\n                transaction.amount = new BigNumber(\n                  rest[itemIndex],\n                  16\n                ).toString(10);\n                transaction.data = `${transaction.data}@${rest[itemIndex]}`;\n                break;\n              default:\n                break;\n            }\n            contractCallDataIndex = itemIndex + 1;\n            itemIndex++;\n          }\n          transactions[txIndex] = transaction;\n        }\n        if (\n          transactions.length !== txCount ||\n          transactions.some(\n            (tx) => getAllStringOccurrences(tx.data, '@').length !== 2\n          ) ||\n          transactions.some((tx) => tx.data.startsWith('@'))\n        ) {\n          return [];\n        }\n        if (rest[contractCallDataIndex]) {\n          let scCallData = rest[contractCallDataIndex];\n          for (let i = contractCallDataIndex + 1; i < rest.length; i++) {\n            scCallData += '@' + rest[i];\n          }\n          transactions[txCount] = {\n            type: TransactionTypesEnum.scCall,\n            data: scCallData,\n            receiver\n          };\n        }\n      }\n    }\n  } catch (err) {\n    return transactions;\n  }\n  return transactions;\n}\n\nexport default parseMultiEsdtTransferData;\n","import BigNumber from 'bignumber.js';\nimport { TransactionTypesEnum } from '../../types/transactions';\n\nconst noData = {\n  tokenId: '',\n  amount: ''\n};\n\n// TODO: add tests\nexport function getTokenFromData(data?: string): {\n  tokenId: string;\n  amount: string;\n} {\n  const tokenTransfer = data?.includes(TransactionTypesEnum.ESDTTransfer);\n  const nftTransfer = data?.includes(TransactionTypesEnum.ESDTNFTTransfer);\n\n  if (data != null && (tokenTransfer || nftTransfer)) {\n    try {\n      const encodedToken = data.split('@')[1];\n      const encodedAmount = data.split('@')[tokenTransfer ? 2 : 3];\n      const tokenId = Buffer.from(encodedToken, 'hex').toString('ascii');\n\n      if (tokenId) {\n        const amount = new BigNumber(\n          '0x' + encodedAmount.replace('0x', '')\n        ).toString(10);\n        return {\n          tokenId,\n          amount\n        };\n      } else {\n        return noData;\n      }\n    } catch (e) {\n      return noData;\n    }\n  }\n  return noData;\n}\nexport default getTokenFromData;\n","export function isTokenTransfer({\n  tokenId,\n  erdLabel\n}: {\n  tokenId: string | undefined;\n  erdLabel: string;\n}) {\n  return Boolean(tokenId && tokenId !== erdLabel);\n}\n\nexport default isTokenTransfer;\n","function buildUrlParams(\n  search: string,\n  urlParams: {\n    [key: string]: string;\n  }\n) {\n  const urlSearchParams = new URLSearchParams(search);\n  const params = Object.fromEntries(urlSearchParams as any);\n\n  const nextUrlParams = new URLSearchParams({\n    ...params,\n    ...urlParams\n  }).toString();\n\n  return { nextUrlParams, params };\n}\n\ninterface ReplyUrlType {\n  callbackUrl: string;\n  urlParams?: { [key: string]: string };\n}\n\nexport function buildReplyUrl({ callbackUrl, urlParams = {} }: ReplyUrlType) {\n  let url = callbackUrl;\n  if (Object.entries(urlParams).length > 0) {\n    const { search, origin, pathname } = new URL(callbackUrl);\n    const { nextUrlParams } = buildUrlParams(search, urlParams);\n    url = `${origin}${pathname}?${nextUrlParams}`;\n  }\n  return url;\n}\n\nexport default buildReplyUrl;\n","import {\n  Transaction,\n  TransactionOptions,\n  TransactionVersion\n} from '@elrondnetwork/erdjs';\nimport { TransactionServerStatusesEnum } from 'types/enums';\n\nexport function parseTransactionAfterSigning(\n  transaction: Transaction,\n  isLedger = false\n) {\n  // TODO: REMOVE\n  //#region REMOVE when options is available in erdjs getTransactionsFromWalletUrl\n  if (isLedger) {\n    transaction.version = TransactionVersion.withTxHashSignVersion();\n    transaction.options = TransactionOptions.withTxHashSignOptions();\n  }\n  //#endregion\n  const parsedTransaction = transaction.toPlainObject();\n  parsedTransaction.hash = transaction.getHash().toString();\n  parsedTransaction.status = TransactionServerStatusesEnum.pending;\n  return parsedTransaction;\n}\n\nexport default parseTransactionAfterSigning;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { REHYDRATE } from 'redux-persist';\nimport {\n  TransactionBatchStatusesEnum,\n  TransactionServerStatusesEnum\n} from 'types/enums';\nimport {\n  SignedTransactionsType,\n  SignedTransactionType,\n  TransactionsToSignType\n} from 'types/transactions';\nimport { isContract } from 'utils/smartContracts';\nimport {\n  getIsTransactionFailed,\n  getIsTransactionSuccessful,\n  getIsTransactionCompleted\n} from 'utils/transactions';\nimport { logoutAction } from '../commonActions';\n\nexport interface UpdateSignedTransactionsPayloadType {\n  sessionId: string;\n  status: TransactionBatchStatusesEnum;\n  errorMessage?: string;\n  transactions?: SignedTransactionType[];\n}\n\nexport interface UpdateSignedTransactionStatusPayloadType {\n  sessionId: string;\n  transactionHash: string;\n  status: TransactionServerStatusesEnum;\n  errorMessage?: string;\n}\n\nexport interface TransactionsSliceStateType {\n  signedTransactions: SignedTransactionsType;\n  transactionsToSign: TransactionsToSignType | null;\n  signTransactionsError: string | null;\n}\n\nconst initialState: TransactionsSliceStateType = {\n  signedTransactions: {},\n  transactionsToSign: null,\n  signTransactionsError: null\n};\n\nexport const transactionsSlice = createSlice({\n  name: 'transactionsSlice',\n  initialState,\n  reducers: {\n    updateSignedTransaction: (\n      state: TransactionsSliceStateType,\n      action: PayloadAction<SignedTransactionsType>\n    ) => {\n      state.signedTransactions = {\n        ...state.signedTransactions,\n        ...action.payload\n      };\n    },\n    updateSignedTransactions: (\n      state: TransactionsSliceStateType,\n      action: PayloadAction<UpdateSignedTransactionsPayloadType>\n    ) => {\n      const { sessionId, status, errorMessage, transactions } = action.payload;\n      const transaction = state.signedTransactions[sessionId];\n      if (transaction != null) {\n        state.signedTransactions[sessionId].status = status;\n        if (errorMessage != null) {\n          state.signedTransactions[sessionId].errorMessage = errorMessage;\n        }\n        if (transactions != null) {\n          state.signedTransactions[sessionId].transactions = transactions;\n        }\n      }\n    },\n    updateSignedTransactionStatus: (\n      state: TransactionsSliceStateType,\n      action: PayloadAction<UpdateSignedTransactionStatusPayloadType>\n    ) => {\n      const { sessionId, status, errorMessage, transactionHash } =\n        action.payload;\n      const transactions = state.signedTransactions?.[sessionId]?.transactions;\n      if (transactions != null) {\n        state.signedTransactions[sessionId].transactions = transactions.map(\n          (transaction) => {\n            if (transaction.hash === transactionHash) {\n              return {\n                ...transaction,\n                status,\n                errorMessage\n              };\n            }\n            return transaction;\n          }\n        );\n        const areTransactionsSuccessful = state.signedTransactions[\n          sessionId\n        ]?.transactions?.every((transaction) => {\n          const isScCall = isContract(transaction.receiver, transaction.data);\n          return isScCall\n            ? getIsTransactionCompleted(transaction.status)\n            : getIsTransactionSuccessful(transaction.status);\n        });\n\n        const areTransactionsFailed = state.signedTransactions[\n          sessionId\n        ]?.transactions?.every((transaction) =>\n          getIsTransactionFailed(transaction.status)\n        );\n        if (areTransactionsSuccessful) {\n          state.signedTransactions[sessionId].status =\n            TransactionBatchStatusesEnum.success;\n        }\n        if (areTransactionsFailed) {\n          state.signedTransactions[sessionId].status =\n            TransactionBatchStatusesEnum.fail;\n        }\n      }\n    },\n    setTransactionsToSign: (\n      state: TransactionsSliceStateType,\n      action: PayloadAction<TransactionsToSignType>\n    ) => {\n      state.transactionsToSign = action.payload;\n      state.signTransactionsError = null;\n    },\n    clearSignTransactions: (state) => {\n      state.transactionsToSign = initialState.transactionsToSign;\n      state.signTransactionsError = null;\n    },\n    setSignTransactionsError: (state, action: PayloadAction<string | null>) => {\n      state.signTransactionsError = action.payload;\n    }\n  },\n  extraReducers: (builder) => {\n    builder.addCase(logoutAction, () => {\n      return initialState;\n    });\n    builder.addCase(REHYDRATE, (state, action: any) => {\n      if (!action.payload?.transactions) {\n        return;\n      }\n\n      const { signedTransactions } = action.payload.transactions;\n      const parsedSignedTransactions = Object.entries(\n        signedTransactions\n      ).reduce((acc, [sessionId, transaction]) => {\n        const txTimestamp: any = new Date(sessionId);\n        const expiration: any = new Date();\n        expiration.setHours(expiration.getHours() + 5);\n        const isExpired = expiration - txTimestamp > 0;\n        if (!isExpired) {\n          acc[sessionId] = transaction;\n        }\n        return acc;\n      }, {});\n      if (signedTransactions != null) {\n        state.signedTransactions = parsedSignedTransactions;\n      }\n    });\n  }\n});\n\nexport const {\n  updateSignedTransaction,\n  updateSignedTransactionStatus,\n  updateSignedTransactions,\n  setTransactionsToSign,\n  clearSignTransactions,\n  setSignTransactionsError\n} = transactionsSlice.actions;\n\nexport default transactionsSlice.reducer;\n","import { combineReducers } from '@reduxjs/toolkit';\nimport { persistReducer } from 'redux-persist';\nimport sessionStorage from 'redux-persist/lib/storage/session';\nimport account from './slices/accountInfoSlice';\nimport extraActions from './slices/extraActionsSlice';\nimport loginInfo from './slices/loginInfoSlice';\nimport modals from './slices/modalsSlice';\nimport networkConfig from './slices/networkConfigSlice';\nimport transactionsInfo from './slices/transactionsInfoSlice';\nimport transactions from './slices/transactionsSlice';\n\n//#region custom reducers\nconst transactionsInfoPersistConfig = {\n  key: 'dapp-core-transactionsInfo',\n  version: 1,\n  storage: sessionStorage\n};\nconst transactionsReducer = {\n  key: 'dapp-core-transactions',\n  version: 1,\n  storage: sessionStorage,\n  blacklist: ['transactionsToSign']\n};\nconst customReducers = {\n  transactions: persistReducer(transactionsReducer, transactions),\n  transactionsInfo: persistReducer(\n    transactionsInfoPersistConfig,\n    transactionsInfo\n  )\n};\n//#endregion\n\nconst rootReducer = combineReducers({\n  ...customReducers,\n  account,\n  networkConfig,\n  extraActions,\n  loginInfo,\n  modals\n});\n\nexport default rootReducer;\n","import { configureStore } from '@reduxjs/toolkit';\n\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nimport loginSessionMiddleware from './middlewares/loginSessionMiddleware';\nimport rootReducer from './reducers';\n\nconst persistConfig = {\n  key: 'dapp-core-store',\n  version: 1,\n  storage,\n  whitelist: ['account', 'loginInfo', 'toasts', 'modals']\n};\n\nconst localStorageReducers = persistReducer(persistConfig, rootReducer);\n\nexport const store = configureStore({\n  reducer: localStorageReducers,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [\n          FLUSH,\n          REHYDRATE,\n          PAUSE,\n          PERSIST,\n          PURGE,\n          REGISTER,\n          'appConfig/setProvider',\n          'accountInfoSlice/setAccount',\n          'accountInfoSlice/setAccountNonce',\n          'extraActionsSlice/initializeExtraActions'\n        ],\n        ignoredPaths: [\n          'networkConfig.proxy',\n          'networkConfig.apiProvider',\n          'networkConfig.provider',\n          'payload.nonce',\n          'account.account.nonce',\n          // extra actions\n          'extraActions.log',\n          'payload.log',\n          'payload.onLogin',\n\n          'extraActions.getProvider',\n          'extraActions.init'\n        ]\n      }\n    }).concat(loginSessionMiddleware)\n});\n\nexport const persistor = persistStore(store);\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type StoreType = typeof store;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { createSelector } from 'reselect';\nimport { RootState } from '../store';\n\nexport const extraActionsSelector = (state: RootState) => state.extraActions;\n\nexport const extraActionsInit = createSelector(\n  extraActionsSelector,\n  (state) => state.init\n);\n","import {\n  Transaction,\n  GasLimit,\n  GasPrice,\n  Address,\n  TransactionPayload,\n  Balance,\n  ChainID,\n  TransactionVersion\n} from '@elrondnetwork/erdjs';\nimport { Nonce, TransactionOptions } from '@elrondnetwork/erdjs/out';\nimport { RawTransactionType } from 'types/transactions';\n\nexport default function newTransaction(rawTransaction: RawTransactionType) {\n  const { data } = rawTransaction;\n  const parsedData = data ? atob(data) : '';\n  return new Transaction({\n    value: Balance.fromString(rawTransaction.value),\n    data: new TransactionPayload(parsedData),\n    nonce: new Nonce(rawTransaction.nonce),\n    receiver: new Address(rawTransaction.receiver),\n    gasLimit: new GasLimit(rawTransaction.gasLimit),\n    gasPrice: new GasPrice(rawTransaction.gasPrice),\n    chainID: new ChainID(rawTransaction.chainID),\n    ...(rawTransaction.version\n      ? { version: new TransactionVersion(rawTransaction.version) }\n      : {}),\n    ...(rawTransaction.options\n      ? { options: new TransactionOptions(rawTransaction.options) }\n      : {})\n  });\n}\n","import { Transaction } from '@elrondnetwork/erdjs/out';\nimport newTransaction from 'models/newTransaction';\nimport { SignedTransactionsType } from 'types/transactions';\nimport {\n  getIsTransactionCompleted,\n  getIsTransactionFailed,\n  getIsTransactionPending,\n  getIsTransactionSuccessful,\n  getIsTransactionTimedOut\n} from 'utils/transactions';\nimport { RootState } from '../store';\nimport { createDeepEqualSelector } from './helpers';\n\nexport interface TransactionsToSignReturnType {\n  callbackRoute: string;\n  sessionId: string;\n  redirectAfterSign: boolean;\n  transactions: Transaction[];\n  sessionInformation?: any;\n}\n\nexport const transactionsSelectors = (state: RootState) => state.transactions;\n\nexport const signedTransactionsSelector = createDeepEqualSelector(\n  transactionsSelectors,\n  (state) => state.signedTransactions\n);\n\nexport const signTransactionsErrorSelector = createDeepEqualSelector(\n  transactionsSelectors,\n  (state) => state.signTransactionsError\n);\n\nexport const pendingSignedTransactionsSelector = createDeepEqualSelector(\n  signedTransactionsSelector,\n  (signedTransactions) =>\n    Object.entries(signedTransactions).reduce((acc, [sessionId, txBody]) => {\n      if (getIsTransactionPending(txBody.status)) {\n        acc[sessionId] = txBody;\n      }\n      return acc;\n    }, {})\n);\n\nexport const successfulTransactionsSelector = createDeepEqualSelector(\n  signedTransactionsSelector,\n  (signedTransactions) =>\n    Object.entries(signedTransactions).reduce((acc, [sessionId, txBody]) => {\n      if (getIsTransactionSuccessful(txBody.status)) {\n        acc[sessionId] = txBody;\n      }\n      return acc;\n    }, {})\n);\n\nexport const completedTransactionsSelector = createDeepEqualSelector(\n  signedTransactionsSelector,\n  (signedTransactions) =>\n    Object.entries(signedTransactions).reduce((acc, [sessionId, txBody]) => {\n      if (getIsTransactionCompleted(txBody.status)) {\n        acc[sessionId] = txBody;\n      }\n      return acc;\n    }, {})\n);\n\nexport const failedTransactionsSelector = createDeepEqualSelector(\n  signedTransactionsSelector,\n  (signedTransactions) =>\n    Object.entries(signedTransactions).reduce((acc, [sessionId, txBody]) => {\n      if (getIsTransactionFailed(txBody.status)) {\n        acc[sessionId] = txBody;\n      }\n      return acc;\n    }, {})\n);\n\nexport const timedOutTransactionsSelector = createDeepEqualSelector(\n  signedTransactionsSelector,\n  (signedTransactions) =>\n    Object.entries(signedTransactions).reduce((acc, [sessionId, txBody]) => {\n      if (getIsTransactionTimedOut(txBody.status)) {\n        acc[sessionId] = txBody;\n      }\n      return acc;\n    }, {})\n);\n\nexport const transactionsToSignSelector = createDeepEqualSelector(\n  transactionsSelectors,\n  (state): TransactionsToSignReturnType | null => {\n    if (state?.transactionsToSign == null) {\n      return null;\n    }\n    return {\n      ...state.transactionsToSign,\n      transactions:\n        state?.transactionsToSign?.transactions.map((tx) =>\n          newTransaction(tx)\n        ) || []\n    };\n  }\n);\n\nexport const transactionStatusSelector = createDeepEqualSelector(\n  signedTransactionsSelector,\n  (_: RootState, transactionSessionId: string | null) => transactionSessionId,\n  (\n    signedTransactions: SignedTransactionsType,\n    transactionSessionId: string | null\n  ) =>\n    transactionSessionId != null\n      ? signedTransactions?.[transactionSessionId] || {}\n      : {}\n);\n","import { createDeepEqualSelector } from 'redux/selectors/helpers';\nimport {\n  defaultTransactionErrorMessage,\n  defaultTransactionProcessingMessage,\n  defaultTransactionSuccessMessage\n} from 'redux/slices';\nimport { RootState } from '../store';\n\nconst defaultTransactionInfo = {\n  errorMessage: defaultTransactionErrorMessage,\n  successMessage: defaultTransactionSuccessMessage,\n  processingMessage: defaultTransactionProcessingMessage\n};\n\nexport const transactionsInfoSelectors = (state: RootState) =>\n  state.transactionsInfo;\n\nexport const transactionDisplayInfoSelector = createDeepEqualSelector(\n  transactionsInfoSelectors,\n  (_: RootState, transactionSessionId: string | null) => transactionSessionId,\n  (transactionsDisplayInfo: any, transactionSessionId: string | null) =>\n    transactionSessionId != null\n      ? transactionsDisplayInfo?.[Number(transactionSessionId)] ||\n        defaultTransactionInfo\n      : defaultTransactionInfo\n);\n","import { RootState } from '../store';\nimport { createDeepEqualSelector } from './helpers';\n\nexport const modalsSliceSelector = (state: RootState) => state.modals;\n\nexport const txSubmittedModalSelector = createDeepEqualSelector(\n  modalsSliceSelector,\n  (state) => state.txSubmittedModal\n);\n\nexport const notificationModalSelector = createDeepEqualSelector(\n  modalsSliceSelector,\n  (state) => state.notificationModal\n);\n","import { isLoggedInSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\n\nexport function getIsLoggedIn() {\n  return isLoggedInSelector(store.getState());\n}\n","import { logoutAction } from 'redux/commonActions';\nimport { providerSelector } from 'redux/selectors/networkConfigSelectors';\nimport { store } from 'redux/store';\nimport { getIsLoggedIn } from 'utils/getIsLoggedIn';\n\nexport async function logout(\n  callbackUrl?: string,\n  onRedirect?: (callbackUrl?: string) => void\n) {\n  const provider = providerSelector(store.getState());\n  const isLoggedIn = getIsLoggedIn();\n  if (!isLoggedIn) {\n    return;\n  }\n  store.dispatch(logoutAction());\n  try {\n    await provider.logout({ callbackUrl });\n    if (callbackUrl) {\n      if (onRedirect) {\n        onRedirect(callbackUrl);\n      } else {\n        window.location.href = callbackUrl;\n      }\n    }\n  } catch (err) {\n    console.error('error logging out', err);\n  }\n}\n","export function buildUrlParams(\n  search: string,\n  urlParams: {\n    [key: string]: string;\n  }\n) {\n  const urlSearchParams: any = new URLSearchParams(search);\n  const params = Object.fromEntries(urlSearchParams);\n  const nextUrlParams = new URLSearchParams({\n    ...params,\n    ...urlParams\n  }).toString();\n  return { nextUrlParams, params };\n}\n","interface SwitchTrueType {\n  default: any;\n  [key: string]: any;\n}\n\ntype ReturnKeys = 'true' | 'false';\n\nexport function switchTrue(object: SwitchTrueType) {\n  const { default: defaultValue, ...rest } = object;\n  const obj = { default: defaultValue, ...rest };\n  const result = Object.keys(obj).reduce((acc, cur) => {\n    return {\n      ...acc,\n      [cur === 'default' ? 'true' : cur]: (obj as any)[cur as ReturnKeys]\n    };\n  }, {} as Record<ReturnKeys, any>);\n  return result['true'];\n}\n","import { Address } from '@elrondnetwork/erdjs';\n\nfunction canTransformToPublicKey(address: string) {\n  try {\n    const checkAddress = new Address(address);\n    return Boolean(checkAddress.bech32());\n  } catch {\n    return false;\n  }\n}\n\nexport function addressIsValid(destinationAddress: string) {\n  const isValidBach =\n    destinationAddress?.startsWith('erd') &&\n    destinationAddress.length === 62 &&\n    /^\\w+$/.test(destinationAddress);\n\n  return isValidBach && canTransformToPublicKey(destinationAddress);\n}\n","import { proxySelector } from 'redux/selectors';\nimport { store } from 'redux/store';\n\nexport function getNetworkProxy() {\n  return proxySelector(store.getState());\n}\n","import { apiProviderSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\n\nexport function getApiProvider() {\n  return apiProviderSelector(store.getState());\n}\n","import { providerSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\n\nexport function getAccountProvider() {\n  return providerSelector(store.getState());\n}\n","import { getProviderType } from 'utils/provider';\nimport { getAccountProvider } from './getAccountProvider';\n\nexport function getAccountProviderType() {\n  const provider = getAccountProvider();\n  return getProviderType(provider);\n}\n","import { chainIDSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\n\nexport function getChainID() {\n  return chainIDSelector(store.getState());\n}\n","import { networkSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\n\nexport function getNetworkConfig() {\n  return networkSelector(store.getState());\n}\n","import { egldLabelSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\n\nexport function getEgldLabel() {\n  return egldLabelSelector(store.getState());\n}\n","import { getAccountProviderType } from './getAccountProviderType';\n\nexport function getIsProviderEqualTo(comparedProviderType: any) {\n  const providerType = getAccountProviderType();\n  return providerType === comparedProviderType;\n}\n","import {\n  addressSelector,\n  isLoggedInSelector,\n  providerSelector,\n  walletLoginSelector\n} from 'redux/selectors';\nimport { store } from 'redux/store';\nimport { LoginMethodsEnum } from 'types/enums';\nimport { getIsProviderEqualTo } from 'utils/network';\nimport { addressIsValid } from './addressIsValid';\n\nexport function getAddress(): Promise<string> {\n  const { search } = window.location;\n  const appState = store.getState();\n  const provider = providerSelector(appState);\n  const address = addressSelector(appState);\n  const loggedIn = isLoggedInSelector(appState);\n  const walletLogin = walletLoginSelector(appState);\n\n  if (getIsProviderEqualTo(LoginMethodsEnum.ledger) && loggedIn) {\n    return new Promise((resolve) => {\n      resolve(address);\n    });\n  }\n\n  return !getIsProviderEqualTo(LoginMethodsEnum.none) &&\n    !getIsProviderEqualTo(LoginMethodsEnum.wallet) &&\n    !getIsProviderEqualTo(LoginMethodsEnum.extra)\n    ? // TODO: does not take into account ledger locked see link for details:\n      // https://github.com/ElrondNetwork/dapp/blob/d5c57695a10055f20d387ba064b6843606789ee9/src/helpers/accountMethods.tsx#L21\n      provider.getAddress()\n    : new Promise((resolve) => {\n        if (walletLogin != null) {\n          const urlSearchParams = new URLSearchParams(search);\n          const params = Object.fromEntries(urlSearchParams as any);\n          if (addressIsValid(params.address)) {\n            resolve(params.address);\n          }\n        }\n        if (loggedIn) {\n          resolve(address);\n        }\n        resolve('');\n      });\n}\n\nexport default getAddress;\n","import { Address } from '@elrondnetwork/erdjs';\nimport { proxySelector } from 'redux/selectors';\nimport { store } from 'redux/store';\n\nexport function getAccount(address: string) {\n  const proxy = proxySelector(store.getState());\n  return proxy.getAccount(new Address(address));\n}\n\nexport default getAccount;\n","import { setAccountNonce } from 'redux/slices';\nimport { store } from 'redux/store';\n\n// this is is needed to allow the users to set the nonce dynamically from outside the library\n// without getting access to store.dispatch function\nexport function setNonce(nonce: number) {\n  store.dispatch(setAccountNonce(nonce));\n}\n","import { AccountOnNetwork } from '@elrondnetwork/erdjs';\nimport { accountNonceSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\n\nexport function getLatestNonce(account: AccountOnNetwork) {\n  const appState = store.getState();\n  const currentAccountNonce = accountNonceSelector(appState);\n  return currentAccountNonce && !isNaN(currentAccountNonce)\n    ? Math.max(currentAccountNonce, account.nonce.valueOf())\n    : account.nonce.valueOf();\n}\n\nexport default getLatestNonce;\n","import { accountSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\nimport { getAccount } from './getAccount';\n\nexport async function getAccountBalance(address?: string) {\n  let accountAddress = address;\n  if (accountAddress == null) {\n    const account = accountSelector(store.getState());\n    accountAddress = account.address;\n  }\n  const account = await getAccount(accountAddress);\n  return account.balance.toString();\n}\n","import { providerSelector } from 'redux/selectors';\nimport { setAccount } from 'redux/slices';\nimport { store } from 'redux/store';\nimport getAccount from './getAccount';\nimport getAddress from './getAddress';\nimport getLatestNonce from './getLatestNonce';\n\nconst setNewAccount = async () => {\n  try {\n    const address = await getAddress();\n    try {\n      const account = await getAccount(address);\n      const accountData = {\n        balance: account.balance.toString(),\n        address,\n        nonce: getLatestNonce(account)\n      };\n      store.dispatch(setAccount(accountData));\n      return accountData;\n    } catch (e) {\n      console.error('Failed getting account ', e);\n    }\n  } catch (e) {\n    console.error('Failed getting address ', e);\n  }\n  return null;\n};\n\nexport async function refreshAccount() {\n  const provider = providerSelector(store.getState());\n  if (provider.isInitialized()) {\n    return setNewAccount();\n  } else {\n    try {\n      const initialized = await provider.init();\n      if (!initialized) {\n        return;\n      }\n      return setNewAccount();\n    } catch (e) {\n      console.error('Failed initializing provider ', e);\n    }\n  }\n  return undefined;\n}\n","const isAddressOfMetachain = (pubKey: Buffer) => {\n  // prettier-ignore\n  const metachainPrefix = Buffer.from([\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n  ]);\n  const pubKeyPrefix = pubKey.slice(0, metachainPrefix.length);\n  if (pubKeyPrefix.equals(metachainPrefix)) {\n    return true;\n  }\n  const zeroAddress = Buffer.alloc(32).fill(0);\n  return pubKey.equals(zeroAddress);\n};\nexport const getShardOfAddress = (hexPubKey: any) => {\n  try {\n    const numShards = 3;\n    const maskHigh = parseInt('11', 2);\n    const maskLow = parseInt('01', 2);\n    const pubKey = Buffer.from(hexPubKey, 'hex');\n    const lastByteOfPubKey = pubKey[31];\n    if (isAddressOfMetachain(pubKey)) {\n      return 4294967295;\n    }\n    let shard = lastByteOfPubKey & maskHigh;\n    if (shard > numShards - 1) {\n      shard = lastByteOfPubKey & maskLow;\n    }\n    return shard;\n  } catch (err) {\n    return -1;\n  }\n};\n","export const logarithmicRest = (position: number) => {\n  const minp = 0;\n  const maxp = 10;\n\n  const minv = Math.log(0.005);\n  const maxv = Math.log(2);\n\n  const scale = (maxv - minv) / (maxp - minp);\n\n  return Math.exp(minv + scale * (position - minp));\n};\n","const ledgerErrorCodes = {\n  0x9000: {\n    code: 'codeSuccess',\n    message: 'Success'\n  },\n  0x6985: {\n    code: 'ERR_USER_DENIED',\n    message: 'Rejected by user'\n  },\n  0x6d00: {\n    code: 'ERR_UNKNOWN_INSTRUCTION',\n    message: 'Unknown instruction'\n  },\n  0x6e00: {\n    code: 'ERR_WRONG_CLA',\n    message: 'Wrong CLA'\n  },\n  0x6e01: {\n    code: 'ERR_INVALID_ARGUMENTS',\n    message: 'Invalid arguments'\n  },\n  0x6e02: {\n    code: 'ERR_INVALID_MESSAGE',\n    message: 'Invalid message'\n  },\n  0x6e03: {\n    code: 'ERR_INVALID_P1',\n    message: 'Invalid P1'\n  },\n  0x6e04: {\n    code: 'ERR_MESSAGE_TOO_LONG',\n    message: 'Message too long'\n  },\n  0x6e05: {\n    code: 'ERR_RECEIVER_TOO_LONG',\n    message: 'Receiver too long'\n  },\n  0x6e06: {\n    code: 'ERR_AMOUNT_TOO_LONG',\n    message: 'Amount too long'\n  },\n  0x6e07: {\n    code: 'ERR_CONTRACT_DATA_DISABLED',\n    message: 'Contract data disabled in app options'\n  },\n  0x6e08: {\n    code: 'ERR_MESSAGE_INCOMPLETE',\n    message: 'Message incomplete'\n  },\n  0x6e10: {\n    code: 'ERR_SIGNATURE_FAILED',\n    message: 'Signature failed'\n  },\n  0x6e09: {\n    code: 'ERR_WRONG_TX_VERSION',\n    message: 'Wrong TX version'\n  },\n  0x6e0a: {\n    code: 'ERR_NONCE_TOO_LONG',\n    message: 'Nonce too long'\n  },\n  0x6e0b: {\n    code: 'ERR_INVALID_AMOUNT',\n    message: 'Invalid amount'\n  },\n  0x6e0c: {\n    code: 'ERR_INVALID_FEE',\n    message: 'Invalid fee'\n  },\n  0x6e0d: {\n    code: 'ERR_PRETTY_FAILED',\n    message: 'Pretty failed'\n  },\n  0x6e0e: {\n    code: 'ERR_DATA_TOO_LONG',\n    message: 'Data too long'\n  },\n  0x6e0f: {\n    code: 'ERR_WRONG_TX_OPTIONS',\n    message: 'Invalid transaction options'\n  },\n  0x6e11: {\n    code: 'ERR_SIGN_TX_DEPRECATED',\n    message:\n      'Regular transaction signing is deprecated in this version. Use hash signing.'\n  }\n};\n\nexport default ledgerErrorCodes;\n","import { EnvironmentsEnum, NetworkType } from 'types';\n\nexport const DEFAULT_MIN_GAS_LIMIT = 50_000;\n\nexport const configEndpoint: Record<EnvironmentsEnum, string> = {\n  mainnet: 'https://api.elrond.com/dapp/config',\n  testnet: 'https://testnet-api.elrond.com/dapp/config',\n  devnet: 'https://devnet-api.elrond.com/dapp/config'\n};\n\nexport const fallbackConfigurations: Record<string, NetworkType> = {\n  devnet: {\n    id: 'devnet',\n    name: 'Devnet',\n    egldLabel: 'xEGLD',\n    egldDenomination: '18',\n    decimals: '4',\n    gasPerDataByte: '1500',\n    walletConnectDeepLink:\n      'https://maiar.page.link/?apn=com.elrond.maiar.wallet&isi=1519405832&ibi=com.elrond.maiar.wallet&link=https://maiar.com/',\n    walletConnectBridgeAddresses: ['https://bridge.walletconnect.org'],\n    walletAddress: 'https://devnet-wallet.elrond.com',\n    apiAddress: 'https://devnet-api.elrond.com',\n    explorerAddress: 'http://devnet-explorer.elrond.com',\n    apiTimeout: '4000'\n  },\n  testnet: {\n    id: 'testnet',\n    name: 'Testnet',\n    egldLabel: 'xEGLD',\n    egldDenomination: '18',\n    decimals: '4',\n    gasPerDataByte: '1500',\n    walletConnectDeepLink:\n      'https://maiar.page.link/?apn=com.elrond.maiar.wallet&isi=1519405832&ibi=com.elrond.maiar.wallet&link=https://maiar.com/',\n    walletConnectBridgeAddresses: ['https://bridge.walletconnect.org'],\n    walletAddress: 'https://testnet-wallet.elrond.com',\n    apiAddress: 'https://testnet-api.elrond.com',\n    explorerAddress: 'http://testnet-explorer.elrond.com',\n    apiTimeout: '4000'\n  },\n  mainnet: {\n    id: 'mainnet',\n    name: 'Mainnet',\n    egldLabel: 'xEGLD',\n    egldDenomination: '18',\n    decimals: '4',\n    gasPerDataByte: '1500',\n    walletConnectDeepLink:\n      'https://maiar.page.link/?apn=com.elrond.maiar.wallet&isi=1519405832&ibi=com.elrond.maiar.wallet&link=https://maiar.com/',\n    walletConnectBridgeAddresses: ['https://bridge.walletconnect.org'],\n    walletAddress: 'https://wallet.elrond.com',\n    apiAddress: 'https://api.elrond.com',\n    explorerAddress: 'https://explorer.elrond.com',\n    apiTimeout: '4000'\n  }\n};\n","import * as ledgerErrorCodes from './ledgerErrorCodes';\nimport * as networkConstants from './network';\n\nexport { networkConstants, ledgerErrorCodes };\n\nexport const gasPriceModifier = '0.01';\nexport const gasPerDataByte = '1500';\nexport const gasLimit = '50000';\nexport const defaultGasPrice = 1_000_000_000;\nexport const defaultGasLimit = 60_000_000;\nexport const denomination = 18;\nexport const decimals = 4;\n\nexport const dappInitRoute = '/dapp/init';\nexport const walletSignSession = 'signSession';\n","export function pipe<ValueType>(previous: ValueType) {\n  return {\n    if: function (condition: boolean) {\n      if (condition) {\n        return {\n          then: (newValue: ValueType | ((prop: ValueType) => ValueType)) =>\n            // if a callback is passed, callback is executed with previous value\n            newValue instanceof Function\n              ? pipe(newValue(previous))\n              : pipe(newValue)\n        };\n      } else {\n        return {\n          then: () => pipe(previous)\n        };\n      }\n    },\n\n    then: (newValue: ValueType | ((prop: ValueType) => ValueType)) =>\n      newValue instanceof Function ? pipe(newValue(previous)) : pipe(newValue),\n\n    valueOf: function () {\n      return previous;\n    }\n  };\n}\nexport default pipe;\n","import { validation } from '@elrondnetwork/dapp-utils';\nimport { Balance, Token } from '@elrondnetwork/erdjs';\nimport BigNumber from 'bignumber.js';\nimport {\n  denomination as configDenomination,\n  decimals as configDecimals\n} from 'constants/index';\nimport pipe from './pipe';\n\nBigNumber.config({ ROUNDING_MODE: BigNumber.ROUND_FLOOR });\n\nexport function denominate({\n  input,\n  denomination = configDenomination,\n  decimals = configDecimals,\n  showLastNonZeroDecimal = true,\n  addCommas = false\n}: {\n  input: string | Balance;\n  denomination?: number;\n  decimals?: number;\n  showLastNonZeroDecimal?: boolean;\n  addCommas?: boolean;\n}) {\n  const token = new Token({ decimals: denomination });\n\n  if (typeof input === 'string' && !validation.stringIsInteger(input, false)) {\n    throw new Error('Invalid input');\n  }\n\n  return (\n    pipe(input as string)\n      // denominate\n      .if(typeof input === 'string')\n      .then(() =>\n        new Balance(token, 0, new BigNumber(input as string)).toDenominated()\n      )\n\n      .if(input.constructor === Balance)\n      .then(() => (input as Balance).toDenominated())\n\n      // format\n      .then((current) => {\n        const bnBalance = new BigNumber(current);\n\n        if (bnBalance.isZero()) {\n          return '0';\n        }\n        const balance = bnBalance.toString(10);\n        const [integerPart, decimalPart] = balance.split('.');\n        const bNdecimalPart = new BigNumber(decimalPart || 0);\n\n        const decimalPlaces = pipe(0)\n          .if(Boolean(decimalPart && showLastNonZeroDecimal))\n          .then(() => Math.max(decimalPart.length, decimals))\n\n          .if(bNdecimalPart.isZero() && !showLastNonZeroDecimal)\n          .then(0)\n\n          .if(Boolean(decimalPart && !showLastNonZeroDecimal))\n          .then(() => Math.min(decimalPart.length, decimals))\n\n          .valueOf();\n\n        const shownDecimalsAreZero =\n          decimalPart &&\n          decimals >= 1 &&\n          decimals <= decimalPart.length &&\n          bNdecimalPart.isGreaterThan(0) &&\n          new BigNumber(decimalPart.substring(0, decimals)).isZero();\n\n        const formatted = bnBalance.toFormat(decimalPlaces);\n\n        const formattedBalance = pipe(balance)\n          .if(addCommas)\n          .then(formatted)\n\n          .if(Boolean(shownDecimalsAreZero) && !showLastNonZeroDecimal)\n          .then((current) => {\n            const integerPartZero = new BigNumber(integerPart).isZero();\n            const [numericPart] = current.split('.');\n\n            const zeroPlaceholders = new Array(decimals - 1).fill(0);\n            const zeros = [...zeroPlaceholders, 0].join('');\n            const minAmount = [...zeroPlaceholders, 1].join(''); // 00..1\n\n            if (integerPartZero) {\n              return `<${numericPart}.${minAmount}`;\n            } else {\n              return `${numericPart}.${zeros}`;\n            }\n          })\n\n          .valueOf();\n\n        return formattedBalance;\n      })\n\n      .valueOf()\n  );\n}\nexport default denominate;\n","import {\n  createBalanceBuilder,\n  Token,\n  TokenType\n} from '@elrondnetwork/erdjs/out';\nimport { denomination as configDenomination } from 'constants/index';\n\nexport function nominate(input: string, customDenomination?: number) {\n  const balance = createBalanceBuilder(\n    new Token({\n      decimals: customDenomination || configDenomination,\n      type: TokenType.Fungible\n    })\n  );\n  return balance(input).toString();\n}\n\nexport default nominate;\n","let classnames: any = {};\ntry {\n  classnames = require('classnames');\n} catch (err) {}\n\nexport default classnames;\n","import classNames from 'optionalPackages/classnames';\n\nexport function getGeneratedClasses(\n  className: string,\n  shouldRenderDefaultCss: boolean,\n  defaultStyles: Record<string, string>\n) {\n  return Object.entries(defaultStyles).reduce(\n    (acc, [key, defaultClassNames]) => {\n      acc[key] = classNames?.(\n        `${className}_${key}`,\n        shouldRenderDefaultCss && (defaultClassNames as string)\n      );\n      return acc;\n    },\n    {}\n  ) as any;\n}\n","export const wrapperClassName = 'dapp-core-ui-component';\nexport default wrapperClassName;\n","let moment: any = {};\ntry {\n  moment = require('moment');\n} catch (err) {}\n\nexport default moment;\n","import moment from 'optionalPackages/moment';\n\nexport type SessionKeyType = 'address' | 'shard' | 'toasts' | 'toastProgress';\ntype ExpiresType = number | false;\n\nexport const setItem = ({\n  key,\n  data,\n  expires\n}: {\n  key: SessionKeyType;\n  data: any;\n  expires: ExpiresType;\n}) => {\n  sessionStorage.setItem(\n    String(key),\n    JSON.stringify({\n      expires,\n      data\n    })\n  );\n};\n\nexport const getItem = (key: SessionKeyType): any => {\n  const item = sessionStorage.getItem(String(key));\n  if (!item) {\n    return null;\n  }\n\n  const deserializedItem = JSON.parse(item);\n  if (!deserializedItem) {\n    return null;\n  }\n\n  if (\n    !deserializedItem.hasOwnProperty('expires') ||\n    !deserializedItem.hasOwnProperty('data')\n  ) {\n    return null;\n  }\n\n  const expired = moment().unix() >= deserializedItem.expires;\n  if (expired) {\n    sessionStorage.removeItem(String(key));\n    return null;\n  }\n\n  return deserializedItem.data;\n};\n\nexport const removeItem = (key: SessionKeyType) =>\n  sessionStorage.removeItem(String(key));\n\nexport const clear = () => sessionStorage.clear();\n\nexport const storage = {\n  setItem,\n  getItem,\n  removeItem,\n  clear\n};\n\nexport default storage;\n","import React from 'react';\nimport {\n  createDispatchHook,\n  createSelectorHook,\n  createStoreHook\n} from 'react-redux';\n\nconst defaultContextValue: any = null;\nexport const DappCoreContext = React.createContext(defaultContextValue);\n\nexport const useStore = createStoreHook(DappCoreContext);\nexport const useDispatch = createDispatchHook(DappCoreContext);\nexport const useSelector = createSelectorHook(DappCoreContext);\n","import { useState } from 'react';\nimport { ExtensionProvider } from '@elrondnetwork/erdjs';\nimport { loginAction } from 'redux/commonActions';\nimport { useDispatch, useSelector } from 'redux/DappProviderContext';\nimport { isLoggedInSelector } from 'redux/selectors';\nimport { setProvider, setTokenLogin } from 'redux/slices';\nimport { LoginMethodsEnum } from 'types/enums';\nimport { optionalRedirect } from 'utils/internal';\nimport { LoginHookGenericStateType, InitiateLoginFunctionType } from '../types';\n\ninterface UseExtensionLoginPropsType {\n  callbackRoute: string;\n  token?: string;\n  redirectAfterLogin?: boolean;\n}\n\nexport type UseExtensionLoginReturnType = [\n  InitiateLoginFunctionType,\n  LoginHookGenericStateType\n];\n\nexport const useExtensionLogin = ({\n  callbackRoute,\n  token,\n  redirectAfterLogin = false\n}: UseExtensionLoginPropsType): UseExtensionLoginReturnType => {\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const isLoggedIn = useSelector(isLoggedInSelector);\n  const dispatch = useDispatch();\n  async function initiateLogin() {\n    setIsLoading(true);\n    const provider: ExtensionProvider = ExtensionProvider.getInstance();\n\n    try {\n      const isSuccessfullyInitialized: boolean = await provider.init();\n\n      if (!isSuccessfullyInitialized) {\n        console.warn(\n          'Something went wrong trying to redirect to wallet login..'\n        );\n        return;\n      }\n\n      const callbackUrl: string = encodeURIComponent(\n        `${window.location.origin}${callbackRoute}`\n      );\n      const providerLoginData = {\n        callbackUrl,\n        ...(token && { token })\n      };\n\n      await provider.login(providerLoginData);\n\n      dispatch(setProvider(provider));\n\n      const { signature, address } = provider.account;\n      if (signature) {\n        dispatch(\n          setTokenLogin({\n            loginToken: String(token),\n            signature\n          })\n        );\n      }\n      dispatch(\n        loginAction({ address, loginMethod: LoginMethodsEnum.extension })\n      );\n      optionalRedirect(callbackRoute, redirectAfterLogin);\n    } catch (error) {\n      console.error('error loging in', error);\n      // TODO: can be any or typed error\n      setError('error logging in' + (error as any).message);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  const loginFailed = Boolean(error);\n  return [\n    initiateLogin,\n    {\n      loginFailed,\n      error,\n      isLoading: isLoading && !loginFailed,\n      isLoggedIn: isLoggedIn && !loginFailed\n    }\n  ];\n};\n","import { useState } from 'react';\nimport { useSelector } from 'redux/DappProviderContext';\nimport { isLoggedInSelector, networkSelector } from 'redux/selectors';\nimport { setWalletLogin } from 'redux/slices';\nimport { store } from 'redux/store';\nimport { newWalletProvider } from 'utils';\nimport { LoginHookGenericStateType, InitiateLoginFunctionType } from '../types';\n\ninterface UseWebWalletLoginPropsType {\n  callbackRoute: string;\n  token?: string;\n}\n\nexport type UseWebWalletLoginReturnType = [\n  InitiateLoginFunctionType,\n  LoginHookGenericStateType\n];\n\nexport const useWebWalletLogin = ({\n  callbackRoute,\n  token\n}: UseWebWalletLoginPropsType): UseWebWalletLoginReturnType => {\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const isLoggedIn = useSelector(isLoggedInSelector);\n\n  async function initiateLogin() {\n    try {\n      setIsLoading(true);\n      const appState = store.getState();\n      const network = networkSelector(appState);\n      const provider = newWalletProvider(network.walletAddress);\n\n      const now = new Date();\n      const expires: number = now.setMinutes(now.getMinutes() + 3) / 1000;\n      const walletLoginData = {\n        data: {},\n        expires: expires\n      };\n\n      store.dispatch(setWalletLogin(walletLoginData));\n\n      const callbackUrl: string = encodeURIComponent(\n        `${window.location.origin}${callbackRoute}`\n      );\n      const loginData = {\n        callbackUrl: callbackUrl,\n        ...(token && { token })\n      };\n\n      await provider.login(loginData);\n    } catch (error) {\n      console.error(error);\n      setError('error logging in' + (error as any).message);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  const loginFailed = error != null;\n\n  return [\n    initiateLogin,\n    {\n      error,\n      loginFailed,\n      isLoading: isLoading && !loginFailed,\n      isLoggedIn: isLoggedIn && !loginFailed\n    }\n  ];\n};\n\nexport default useWebWalletLogin;\n","import React from 'react';\nimport { HWProvider } from '@elrondnetwork/erdjs';\nimport { ledgerErrorCodes } from 'constants/index';\nimport { loginAction } from 'redux/commonActions';\nimport { useDispatch, useSelector } from 'redux/DappProviderContext';\nimport {\n  isLoggedInSelector,\n  ledgerAccountSelector,\n  proxySelector\n} from 'redux/selectors';\nimport {\n  setLedgerAccount,\n  setLedgerLogin,\n  setProvider,\n  setTokenLogin\n} from 'redux/slices';\nimport { LoginMethodsEnum } from 'types/enums';\nimport { optionalRedirect } from 'utils/internal';\nimport { LoginHookGenericStateType, InitiateLoginFunctionType } from '../types';\n\nconst ledgerAppErrorText = 'Check if Elrond app is open on Ledger';\nconst failInitializeErrorText =\n  'Could not initialise ledger app, make sure Elrond app is open';\n\nconst defaultAddressesPerPage = 10;\n\nexport interface UseLedgerLoginPropsType {\n  callbackRoute: string;\n  addressesPerPage?: number;\n  token?: string;\n  redirectAfterLogin?: boolean;\n}\n\nexport interface SelectedAddress {\n  address: string;\n  index: number;\n}\n\nexport interface LedgerLoginHookCustomStateType {\n  accounts: string[];\n  showAddressList: boolean;\n  startIndex: number;\n  selectedAddress: SelectedAddress | null;\n\n  onGoToPrevPage: () => void;\n  onGoToNextPage: () => void;\n  onSelectAddress: (address: SelectedAddress | null) => void;\n  onConfirmSelectedAddress: () => void;\n}\n\nexport type LedgerLoginHookReturnType = [\n  InitiateLoginFunctionType,\n  LoginHookGenericStateType,\n  LedgerLoginHookCustomStateType\n];\n\nexport function useLedgerLogin({\n  callbackRoute,\n  token,\n  addressesPerPage = defaultAddressesPerPage,\n  redirectAfterLogin = false\n}: UseLedgerLoginPropsType): LedgerLoginHookReturnType {\n  const ledgerAccount = useSelector(ledgerAccountSelector);\n  const isLoggedIn = useSelector(isLoggedInSelector);\n  const proxy = useSelector(proxySelector);\n  const dispatch = useDispatch();\n  const [error, setError] = React.useState('');\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  const hwWalletP = new HWProvider(proxy);\n  const [startIndex, setStartIndex] = React.useState(0);\n  const [accounts, setAccounts] = React.useState<string[]>([]);\n  const [selectedAddress, setSelectedAddress] =\n    React.useState<SelectedAddress | null>(null);\n\n  const [showAddressList, setShowAddressList] = React.useState(false);\n\n  function dispatchLoginActions({\n    provider,\n    address,\n    index,\n    signature\n  }: {\n    provider: HWProvider;\n    address: string;\n    index: number;\n    signature?: string;\n  }) {\n    dispatch(setProvider(provider));\n\n    dispatch(setLedgerLogin({ index, loginType: LoginMethodsEnum.ledger }));\n\n    if (signature) {\n      dispatch(\n        setTokenLogin({\n          loginToken: String(token),\n          signature\n        })\n      );\n    }\n    dispatch(loginAction({ address, loginMethod: LoginMethodsEnum.ledger }));\n    optionalRedirect(callbackRoute, redirectAfterLogin);\n  }\n\n  const onLoginFailed = (err: any, customMessage?: string) => {\n    if (err.statusCode in ledgerErrorCodes) {\n      setError(\n        (ledgerErrorCodes as any)[err.statusCode].message + customMessage\n      );\n    }\n    setIsLoading(false);\n    console.warn(err);\n    dispatch(setLedgerAccount(null));\n  };\n\n  async function loginUser(hwWalletProvider: HWProvider) {\n    if (selectedAddress == null) {\n      return false;\n    }\n    const { index } = selectedAddress;\n\n    if (token) {\n      try {\n        const loginInfo = await hwWalletProvider.tokenLogin({\n          token: Buffer.from(`${token}{}`),\n          addressIndex: index\n        });\n        dispatchLoginActions({\n          address: loginInfo.address,\n          provider: hwWalletProvider,\n          index: index,\n          signature: loginInfo.signature.hex()\n        });\n      } catch (err) {\n        onLoginFailed(err, '. Update Elrond App to continue.');\n      }\n    } else {\n      try {\n        const address = await hwWalletProvider.login({ addressIndex: index });\n        dispatchLoginActions({\n          address,\n          provider: hwWalletProvider,\n          index\n        });\n      } catch (err) {\n        onLoginFailed(err);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  async function onConfirmSelectedAddress() {\n    try {\n      setIsLoading(true);\n      if (selectedAddress == null) {\n        return false;\n      }\n      const { address, index } = selectedAddress;\n      dispatch(\n        setLedgerAccount({\n          index,\n          address\n        })\n      );\n      const hwWalletProvider = new HWProvider(proxy);\n      const initialized = await hwWalletProvider.init();\n      if (!initialized) {\n        setError(failInitializeErrorText);\n        console.warn(failInitializeErrorText);\n        return false;\n      }\n      setIsLoading(false);\n      await loginUser(hwWalletProvider);\n    } catch (err) {\n      if ((err as any).statusCode in ledgerErrorCodes) {\n        setError((ledgerErrorCodes as any)[(err as any).statusCode].message);\n      }\n      console.warn(failInitializeErrorText, err);\n    } finally {\n      setIsLoading(false);\n    }\n    setShowAddressList(false);\n    return true;\n  }\n\n  async function fetchAccounts() {\n    try {\n      setIsLoading(true);\n      const initialized = await hwWalletP.init();\n      if (!initialized) {\n        setError(failInitializeErrorText);\n        console.warn(failInitializeErrorText);\n        setIsLoading(false);\n        return;\n      }\n      const accounts = await hwWalletP.getAccounts(\n        startIndex,\n        addressesPerPage\n      );\n      setAccounts(accounts);\n      setIsLoading(false);\n    } catch (err) {\n      if ((err as any).statusCode in ledgerErrorCodes) {\n        setError((ledgerErrorCodes as any)[(err as any).statusCode].message);\n      } else {\n        setError(ledgerAppErrorText);\n      }\n      console.error('error', err);\n      setIsLoading(false);\n    }\n  }\n\n  async function onStartLogin() {\n    setError('');\n    try {\n      setIsLoading(true);\n      if (ledgerAccount != null) {\n        const hwWalletP = new HWProvider(proxy);\n        const initialized = await hwWalletP.init();\n        if (!initialized) {\n          console.warn(failInitializeErrorText);\n          return;\n        }\n        const address = await hwWalletP.login();\n        dispatch(setProvider(hwWalletP));\n        dispatch(\n          loginAction({ address, loginMethod: LoginMethodsEnum.ledger })\n        );\n        optionalRedirect(callbackRoute, redirectAfterLogin);\n      } else {\n        if (accounts?.length > 0) {\n          setShowAddressList(true);\n        } else {\n          await fetchAccounts();\n          setShowAddressList(true);\n        }\n      }\n    } catch (error) {\n      console.error('error ', error);\n      setError(ledgerAppErrorText);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  function onSelectAddress(newSelectedAddress: SelectedAddress | null) {\n    setSelectedAddress(newSelectedAddress);\n  }\n\n  function onGoToNextPage() {\n    setSelectedAddress(null);\n    setStartIndex((current) => current + 1);\n  }\n\n  function onGoToPrevPage() {\n    setSelectedAddress(null);\n    setStartIndex((current) => (current === 0 ? 0 : current - 1));\n  }\n\n  React.useEffect(() => {\n    fetchAccounts();\n  }, [startIndex]);\n  const loginFailed = Boolean(error);\n  return [\n    onStartLogin,\n    {\n      loginFailed,\n      isLoggedIn: isLoggedIn && !loginFailed,\n      error,\n      isLoading: isLoading && !loginFailed\n    },\n    {\n      accounts,\n      showAddressList,\n      startIndex,\n      selectedAddress,\n\n      onGoToPrevPage,\n      onGoToNextPage,\n      onSelectAddress,\n      onConfirmSelectedAddress\n    }\n  ];\n}\n","import { useRef, useEffect } from 'react';\n\nexport function useUpdateEffect(effect: any, dependencies: any[] = []) {\n  const isInitialMount = useRef(true);\n\n  useEffect(() => {\n    if (isInitialMount.current) {\n      isInitialMount.current = false;\n    } else {\n      effect();\n    }\n  }, dependencies);\n}\n","import { useEffect, useRef, useState } from 'react';\nimport { WalletConnectProvider } from '@elrondnetwork/erdjs';\n\nimport { useUpdateEffect } from 'hooks/useUpdateEffect';\nimport { loginAction } from 'redux/commonActions';\nimport { useDispatch, useSelector } from 'redux/DappProviderContext';\nimport {\n  isLoggedInSelector,\n  providerSelector,\n  proxySelector,\n  walletConnectBridgeAddressSelector,\n  walletConnectDeepLinkSelector\n} from 'redux/selectors';\nimport {\n  setProvider,\n  setTokenLogin,\n  setTokenLoginSignature,\n  setWalletConnectLogin\n} from 'redux/slices';\n\nimport { LoginMethodsEnum } from 'types/enums';\nimport { logout } from 'utils';\nimport { optionalRedirect } from 'utils/internal';\nimport Timeout = NodeJS.Timeout;\nimport { LoginHookGenericStateType } from '../types';\n\ninterface InitWalletConnectType {\n  callbackRoute: string;\n  logoutRoute: string;\n  token?: string;\n  shouldLoginUser?: boolean;\n  redirectAfterLogin?: boolean;\n}\n\nexport interface WalletConnectLoginHookCustomStateType {\n  uriDeepLink: string | null;\n  walletConnectUri?: string;\n}\n\nexport type WalletConnectLoginHookReturnType = [\n  (loginProvider?: boolean) => void,\n  LoginHookGenericStateType,\n  WalletConnectLoginHookCustomStateType\n];\n\nexport const useWalletConnectLogin = ({\n  callbackRoute,\n  logoutRoute,\n  token,\n  redirectAfterLogin = false\n}: InitWalletConnectType): WalletConnectLoginHookReturnType => {\n  const dispatch = useDispatch();\n  const heartbeatInterval = 15000;\n\n  const [error, setError] = useState<string>('');\n  const [wcUri, setWcUri] = useState<string>('');\n\n  const proxy = useSelector(proxySelector);\n\n  const provider: any = useSelector(providerSelector);\n  const walletConnectBridgeAddress = useSelector(\n    walletConnectBridgeAddressSelector\n  );\n  const walletConnectDeepLink = useSelector(walletConnectDeepLinkSelector);\n  const isLoggedIn = useSelector(isLoggedInSelector);\n  const providerRef = useRef<any>(provider);\n\n  let heartbeatDisconnectInterval: Timeout;\n\n  const hasWcUri = Boolean(wcUri);\n  const isLoading = !hasWcUri;\n  const uriDeepLink = hasWcUri\n    ? `${walletConnectDeepLink}?wallet-connect=${encodeURIComponent(wcUri)}`\n    : null;\n\n  useEffect(() => {\n    handleHeartbeat();\n\n    const interval = setInterval(() => {\n      handleHeartbeat();\n    }, heartbeatInterval);\n\n    return () => clearInterval(interval);\n  }, [provider]);\n\n  useUpdateEffect(() => {\n    generateWcUri();\n  }, [token]);\n\n  useUpdateEffect(() => {\n    providerRef.current = provider;\n  }, [provider]);\n\n  async function handleHeartbeat() {\n    const isProviderConnected = Boolean(\n      providerRef.current?.walletConnector?.connected\n    );\n    if (!isProviderConnected) {\n      return;\n    }\n\n    const customMessage = {\n      method: 'heartbeat',\n      params: {}\n    };\n\n    try {\n      await providerRef.current.sendCustomMessage(customMessage);\n    } catch (error) {\n      console.error('Connection lost', error);\n      handleOnLogout();\n    }\n  }\n\n  async function handleOnLogin() {\n    try {\n      const provider = providerRef.current;\n      if (isLoggedIn) {\n        return;\n      }\n      if (provider == null) {\n        return;\n      }\n      const address = await provider.getAddress();\n      const signature = await provider.getSignature();\n      const hasSignature = Boolean(signature);\n      const loginActionData = {\n        address: address,\n        loginMethod: LoginMethodsEnum.walletconnect\n      };\n\n      const loginData = {\n        logoutRoute: logoutRoute,\n        loginType: 'walletConnect',\n        callbackRoute: callbackRoute\n      };\n\n      if (hasSignature) {\n        dispatch(setWalletConnectLogin(loginData));\n        dispatch(setTokenLoginSignature(signature));\n      } else {\n        dispatch(setWalletConnectLogin(loginData));\n      }\n      dispatch(loginAction(loginActionData));\n\n      provider.walletConnector.on('heartbeat', () => {\n        clearInterval(heartbeatDisconnectInterval);\n        heartbeatDisconnectInterval = setInterval(() => {\n          console.log('Maiar Wallet Connection Lost');\n          handleOnLogout();\n          clearInterval(heartbeatDisconnectInterval);\n        }, 150000);\n      });\n\n      optionalRedirect(callbackRoute, redirectAfterLogin);\n    } catch (err) {\n      setError('Invalid address');\n      console.error(err);\n    }\n  }\n\n  const handleOnLogout = () => {\n    logout(callbackRoute);\n  };\n\n  async function initiateLogin(loginProvider = true) {\n    if (\n      !walletConnectBridgeAddress ||\n      providerRef?.current?.isInitialized?.()\n    ) {\n      return;\n    }\n\n    const providerHandlers = {\n      onClientLogin: handleOnLogin,\n      onClientLogout: handleOnLogout\n    };\n\n    const newProvider = new WalletConnectProvider(\n      proxy,\n      walletConnectBridgeAddress,\n      providerHandlers\n    );\n\n    await newProvider.init();\n    dispatch(setProvider(newProvider));\n    providerRef.current = newProvider;\n    if (loginProvider) {\n      generateWcUri();\n    }\n  }\n\n  async function generateWcUri() {\n    if (!walletConnectBridgeAddress) {\n      return;\n    }\n\n    const walletConnectUri: string | undefined =\n      await providerRef.current?.login();\n    const hasUri = Boolean(walletConnectUri);\n\n    if (!hasUri) {\n      return;\n    }\n\n    if (!token) {\n      setWcUri(walletConnectUri as string);\n      return;\n    }\n\n    const wcUriWithToken = `${walletConnectUri}&token=${token}`;\n\n    setWcUri(wcUriWithToken);\n    dispatch(setTokenLogin({ loginToken: token }));\n  }\n\n  const loginFailed = error != null;\n  return [\n    initiateLogin,\n    {\n      error,\n      loginFailed,\n      isLoading: isLoading && !loginFailed,\n      isLoggedIn: isLoggedIn && !loginFailed\n    },\n    { uriDeepLink, walletConnectUri: wcUri }\n  ];\n};\n\nexport default useWalletConnectLogin;\n","import { operations } from '@elrondnetwork/dapp-utils';\nimport { Transaction } from '@elrondnetwork/erdjs/out';\nimport BigNumber from 'bignumber.js';\nimport { gasPerDataByte, gasPriceModifier } from 'constants/index';\n\nexport function calcTotalFee(transactions: Transaction[], minGasLimit: number) {\n  let totalFee = new BigNumber(0);\n\n  transactions.forEach((tx) => {\n    const fee = operations.calculateFeeLimit({\n      gasPerDataByte,\n      gasPriceModifier,\n      minGasLimit: String(minGasLimit),\n      gasLimit: tx.getGasLimit().valueOf().toString(),\n      gasPrice: tx.getGasPrice().valueOf().toString(),\n      data: tx.getData().toString(),\n      chainId: tx.getChainID().valueOf()\n    });\n    totalFee = totalFee.plus(new BigNumber(fee));\n  });\n\n  return totalFee;\n}\n","import { validation } from '@elrondnetwork/dapp-utils';\nimport BigNumber from 'bignumber.js';\nimport { networkConstants } from 'constants/index';\n\nimport { accountBalanceSelector, chainIDSelector } from 'redux/selectors';\nimport {\n  setTransactionsToSign,\n  setNotificationModal,\n  setTransactionsDisplayInfo\n} from 'redux/slices';\nimport { store } from 'redux/store';\nimport { NotificationTypesEnum, SignTransactionsPropsType } from 'types';\nimport { SendTransactionReturnType } from './sendTransactions';\nimport { calcTotalFee } from './utils';\n\nexport function signTransactions({\n  transactions,\n  callbackRoute = window.location.pathname,\n  redirectAfterSign = true,\n  sessionInformation,\n  minGasLimit = networkConstants.DEFAULT_MIN_GAS_LIMIT,\n  transactionsDisplayInfo\n}: SignTransactionsPropsType): SendTransactionReturnType {\n  const appState = store.getState();\n  const sessionId = Date.now().toString();\n  const accountBalance = accountBalanceSelector(appState);\n  const storeChainId = chainIDSelector(appState);\n\n  const transactionsPayload = Array.isArray(transactions)\n    ? transactions\n    : [transactions];\n  const bNtotalFee = calcTotalFee(transactionsPayload, minGasLimit);\n  const bNbalance = new BigNumber(\n    validation.stringIsFloat(accountBalance) ? accountBalance : '0'\n  );\n  const hasSufficientFunds = bNbalance.minus(bNtotalFee).isGreaterThan(0);\n\n  if (!hasSufficientFunds) {\n    const notificationPayload = {\n      type: NotificationTypesEnum.warning,\n      iconClassName: 'text-warning',\n      title: 'Insufficient EGLD funds',\n      description: 'Current EGLD balance cannot cover the transaction fees.'\n    };\n\n    store.dispatch(setNotificationModal(notificationPayload));\n    return { error: 'insufficient funds', sessionId: null };\n  }\n\n  const hasValidChainId = transactionsPayload?.every(\n    (tx) => tx.getChainID().valueOf() === storeChainId.valueOf()\n  );\n  if (!hasValidChainId) {\n    const notificationPayload = {\n      type: NotificationTypesEnum.warning,\n      iconClassName: 'text-warning',\n      title: 'Network change detected',\n      description: 'The application tried to change the transaction network'\n    };\n    store.dispatch(setNotificationModal(notificationPayload));\n    return { error: 'Invalid ChainID', sessionId: null };\n  }\n\n  const signTransactionsPayload = {\n    sessionId,\n    callbackRoute,\n    redirectAfterSign,\n    sessionInformation,\n    transactions: transactionsPayload.map((tx) => tx.toPlainObject())\n  };\n\n  store.dispatch(setTransactionsToSign(signTransactionsPayload));\n  store.dispatch(\n    setTransactionsDisplayInfo({ sessionId, transactionsDisplayInfo })\n  );\n  return { sessionId };\n}\n\nexport default signTransactions;\n","import { Address, Transaction } from '@elrondnetwork/erdjs/out';\nimport { defaultGasPrice, defaultGasLimit } from 'constants/index';\nimport newTransaction from 'models/newTransaction';\nimport { addressSelector, chainIDSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\nimport { SendSimpleTransactionPropsType } from 'types';\nimport { getAccount, getLatestNonce } from 'utils';\nimport { encodeToBase64, isStringBase64 } from 'utils/decoders/base64Utils';\n\nenum ErrorCodesEnum {\n  'invalidReceiver' = 'Invalid Receiver address',\n  'unknownError' = 'Unknown Error. Please check the transactions and try again'\n}\n\nexport async function transformAndSignTransactions({\n  transactions\n}: SendSimpleTransactionPropsType): Promise<Transaction[]> {\n  const address = addressSelector(store.getState());\n  const account = await getAccount(address);\n  const nonce = getLatestNonce(account);\n  return transactions.map((tx) => {\n    const {\n      value,\n      receiver,\n      data = '',\n      chainID,\n      version,\n      options,\n      gasPrice = defaultGasPrice,\n      gasLimit = defaultGasLimit\n    } = tx;\n    let validatedReceiver = receiver;\n\n    try {\n      const addr = new Address(receiver);\n      validatedReceiver = addr.hex();\n    } catch (err) {\n      throw ErrorCodesEnum.invalidReceiver;\n    }\n\n    const storeChainId = chainIDSelector(store.getState()).valueOf().toString();\n    const transactionsChainId = chainID || storeChainId;\n    return newTransaction({\n      value,\n      receiver: validatedReceiver,\n      data: isStringBase64(data) ? data : encodeToBase64(data),\n      gasPrice,\n      gasLimit,\n      nonce: Number(nonce.valueOf().toString()),\n      sender: new Address(address).hex(),\n      chainID: transactionsChainId,\n      version,\n      options\n    });\n  });\n}\n\nexport default transformAndSignTransactions;\n","import { Transaction } from '@elrondnetwork/erdjs/out';\nimport { SendTransactionsPropsType, SimpleTransactionType } from 'types';\nimport { signTransactions } from './signTransactions';\nimport transformAndSignTransactions from './transformAndSignTransactions';\n\nexport interface SendTransactionReturnType {\n  error?: string;\n  sessionId: string | null;\n}\n\nexport async function sendTransactions({\n  transactions,\n  transactionsDisplayInfo,\n  redirectAfterSign = true,\n  sessionInformation,\n  minGasLimit\n}: SendTransactionsPropsType): Promise<SendTransactionReturnType> {\n  try {\n    const transactionsPayload = Array.isArray(transactions)\n      ? transactions\n      : [transactions];\n\n    const areComplexTransactions = transactionsPayload.every(\n      (tx) => Object.getPrototypeOf(tx).toPlainObject != null\n    );\n    let txToSign = transactionsPayload;\n    if (!areComplexTransactions) {\n      txToSign = await transformAndSignTransactions({\n        transactions: transactionsPayload as SimpleTransactionType[],\n        minGasLimit\n      });\n    }\n\n    return signTransactions({\n      transactions: txToSign as Transaction[],\n      minGasLimit,\n      redirectAfterSign,\n      sessionInformation,\n      transactionsDisplayInfo\n    });\n  } catch (err) {\n    console.error('error signing transaction', err as any);\n    return { error: err as any, sessionId: null };\n  }\n}\n\nexport default sendTransactions;\n","import { useEffect } from 'react';\nimport { useSelector } from 'redux/DappProviderContext';\nimport { transactionStatusSelector } from 'redux/selectors';\nimport { RootState } from 'redux/store';\nimport { TransactionBatchStatusesEnum } from 'types/enums';\nimport {\n  getIsTransactionCompleted,\n  getIsTransactionFailed,\n  getIsTransactionPending,\n  getIsTransactionSuccessful,\n  getIsTransactionTimedOut\n} from 'utils';\n\nexport interface UseTrackTransactionStatusArgsType {\n  transactionId: string | null;\n  onSuccess?: (transactionId: string | null) => void;\n  onFail?: (transactionId: string | null, errorMessage?: string) => void;\n  onTimedOut?: (transactionId: string | null) => void;\n  onCancelled?: (transactionId: string | null) => void;\n  onCompleted?: (transactionId: string | null) => void;\n}\n\nexport function useTrackTransactionStatus({\n  transactionId,\n  onSuccess,\n  onFail,\n  onCancelled,\n  onTimedOut,\n  onCompleted\n}: UseTrackTransactionStatusArgsType) {\n  const transactionsBatch = useSelector((state: RootState) =>\n    transactionStatusSelector(state, transactionId)\n  );\n\n  const { status, transactions, errorMessage } = transactionsBatch;\n\n  const isPending = getIsTransactionPending(status);\n  const isFailed = getIsTransactionFailed(status);\n  const isTimedOut = getIsTransactionTimedOut(status);\n  const isSuccessful = getIsTransactionSuccessful(status);\n  const isCompleted = getIsTransactionCompleted(status);\n\n  const isCancelled = status === TransactionBatchStatusesEnum.cancelled;\n\n  useEffect(() => {\n    if (isSuccessful && onSuccess) {\n      onSuccess(transactionId);\n    }\n  }, [isSuccessful]);\n  useEffect(() => {\n    if (isCompleted && onCompleted) {\n      onCompleted(transactionId);\n    }\n  }, [isCompleted]);\n\n  useEffect(() => {\n    if (isFailed && onFail) {\n      onFail(transactionId, errorMessage);\n    }\n  }, [isFailed]);\n\n  useEffect(() => {\n    if (isCancelled && onCancelled) {\n      onCancelled(transactionId);\n    }\n  }, [isCancelled]);\n\n  useEffect(() => {\n    if (isTimedOut) {\n      if (onTimedOut) {\n        onTimedOut(transactionId);\n      } else {\n        onFail?.(transactionId, 'timeout');\n      }\n    }\n  }, [isTimedOut]);\n\n  if (transactionId == null) {\n    return {};\n  }\n\n  if (transactionsBatch == null) {\n    return { errorMessage: 'No transaction to track' };\n  }\n\n  return {\n    isPending,\n    isSuccessful,\n    isFailed,\n    isCancelled,\n    isCompleted,\n    errorMessage,\n    status,\n    transactions\n  };\n}\n\nexport default useTrackTransactionStatus;\n","import { useSelector } from 'redux/DappProviderContext';\nimport { pendingSignedTransactionsSelector } from 'redux/selectors';\nimport {\n  SignedTransactionsType,\n  SignedTransactionsBodyType\n} from 'types/transactions';\n\ninterface useGetPendingTransactionsReturnType {\n  pendingTransactions: SignedTransactionsType;\n  pendingTransactionsArray: [string, SignedTransactionsBodyType][];\n  hasPendingTransactions: boolean;\n}\n\n//this is a hook to be able to take advantage of memoization offered by useSelector\nexport function useGetPendingTransactions(): useGetPendingTransactionsReturnType {\n  const pendingTransactions = useSelector(pendingSignedTransactionsSelector);\n  const pendingTransactionsArray: [string, SignedTransactionsBodyType][] =\n    Object.entries(pendingTransactions);\n  const hasPendingTransactions = pendingTransactionsArray?.length > 0;\n  return {\n    pendingTransactions,\n    pendingTransactionsArray,\n    hasPendingTransactions\n  };\n}\n","import { useSelector } from 'redux/DappProviderContext';\nimport { failedTransactionsSelector } from 'redux/selectors';\nimport {\n  SignedTransactionsType,\n  SignedTransactionsBodyType\n} from 'types/transactions';\n\ninterface useGetFailedTransactionsReturnType {\n  failedTransactions: SignedTransactionsType;\n  failedTransactionsArray: [string, SignedTransactionsBodyType][];\n  hasFailedTransactions: boolean;\n}\n\n//this is a hook to be able to take advantage of memoization offered by useSelector\nexport function useGetFailedTransactions(): useGetFailedTransactionsReturnType {\n  const failedTransactions = useSelector(failedTransactionsSelector);\n  const failedTransactionsArray: [string, SignedTransactionsBodyType][] =\n    Object.entries(failedTransactions);\n  const hasFailedTransactions = failedTransactionsArray?.length > 0;\n  return {\n    failedTransactions,\n    failedTransactionsArray,\n    hasFailedTransactions\n  };\n}\n","import { useSelector } from 'redux/DappProviderContext';\nimport { successfulTransactionsSelector } from 'redux/selectors';\nimport {\n  SignedTransactionsType,\n  SignedTransactionsBodyType\n} from 'types/transactions';\n\ninterface useGetSuccessfulTransactionsReturnType {\n  successfulTransactions: SignedTransactionsType;\n  successfulTransactionsArray: [string, SignedTransactionsBodyType][];\n  hasSuccessfulTransactions: boolean;\n}\n\n//this is a hook to be able to take advantage of memoization offered by useSelector\nexport function useGetSuccessfulTransactions(): useGetSuccessfulTransactionsReturnType {\n  const successfulTransactions = useSelector(successfulTransactionsSelector);\n  const successfulTransactionsArray: [string, SignedTransactionsBodyType][] =\n    Object.entries(successfulTransactions);\n  const hasSuccessfulTransactions = successfulTransactionsArray?.length > 0;\n  return {\n    successfulTransactions,\n    successfulTransactionsArray,\n    hasSuccessfulTransactions\n  };\n}\n","import { useEffect, useState } from 'react';\nimport { Transaction } from '@elrondnetwork/erdjs';\nimport {\n  MultiSignTxType,\n  TxDataTokenType,\n  TxsDataTokensType\n} from 'types/transactions';\nimport { getTokenFromData } from 'utils';\nimport parseMultiEsdtTransferData from 'utils/transactions/parseMultiEsdtTransferData';\n\nconst defaultTransactionInfo: TxDataTokenType = {\n  tokenId: '',\n  amount: '',\n  type: '',\n  multiTxData: '',\n  receiver: ''\n};\n\ninterface UseParseMultiEsdtTransferDataPropsType {\n  transactions?: Transaction[];\n}\n\ninterface UseParseMultiEsdtTransferDataReturnType {\n  parsedTransactionsByDataField: TxsDataTokensType;\n  getTxInfoByDataField: (\n    data: string,\n    multiTransactionData?: string\n  ) => TxDataTokenType;\n  allTransactions: MultiSignTxType[];\n}\n\nexport function useParseMultiEsdtTransferData({\n  transactions\n}: UseParseMultiEsdtTransferDataPropsType): UseParseMultiEsdtTransferDataReturnType {\n  const [parsedTransactionsByDataField, setParsedTransactions] =\n    useState<TxsDataTokensType>({});\n  const [allTransactions, setAllTransactions] = useState<MultiSignTxType[]>([]);\n\n  function addTransactionDataToParsedInfo(\n    data: string,\n    txInfo: TxDataTokenType\n  ) {\n    setParsedTransactions((existing) => ({\n      ...existing,\n      [data]: txInfo\n    }));\n  }\n\n  function getTxInfoByDataField(\n    data: string,\n    multiTransactionData?: string\n  ): TxDataTokenType {\n    if (parsedTransactionsByDataField == null) {\n      return defaultTransactionInfo;\n    }\n\n    if (data in parsedTransactionsByDataField) {\n      return parsedTransactionsByDataField[data];\n    }\n\n    if (\n      multiTransactionData != null &&\n      String(multiTransactionData) in parsedTransactionsByDataField\n    ) {\n      return parsedTransactionsByDataField[multiTransactionData];\n    }\n\n    return defaultTransactionInfo;\n  }\n\n  function extractTransactionESDTData() {\n    if (transactions && transactions.length > 0) {\n      const allTransactions: MultiSignTxType[] = [];\n      transactions.forEach((transaction, transactionIndex) => {\n        const multiTxs = parseMultiEsdtTransferData(\n          transaction.getData().toString()\n        );\n\n        if (multiTxs.length > 0) {\n          multiTxs.forEach((trx, idx) => {\n            const newTx: MultiSignTxType = {\n              transaction,\n              multiTxData: trx.data,\n              transactionIndex: idx\n            };\n            addTransactionDataToParsedInfo(trx.data, {\n              tokenId: trx.token ? trx.token : '',\n              amount: trx.amount ? trx.amount : '',\n              type: trx.type,\n              nonce: trx.nonce ? trx.nonce : '',\n              multiTxData: trx.data,\n              receiver: trx.receiver\n            });\n            allTransactions.push(newTx);\n          });\n        } else {\n          const { tokenId, amount } = getTokenFromData(\n            transaction.getData().toString()\n          );\n\n          if (tokenId) {\n            addTransactionDataToParsedInfo(transaction.getData().toString(), {\n              tokenId,\n              amount,\n              receiver: transaction.getReceiver().bech32()\n            });\n          }\n          allTransactions.push({ transaction, transactionIndex });\n        }\n      });\n      setAllTransactions(allTransactions);\n    }\n  }\n\n  useEffect(() => {\n    extractTransactionESDTData();\n  }, [transactions]);\n\n  return {\n    parsedTransactionsByDataField,\n    getTxInfoByDataField,\n    allTransactions\n  };\n}\n","import { useSelector } from 'redux/DappProviderContext';\nimport {\n  completedTransactionsSelector,\n  failedTransactionsSelector,\n  pendingSignedTransactionsSelector,\n  signedTransactionsSelector,\n  successfulTransactionsSelector,\n  timedOutTransactionsSelector\n} from 'redux/selectors';\n\ninterface useGetActiveTransactionsStatusReturnType {\n  pending: boolean;\n  timedOut: boolean;\n  fail: boolean;\n  success: boolean;\n  completed: boolean;\n  hasActiveTransactions: boolean;\n}\n\n//this is a hook to be able to take advantage of memoization offered by useSelector\nexport function useGetActiveTransactionsStatus(): useGetActiveTransactionsStatusReturnType {\n  const signedTransactions = useSelector(signedTransactionsSelector);\n  const timedOutTransactions = useSelector(timedOutTransactionsSelector);\n  const failedTransactions = useSelector(failedTransactionsSelector);\n  const successfulTransactions = useSelector(successfulTransactionsSelector);\n  const pendingTransactions = useSelector(pendingSignedTransactionsSelector);\n  const completedTransactions = useSelector(completedTransactionsSelector);\n\n  const pending = Object.keys(pendingTransactions)?.length > 0;\n\n  const timedOut = !pending && Object.keys(timedOutTransactions)?.length > 0;\n\n  const fail =\n    !pending && !timedOut && Object.keys(failedTransactions)?.length > 0;\n\n  const success =\n    !pending &&\n    !timedOut &&\n    !fail &&\n    Object.keys(successfulTransactions).length > 0;\n\n  const completed =\n    !pending &&\n    !timedOut &&\n    !fail &&\n    Object.keys(completedTransactions).length > 0;\n  const hasActiveTransactions = Object.keys(signedTransactions).length > 0;\n  return {\n    pending,\n    timedOut,\n    fail,\n    success,\n    completed,\n    hasActiveTransactions\n  };\n}\n","import { useSelector } from 'redux/DappProviderContext';\nimport { completedTransactionsSelector } from 'redux/selectors';\nimport {\n  SignedTransactionsType,\n  SignedTransactionsBodyType\n} from 'types/transactions';\n\ninterface useGetCompletedTransactionsReturnType {\n  completedTransactions: SignedTransactionsType;\n  completedTransactionsArray: [string, SignedTransactionsBodyType][];\n  hasCompletedTransactions: boolean;\n}\n\n//this is a hook to be able to take advantage of memoization offered by useSelector\nexport function useGetCompletedTransactions(): useGetCompletedTransactionsReturnType {\n  const completedTransactions = useSelector(completedTransactionsSelector);\n  const completedTransactionsArray: [string, SignedTransactionsBodyType][] =\n    Object.entries(completedTransactions);\n  const hasCompletedTransactions = completedTransactionsArray?.length > 0;\n  return {\n    completedTransactions,\n    completedTransactionsArray,\n    hasCompletedTransactions\n  };\n}\n","import { Transaction } from '@elrondnetwork/erdjs';\nimport { proxySelector } from 'redux/selectors';\nimport { store } from 'redux/store';\n\nexport type SendSignedTransactionsReturnType = string[];\n\nexport async function sendSignedTransactions(\n  signedTransactions: Transaction[]\n): Promise<SendSignedTransactionsReturnType> {\n  const proxy = proxySelector(store.getState());\n  const promises = signedTransactions.map((transaction) => {\n    return proxy.sendTransaction(transaction);\n  });\n  const response = await Promise.all(promises);\n\n  return response.map((txHash) => Buffer.from(txHash.hash).toString('hex'));\n}\n","import axios from 'axios';\nimport { networkConfigSelector } from 'redux/selectors';\nimport { store } from 'redux/store';\nimport { SmartContractResult, TransactionServerStatusesEnum } from 'types';\nimport { decodeBase64 } from 'utils';\n\nexport type GetTransactionsByHashesReturnType = {\n  hash: string;\n  invalidTransaction: boolean;\n  status: TransactionServerStatusesEnum;\n  results: SmartContractResult[];\n  receiver: string;\n  data: string;\n  previousStatus: string;\n  hasStatusChanged: boolean;\n}[];\n\nexport type PendingTransactionsType = {\n  hash: string;\n  previousStatus: string;\n}[];\n\nexport async function getTransactionsByHashes(\n  pendingTransactions: PendingTransactionsType\n): Promise<GetTransactionsByHashesReturnType> {\n  const networkConfig = networkConfigSelector(store.getState());\n  const hashes = pendingTransactions.map((tx) => tx.hash);\n  const { data: responseData } = await axios.get(\n    `${networkConfig.network.apiAddress}/transactions`,\n    {\n      params: {\n        hashes: hashes.join(','),\n        withScResults: true\n      }\n    }\n  );\n  return pendingTransactions.map(({ hash, previousStatus }) => {\n    const txOnNetwork = responseData.find(\n      (txResponse: any) => txResponse.txHash === hash\n    );\n    let data = txOnNetwork?.data;\n    try {\n      data = decodeBase64(data);\n    } catch (err) {}\n    return {\n      hash,\n      data,\n      invalidTransaction: txOnNetwork == null,\n      status: txOnNetwork.status,\n      results: txOnNetwork.results,\n      receiver: txOnNetwork?.receiver,\n      previousStatus,\n      hasStatusChanged: status !== previousStatus\n    };\n  });\n}\n","import { useEffect } from 'react';\nimport { HWProvider, ExtensionProvider } from '@elrondnetwork/erdjs';\nimport { loginAction } from 'redux/commonActions';\nimport { useDispatch, useSelector } from 'redux/DappProviderContext';\nimport {\n  loginMethodSelector,\n  walletConnectLoginSelector,\n  networkSelector,\n  proxySelector,\n  walletLoginSelector,\n  addressSelector,\n  ledgerAccountSelector,\n  ledgerLoginSelector,\n  isLoggedInSelector\n} from 'redux/selectors';\nimport { extraActionsSelector } from 'redux/selectors/extraActionsSelectors';\nimport {\n  setAccount,\n  setIsAccountLoading,\n  setAccountLoadingError,\n  setLedgerAccount,\n  setProvider,\n  setWalletLogin,\n  setChainID\n} from 'redux/slices';\nimport { useWalletConnectLogin } from 'services/login/useWalletConnectLogin';\nimport { LoginMethodsEnum } from 'types/enums';\nimport {\n  newWalletProvider,\n  getAddress,\n  getAccount,\n  getLatestNonce,\n  logout\n} from 'utils';\n\nexport default function ProviderInitializer() {\n  const network = useSelector(networkSelector);\n  const walletConnectLogin = useSelector(walletConnectLoginSelector);\n  const loginMethod = useSelector(loginMethodSelector);\n  const walletLogin = useSelector(walletLoginSelector);\n  const { getProvider } = useSelector(extraActionsSelector);\n  const address = useSelector(addressSelector);\n  const ledgerAccount = useSelector(ledgerAccountSelector);\n  const ledgerLogin = useSelector(ledgerLoginSelector);\n  const isLoggedIn = useSelector(isLoggedInSelector);\n\n  const proxy = useSelector(proxySelector);\n  const dispatch = useDispatch();\n\n  const { callbackRoute, logoutRoute } = walletConnectLogin\n    ? walletConnectLogin\n    : { callbackRoute: '', logoutRoute: '' };\n\n  const [initWalletLoginProvider] = useWalletConnectLogin({\n    callbackRoute,\n    logoutRoute\n  });\n\n  useEffect(() => {\n    refreshChainID();\n  }, [network]);\n\n  useEffect(() => {\n    initializeProvider();\n  }, [loginMethod]);\n\n  useEffect(() => {\n    fetchAccount();\n  }, [address, ledgerLogin, isLoggedIn]);\n\n  function refreshChainID() {\n    proxy\n      .getNetworkConfig()\n      .then((networkConfig) => {\n        dispatch(setChainID(networkConfig.ChainID.valueOf()));\n      })\n      .catch((e) => {\n        console.error('To do ', e);\n      });\n  }\n\n  async function fetchAccount() {\n    dispatch(setIsAccountLoading(true));\n    if (address && isLoggedIn) {\n      try {\n        const account = await getAccount(address);\n        dispatch(\n          setAccount({\n            balance: account.balance.toString(),\n            address,\n            nonce: account.nonce.valueOf()\n          })\n        );\n        if (ledgerAccount == null && ledgerLogin != null) {\n          dispatch(\n            setLedgerAccount({\n              index: ledgerLogin.index,\n              address\n            })\n          );\n        }\n      } catch (e) {\n        dispatch(setAccountLoadingError('Failed getting account'));\n        console.error('Failed getting account ', e);\n      }\n    }\n    dispatch(setIsAccountLoading(false));\n  }\n\n  async function tryAuthenticateWalletUser() {\n    try {\n      if (walletLogin != null) {\n        const provider = newWalletProvider(network.walletAddress);\n        const address = await getAddress();\n        if (address) {\n          dispatch(setProvider(provider));\n          dispatch(\n            loginAction({ address, loginMethod: LoginMethodsEnum.wallet })\n          );\n          const account = await getAccount(address);\n          dispatch(\n            setAccount({\n              balance: account.balance.toString(),\n              address,\n              nonce: getLatestNonce(account)\n            })\n          );\n        }\n        dispatch(setWalletLogin(null));\n      }\n    } catch (e) {\n      console.error('Failed authenticating wallet user ', e);\n    }\n  }\n\n  function setLedgerProvider() {\n    const hwWalletP = new HWProvider(proxy);\n    hwWalletP\n      .init()\n      .then((success: any) => {\n        if (!success) {\n          console.warn('Could not initialise ledger app');\n          logout();\n          return;\n        }\n        dispatch(setProvider(hwWalletP));\n      })\n      .catch((err) => {\n        console.error('Could not initialise ledger app', err);\n        logout();\n      });\n  }\n\n  async function setExtensionProvider() {\n    try {\n      const address = await getAddress();\n      const provider = ExtensionProvider.getInstance().setAddress(address);\n      const success = await provider.init();\n\n      if (success) {\n        dispatch(setProvider(provider));\n      } else {\n        console.error(\n          'Could not initialise extension, make sure Elrond wallet extension is installed.'\n        );\n      }\n    } catch (err) {\n      console.error('Unable to login to ExtensionProvider', err);\n    }\n  }\n\n  function initializeProvider() {\n    if (loginMethod == null) {\n      return;\n    }\n    switch (loginMethod) {\n      case LoginMethodsEnum.ledger: {\n        setLedgerProvider();\n        break;\n      }\n\n      case LoginMethodsEnum.walletconnect: {\n        initWalletLoginProvider(false);\n        break;\n      }\n      case LoginMethodsEnum.wallet: {\n        const provider = newWalletProvider(network.walletAddress);\n        dispatch(setProvider(provider));\n        break;\n      }\n\n      case LoginMethodsEnum.extension: {\n        setExtensionProvider();\n        break;\n      }\n\n      case LoginMethodsEnum.extra: {\n        const provider = getProvider();\n        dispatch(setProvider(provider));\n        break;\n      }\n\n      case LoginMethodsEnum.none: {\n        tryAuthenticateWalletUser();\n        break;\n      }\n      default:\n        return;\n    }\n  }\n\n  return null;\n}\n","import React from 'react';\nimport {\n  getTransactionsByHashes,\n  sendSignedTransactions\n} from 'APICalls/transactions';\nimport { OverrideDefaultBehaviourContextValueType } from './types';\n\nconst defaultValue: OverrideDefaultBehaviourContextValueType = {\n  sendSignedTransactionsAsync: sendSignedTransactions,\n  getTransactionsByHash: getTransactionsByHashes,\n  completedTransactionsDelay: 0\n};\n\nconst OverrideDefaultBehaviourContext = React.createContext(defaultValue);\n\nexport default OverrideDefaultBehaviourContext;\n","import React, { useContext, useRef } from 'react';\nimport { Address } from '@elrondnetwork/erdjs';\nimport { Signature } from '@elrondnetwork/erdjs/out/signature';\n\nimport OverrideDefaultBehaviourContext from 'contexts/OverrideDefaultBehaviourContext';\nimport newTransaction from 'models/newTransaction';\nimport { useDispatch, useSelector } from 'redux/DappProviderContext';\nimport { signedTransactionsSelector } from 'redux/selectors';\nimport { accountSelector } from 'redux/selectors';\nimport {\n  setTxSubmittedModal,\n  clearSignTransactions,\n  updateSignedTransactions\n} from 'redux/slices';\nimport {\n  TransactionBatchStatusesEnum,\n  TransactionServerStatusesEnum\n} from 'types/enums';\nimport { setNonce } from 'utils';\n\nconst TransactionSender = () => {\n  const account = useSelector(accountSelector);\n  const signedTransactions = useSelector(signedTransactionsSelector);\n  const { sendSignedTransactionsAsync } = useContext(\n    OverrideDefaultBehaviourContext\n  );\n  const sendingRef = useRef(false);\n\n  const dispatch = useDispatch();\n\n  const clearSignInfo = () => {\n    dispatch(clearSignTransactions());\n    sendingRef.current = false;\n  };\n  async function handleSendTransactions() {\n    const sessionIds = Object.keys(signedTransactions);\n    for (const sessionId of sessionIds) {\n      if (!sessionId) {\n        continue;\n      }\n\n      try {\n        const isSessionIdSigned =\n          signedTransactions[sessionId].status ===\n          TransactionBatchStatusesEnum.signed;\n        const shouldSendCurrentSession =\n          isSessionIdSigned && !sendingRef.current;\n        if (!shouldSendCurrentSession) {\n          continue;\n        }\n        const { transactions } = signedTransactions[sessionId];\n\n        if (!transactions) {\n          continue;\n        }\n        sendingRef.current = true;\n        const transactionsToSend = transactions.map((tx) => {\n          const address = new Address(tx.sender);\n          const transactionObject = newTransaction(tx);\n          const signature = new Signature(tx.signature);\n\n          transactionObject.applySignature(signature, address);\n          return transactionObject;\n        });\n        const responseHashes = await sendSignedTransactionsAsync(\n          transactionsToSend\n        );\n\n        const newStatus = TransactionServerStatusesEnum.pending;\n        const newTransactions = transactions.map((transaction) => {\n          if (responseHashes.includes(transaction.hash)) {\n            return { ...transaction, status: newStatus };\n          }\n\n          return transaction;\n        });\n\n        const submittedModalPayload = {\n          sessionId,\n          submittedMessage: 'submitted'\n        };\n\n        dispatch(setTxSubmittedModal(submittedModalPayload));\n        dispatch(\n          updateSignedTransactions({\n            sessionId,\n            status: TransactionBatchStatusesEnum.sent,\n            transactions: newTransactions\n          })\n        );\n        clearSignInfo();\n        setNonce(account.nonce + transactions.length);\n\n        history.pushState({}, document.title, '?');\n      } catch (error) {\n        console.error('Unable to send transactions', error);\n        dispatch(\n          updateSignedTransactions({\n            sessionId,\n            status: TransactionBatchStatusesEnum.fail,\n            errorMessage: (error as any).message\n          })\n        );\n        clearSignInfo();\n      } finally {\n        sendingRef.current = false;\n      }\n    }\n  }\n\n  React.useEffect(() => {\n    handleSendTransactions();\n  }, [signedTransactions, account]);\n\n  return null;\n};\n\nexport default TransactionSender;\n","import { useContext, useEffect, useRef } from 'react';\nimport OverrideDefaultBehaviourContext from 'contexts/OverrideDefaultBehaviourContext';\nimport { useDispatch } from 'redux/DappProviderContext';\nimport {\n  updateSignedTransactions,\n  updateSignedTransactionStatus\n} from 'redux/slices';\nimport {\n  TransactionBatchStatusesEnum,\n  TransactionServerStatusesEnum\n} from 'types/enums';\nimport { SignedTransactionsBodyType } from 'types/transactions';\nimport {\n  getIsTransactionCompleted,\n  getIsTransactionFailed,\n  getIsTransactionPending\n} from 'utils';\nimport { refreshAccount } from 'utils/account';\nimport { isContract, areScCallsSuccessful } from 'utils/smartContracts';\n\ninterface RetriesType {\n  [hash: string]: number;\n}\n\ninterface TransactionStatusTrackerPropsType {\n  sessionId: string;\n  transactionPayload: SignedTransactionsBodyType;\n}\n\nexport function TransactionStatusTracker({\n  sessionId,\n  transactionPayload: { transactions, status }\n}: TransactionStatusTrackerPropsType) {\n  const dispatch = useDispatch();\n  const intervalRef = useRef<any>(null);\n  const isFetchingStatusRef = useRef(false);\n  const retriesRef = useRef<RetriesType>({});\n  const timeoutRefs = useRef<string[]>([]);\n  const { getTransactionsByHash, completedTransactionsDelay } = useContext(\n    OverrideDefaultBehaviourContext\n  );\n\n  const isPending = sessionId != null && getIsTransactionPending(status);\n  const manageTimedOutTransactions = () => {\n    dispatch(\n      updateSignedTransactions({\n        sessionId,\n        status: TransactionBatchStatusesEnum.timedOut\n      })\n    );\n  };\n\n  const checkTransactionStatus = async () => {\n    try {\n      if (!isPending || transactions == null) {\n        return;\n      }\n      isFetchingStatusRef.current = true;\n\n      const pendingTransactions = transactions.reduce(\n        (\n          acc: { hash: string; previousStatus: string }[],\n          { receiver, data, status, hash }\n        ) => {\n          const isScCall = isContract(receiver, data);\n          if (\n            hash != null &&\n            !timeoutRefs.current.includes(hash) &&\n            getIsTransactionPending(status, isScCall)\n          ) {\n            acc.push({ hash, previousStatus: status });\n          }\n          return acc;\n        },\n        []\n      );\n\n      if (pendingTransactions?.length === 0) {\n        isFetchingStatusRef.current = false;\n        return;\n      }\n      const serverTransactions = await getTransactionsByHash(\n        pendingTransactions\n      );\n      for (const {\n        hash,\n        status,\n        results,\n        invalidTransaction,\n        receiver,\n        data,\n        hasStatusChanged\n      } of serverTransactions) {\n        try {\n          const isScCall = isContract(receiver, data);\n          const retriesForThisHash = retriesRef.current[hash];\n          if (retriesForThisHash > 30) {\n            // consider transaction as stuck after 1 minute\n            manageTimedOutTransactions();\n            return;\n          }\n          if (!invalidTransaction) {\n            if (!getIsTransactionPending(status)) {\n              if (isScCall && !getIsTransactionCompleted(status)) {\n                const isScCallCompleted = areScCallsSuccessful(results);\n                if (isScCallCompleted) {\n                  timeoutRefs.current.push(hash);\n                  setTimeout(\n                    () =>\n                      dispatch(\n                        updateSignedTransactionStatus({\n                          sessionId,\n                          status: TransactionServerStatusesEnum.completed,\n                          transactionHash: hash\n                        })\n                      ),\n                    completedTransactionsDelay\n                  );\n                }\n              }\n\n              if (hasStatusChanged) {\n                dispatch(\n                  updateSignedTransactionStatus({\n                    sessionId,\n                    status,\n                    transactionHash: hash\n                  })\n                );\n              }\n\n              refreshAccount();\n\n              if (getIsTransactionFailed(status)) {\n                const resultWithError = results.find(\n                  (scResult) => scResult?.returnMessage !== ''\n                );\n\n                dispatch(\n                  updateSignedTransactionStatus({\n                    transactionHash: hash,\n                    sessionId,\n                    status: TransactionServerStatusesEnum.fail,\n                    errorMessage: resultWithError?.returnMessage\n                  })\n                );\n                dispatch(\n                  updateSignedTransactions({\n                    sessionId,\n                    status: TransactionBatchStatusesEnum.fail,\n                    errorMessage: resultWithError?.returnMessage\n                  })\n                );\n              }\n            } else {\n              retriesRef.current[hash] = retriesRef.current[hash]\n                ? retriesRef.current[hash] + 1\n                : 1;\n            }\n          } else {\n            retriesRef.current[hash] = retriesRef.current[hash]\n              ? retriesRef.current[hash] + 1\n              : 1;\n          }\n        } catch (error) {\n          console.error(error);\n          manageTimedOutTransactions();\n        }\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    if (isPending) {\n      intervalRef.current = setInterval(() => {\n        checkTransactionStatus();\n      }, 2000);\n    } else {\n      clearInterval(intervalRef.current);\n    }\n    return () => {\n      clearInterval(intervalRef.current);\n    };\n  }, [isPending]);\n  return null;\n}\n\nexport default TransactionStatusTracker;\n","import React from 'react';\nimport { useGetPendingTransactions } from 'services/transactions';\nimport { SignedTransactionsBodyType } from 'types/transactions';\nimport TransactionStatusTracker from './TransactionStatusTracker';\n\nexport function TransactionsTracker() {\n  const { pendingTransactionsArray } = useGetPendingTransactions();\n\n  return (\n    <React.Fragment>\n      {pendingTransactionsArray.map(([sessionId, transactionPayload]) => (\n        <TransactionStatusTracker\n          key={sessionId}\n          sessionId={sessionId}\n          transactionPayload={transactionPayload as SignedTransactionsBodyType}\n        />\n      ))}\n    </React.Fragment>\n  );\n}\n\nexport default TransactionsTracker;\n","import axios from 'axios';\nimport { configEndpoint } from 'constants/network';\n\nexport async function getServerConfiguration(environment: string) {\n  try {\n    const { data } = await axios.get(configEndpoint[environment]);\n    if (data != null) {\n      return data;\n    }\n  } catch (err) {\n    console.error('error fetching configuration for ', environment);\n    return null;\n  }\n}\n","import { useSelector } from 'redux/DappProviderContext';\nimport { networkConfigSelector } from 'redux/selectors';\n\nexport const useGetNetworkConfig = () => {\n  return useSelector(networkConfigSelector);\n};\n\nexport default useGetNetworkConfig;\n","import { useDispatch, useSelector } from 'redux/DappProviderContext';\nimport { notificationModalSelector } from 'redux/selectors';\nimport { clearNotificationModal } from 'redux/slices';\n\nexport function useGetNotification() {\n  const notification = useSelector(notificationModalSelector);\n  const dispatch = useDispatch();\n  const clearNotification = () => dispatch(clearNotificationModal());\n  return { notification, clearNotification };\n}\n","import { useSelector } from 'redux/DappProviderContext';\nimport { transactionDisplayInfoSelector } from 'redux/selectors';\nimport { RootState } from 'redux/store';\n\nexport function useGetTransactionDisplayInfo(toastId: string | null) {\n  return useSelector((state: RootState) =>\n    transactionDisplayInfoSelector(state, toastId)\n  );\n}\n","import React from 'react';\nimport { WalletProvider } from '@elrondnetwork/erdjs';\nimport qs from 'qs';\nimport { dappInitRoute, walletSignSession } from 'constants/index';\nimport { useDispatch, useSelector } from 'redux/DappProviderContext';\nimport { networkSelector } from 'redux/selectors';\nimport { updateSignedTransaction } from 'redux/slices';\nimport { TransactionBatchStatusesEnum } from 'types/enums';\nimport { parseTransactionAfterSigning } from 'utils';\n\nexport function useParseSignedTransactions() {\n  const { search } = window.location;\n  const network = useSelector(networkSelector);\n  const dispatch = useDispatch();\n\n  React.useEffect(() => {\n    if (search != null) {\n      const searchData = qs.parse(search.replace('?', ''));\n\n      if (searchData && walletSignSession in searchData) {\n        const signSessionId: number = (searchData as any)[walletSignSession];\n\n        const signedTransactions = new WalletProvider(\n          `${network.walletAddress}${dappInitRoute}`\n        ).getTransactionsFromWalletUrl();\n        if (signedTransactions.length > 0) {\n          dispatch(\n            updateSignedTransaction({\n              [signSessionId.toString()]: {\n                status: TransactionBatchStatusesEnum.signed,\n                transactions: signedTransactions.map((tx) =>\n                  parseTransactionAfterSigning(tx)\n                )\n              }\n            })\n          );\n        }\n      }\n    }\n  }, [search]);\n}\n\nexport default useParseSignedTransactions;\n","import { useEffect, useRef, useState } from 'react';\nimport {\n  Address,\n  Nonce,\n  Transaction,\n  ExtensionProvider\n} from '@elrondnetwork/erdjs';\nimport { walletSignSession } from 'constants/index';\nimport { useParseSignedTransactions } from 'hooks/transactions/useParseSignedTransactions';\nimport { useDispatch, useSelector } from 'redux/DappProviderContext';\nimport {\n  addressSelector,\n  providerSelector,\n  proxySelector\n} from 'redux/selectors';\nimport { transactionsToSignSelector } from 'redux/selectors';\nimport {\n  clearSignTransactions,\n  clearTransactionsInfoForSessionId,\n  updateSignedTransaction\n} from 'redux/slices';\nimport { LoginMethodsEnum, TransactionBatchStatusesEnum } from 'types/enums';\nimport { getLatestNonce, getProviderType } from 'utils';\nimport { buildReplyUrl } from 'utils';\nimport { parseTransactionAfterSigning } from 'utils';\n\nexport function useSignTransactions() {\n  const provider = useSelector(providerSelector);\n  const proxy = useSelector(proxySelector);\n  const address = useSelector(addressSelector);\n  const transactionsToSign = useSelector(transactionsToSignSelector);\n  const savedCallback = useRef('/');\n  const dispatch = useDispatch();\n  const [error, setError] = useState<string | null>(null);\n\n  useParseSignedTransactions();\n\n  const providerType = getProviderType(provider);\n\n  function clearSignInfo(sessionId?: string) {\n    dispatch(clearSignTransactions());\n    dispatch(clearTransactionsInfoForSessionId(sessionId));\n\n    if (provider instanceof ExtensionProvider) {\n      ExtensionProvider.getInstance()?.cancelAction?.();\n    }\n  }\n\n  function onCancel(e: string, sessionId?: string) {\n    //this is triggered by abort action, so no need to show error again\n    if (e !== 'Transaction cancelled') {\n      setError(e);\n    }\n    clearSignInfo(sessionId);\n  }\n\n  function onAbort(sessionId?: string) {\n    setError(null);\n    clearSignInfo(sessionId);\n  }\n\n  const signTransactions = async () => {\n    if (transactionsToSign) {\n      const { sessionId, transactions, callbackRoute } = transactionsToSign;\n      //the callback will go to undefined if the transaction is cancelled, so we save the most recent one for a valid transaction\n      savedCallback.current = callbackRoute;\n      try {\n        if (provider == null) {\n          console.error(\n            'You need a signer/valid signer to send a transaction, use either WalletProvider, LedgerProvider or WalletConnect'\n          );\n          return;\n        }\n\n        const proxyAccount = await proxy.getAccount(new Address(address));\n        const latestNonce = getLatestNonce(proxyAccount);\n\n        transactions.forEach((tx: Transaction, i: number) => {\n          tx.setNonce(new Nonce(latestNonce + i));\n        });\n\n        switch (providerType) {\n          case LoginMethodsEnum.wallet:\n            const callbackUrl = buildReplyUrl({\n              callbackUrl: `${window.location.origin}${callbackRoute}`,\n              urlParams: { [walletSignSession]: sessionId }\n            });\n\n            dispatch(clearSignTransactions());\n            provider.signTransactions(transactions, {\n              callbackUrl: encodeURIComponent(callbackUrl)\n            });\n\n            break;\n          case LoginMethodsEnum.extension:\n          case LoginMethodsEnum.walletconnect:\n          case LoginMethodsEnum.extra:\n            signTransactionsWithProvider();\n            break;\n        }\n      } catch (err) {\n        const errMessage = 'error when signing';\n        console.error(errMessage, err);\n        onCancel(err?.message || errMessage, sessionId);\n        dispatch(\n          updateSignedTransaction({\n            [sessionId]: {\n              status: TransactionBatchStatusesEnum.cancelled\n            }\n          })\n        );\n      }\n    }\n  };\n\n  async function signTransactionsWithProvider() {\n    try {\n      const {\n        sessionId,\n        transactions,\n        callbackRoute,\n        sessionInformation,\n        redirectAfterSign\n      } = transactionsToSign!;\n      if (transactions?.length) {\n        const initialized = await provider.init();\n        if (!initialized) {\n          return;\n        }\n        try {\n          const signedTransactions: Transaction[] =\n            await provider.signTransactions(transactions);\n\n          const signingDisabled =\n            !signedTransactions ||\n            (signedTransactions &&\n              Object.keys(signedTransactions).length !== transactions?.length);\n          if (!signingDisabled && signedTransactions) {\n            dispatch(\n              updateSignedTransaction({\n                [sessionId]: {\n                  status: TransactionBatchStatusesEnum.signed,\n                  sessionInformation,\n                  transactions: Object.values(signedTransactions).map((tx) =>\n                    parseTransactionAfterSigning(tx)\n                  )\n                }\n              })\n            );\n            if (\n              redirectAfterSign &&\n              !window.location.pathname.includes(callbackRoute)\n            ) {\n              window.location.href = callbackRoute;\n            }\n          }\n        } catch (err) {\n          console.error('error signing transaction', err);\n          onCancel(err.message, sessionId);\n        }\n      }\n    } catch (err) {\n      console.error('error signing transaction', err);\n      onCancel(err.message);\n    }\n  }\n\n  useEffect(() => {\n    if (transactionsToSign?.sessionId) {\n      signTransactions();\n    }\n  }, [transactionsToSign?.sessionId]);\n  const hasTransactions = transactionsToSign?.transactions;\n  return {\n    onAbort,\n    error,\n    hasTransactions,\n    transactions: transactionsToSign?.transactions,\n    sessionId: transactionsToSign?.sessionId,\n    callbackRoute: savedCallback.current\n  };\n}\n\nexport default useSignTransactions;\n","import { useSelector } from 'redux/DappProviderContext';\nimport { signedTransactionsSelector } from 'redux/selectors';\n\nexport function useGetSignedTransactions() {\n  return useSelector(signedTransactionsSelector);\n}\n\nexport default useGetSignedTransactions;\n","let swr: any = {};\ntry {\n  swr = require('swr');\n} catch (err) {}\n\nexport default swr;\n","import useGetNetworkConfig from 'hooks/useGetNetworkConfig';\n\nimport useSwr from 'optionalPackages/swr';\n\ninterface TokenOptionType {\n  tokenLabel: string;\n  tokenDenomination: number;\n  tokenAvatar: string;\n  error?: string;\n}\n\ninterface TokenInfoResponse {\n  identifier: string;\n  name: string;\n  ticker: string;\n  decimals: number;\n  assets: {\n    description: string;\n    status: string;\n    svgUrl: string;\n  };\n}\n\nconst fetcher = (url: string) => fetch(url).then((res) => res.json());\n\nexport function useGetTokenDetails({\n  tokenId\n}: {\n  tokenId: string;\n}): TokenOptionType {\n  const { network } = useGetNetworkConfig();\n  if (!tokenId) {\n    return {\n      tokenDenomination: Number(network.egldDenomination),\n      tokenLabel: '',\n      tokenAvatar: ''\n    };\n  }\n  const {\n    data: selectedToken,\n    error\n  }: { data?: TokenInfoResponse; error?: string } = useSwr(\n    `${network.apiAddress}/tokens/${tokenId}`,\n    fetcher\n  );\n\n  const tokenDenomination = selectedToken\n    ? selectedToken?.decimals\n    : Number(network.egldDenomination);\n  const tokenLabel = selectedToken ? selectedToken?.name : '';\n  const tokenAvatar = selectedToken ? `${selectedToken?.assets?.svgUrl}` : '';\n\n  return { tokenDenomination, tokenLabel, tokenAvatar, error };\n}\n\nexport default useGetTokenDetails;\n","import { useEffect, useState } from 'react';\nimport { Transaction } from '@elrondnetwork/erdjs';\nimport { useDispatch, useSelector } from 'redux/DappProviderContext';\nimport {\n  egldLabelSelector,\n  providerSelector,\n  transactionsToSignSelector\n} from 'redux/selectors';\nimport {\n  clearSignTransactions,\n  setSignTransactionsError,\n  updateSignedTransaction\n} from 'redux/slices/transactionsSlice';\nimport { useParseMultiEsdtTransferData } from 'services/transactions/hooks/useParseMultiEsdtTransferData';\nimport { ActiveLedgerTransactionType, MultiSignTxType } from 'types';\nimport { TransactionBatchStatusesEnum } from 'types/enums';\nimport { isTokenTransfer } from 'utils';\nimport { parseTransactionAfterSigning } from 'utils';\n\ninterface UseSignTransactionsWithLedgerPropsType {\n  onCancel: () => void;\n}\n\ntype LedgerSignedTransactions = Record<number, Transaction>;\n\ninterface UseSignTransactionsWithLedgerReturnType {\n  allTransactions: MultiSignTxType[];\n  onSignTransaction: () => void;\n  onNext: () => void;\n  onPrev: () => void;\n  onAbort: () => void;\n  waitingForDevice: boolean;\n  isLastTransaction: boolean;\n  currentStep: number;\n  callbackRoute?: string;\n  signedTransactions?: LedgerSignedTransactions;\n  currentTransaction: ActiveLedgerTransactionType | null;\n}\n\nexport function useSignTransactionsWithLedger({\n  onCancel\n}: UseSignTransactionsWithLedgerPropsType): UseSignTransactionsWithLedgerReturnType {\n  const transactionsToSign = useSelector(transactionsToSignSelector);\n\n  const { sessionId, transactions, callbackRoute, redirectAfterSign } =\n    transactionsToSign || {};\n  const [currentStep, setCurrentStep] = useState(0);\n  const [signedTransactions, setSignedTransactions] =\n    useState<LedgerSignedTransactions>();\n  const { getTxInfoByDataField, allTransactions } =\n    useParseMultiEsdtTransferData({ transactions });\n  const [currentTransaction, setCurrentTransaction] =\n    useState<ActiveLedgerTransactionType | null>(null);\n  const provider = useSelector(providerSelector);\n  const egldLabel = useSelector(egldLabelSelector);\n  const [waitingForDevice, setWaitingForDevice] = useState(false);\n  const dispatch = useDispatch();\n\n  const isLastTransaction = currentStep === allTransactions.length - 1;\n\n  useEffect(() => {\n    extractTransactionsInfo();\n  }, [currentStep, allTransactions]);\n\n  function extractTransactionsInfo() {\n    const tx = allTransactions[currentStep];\n    if (tx == null) {\n      return;\n    }\n    const { transaction, multiTxData } = tx;\n    const dataField = transaction.getData().toString();\n    const transactionTokenInfo = getTxInfoByDataField(\n      transaction.getData().toString(),\n      multiTxData\n    );\n    const { tokenId } = transactionTokenInfo;\n\n    const isTokenTransaction = Boolean(\n      tokenId && isTokenTransfer({ tokenId, erdLabel: egldLabel })\n    );\n\n    setCurrentTransaction({\n      transaction,\n      transactionTokenInfo,\n      isTokenTransaction,\n      dataField\n    });\n  }\n\n  function reset() {\n    setCurrentStep(0);\n    setSignedTransactions(undefined);\n    setWaitingForDevice(false);\n  }\n\n  async function sign() {\n    try {\n      if (currentTransaction == null || sessionId == null) {\n        return;\n      }\n      setWaitingForDevice(true);\n      const signedTx = await provider.signTransaction(\n        currentTransaction.transaction\n      );\n      const newSignedTx = { [currentStep]: signedTx };\n      const newSignedTransactions: any = signedTransactions\n        ? { ...signedTransactions, ...newSignedTx }\n        : newSignedTx;\n      setSignedTransactions(newSignedTransactions);\n      if (!isLastTransaction) {\n        setCurrentStep((exising) => exising + 1);\n      } else if (newSignedTransactions) {\n        dispatch(clearSignTransactions());\n        dispatch(\n          updateSignedTransaction({\n            [sessionId]: {\n              status: TransactionBatchStatusesEnum.signed,\n              transactions: Object.values(newSignedTransactions).map((tx) =>\n                parseTransactionAfterSigning(tx as Transaction, true)\n              )\n            }\n          })\n        );\n        reset();\n        if (\n          callbackRoute != null &&\n          redirectAfterSign &&\n          !window.location.pathname.includes(callbackRoute)\n        ) {\n          window.location.href = callbackRoute;\n        }\n      }\n    } catch (err) {\n      console.error(err, 'sign error');\n      reset();\n      dispatch(setSignTransactionsError(err.message));\n    }\n  }\n\n  function signTx() {\n    try {\n      if (currentTransaction == null) {\n        return;\n      }\n      const signature = currentTransaction.transaction.getSignature();\n      if (signature) {\n        if (!isLastTransaction) {\n          setCurrentStep((exising) => exising + 1);\n        }\n      } else {\n        // currently code doesn't reach here because getSignature throws error if none is found\n        sign();\n      }\n    } catch {\n      // the only way to check if tx has signature is with try catch\n      sign();\n    }\n  }\n\n  function onAbort() {\n    if (isFirst) {\n      dispatch(clearSignTransactions());\n      if (callbackRoute != null && redirectAfterSign) {\n        window.location.href = callbackRoute;\n      }\n    } else {\n      setCurrentStep((existing) => existing - 1);\n    }\n  }\n\n  const continueWithoutSigning =\n    currentTransaction?.transactionTokenInfo?.type &&\n    currentTransaction?.transactionTokenInfo?.multiTxData &&\n    !currentTransaction?.dataField.endsWith(\n      currentTransaction?.transactionTokenInfo?.multiTxData\n    );\n\n  function onSignTransaction() {\n    if (continueWithoutSigning) {\n      setCurrentStep((exising) => exising + 1);\n    } else {\n      signTx();\n    }\n  }\n\n  function onNext() {\n    setCurrentStep((current) => {\n      const nextStep = current + 1;\n      if (nextStep > allTransactions?.length) {\n        return current;\n      }\n      return nextStep;\n    });\n  }\n\n  function onPrev() {\n    if (currentStep === 0) {\n      onCancel();\n    }\n    setCurrentStep((current) => {\n      const nextStep = current - 1;\n      if (nextStep < 0) {\n        return current;\n      }\n      return nextStep;\n    });\n  }\n\n  const isFirst = currentStep === 0;\n\n  return {\n    allTransactions,\n    onSignTransaction,\n    onNext,\n    onPrev,\n    waitingForDevice,\n    onAbort,\n    isLastTransaction,\n    callbackRoute,\n    currentStep,\n    signedTransactions,\n    currentTransaction\n  };\n}\n\nexport default useSignTransactionsWithLedger;\n","import { useSelector } from 'redux/DappProviderContext';\nimport { signTransactionsErrorSelector } from 'redux/selectors';\n\nexport const useGetSignTransactionsError = () => {\n  return useSelector(signTransactionsErrorSelector);\n};\n\nexport default useGetSignTransactionsError;\n","import { useSelector } from 'redux/DappProviderContext';\nimport { accountInfoSelector } from 'redux/selectors';\n\nexport const useGetAccountInfo = () => {\n  return useSelector(accountInfoSelector);\n};\n\nexport default useGetAccountInfo;\n","import { useSelector } from 'redux/DappProviderContext';\nimport { isLoggedInSelector, loginInfoSelector } from 'redux/selectors';\n\nexport const useGetLoginInfo = () => {\n  const loginInfo = useSelector(loginInfoSelector);\n  const isLoggedIn = useSelector(isLoggedInSelector);\n  return { ...loginInfo, isLoggedIn };\n};\n\nexport default useGetLoginInfo;\n","import { useSelector } from 'redux/DappProviderContext';\nimport { providerSelector } from 'redux/selectors';\nimport { getProviderType } from 'utils';\n\nexport const useGetAccountProvider = () => {\n  const provider = useSelector(providerSelector);\n  const providerType = getProviderType(provider);\n  return { provider, providerType };\n};\n\nexport default useGetAccountProvider;\n","import axios from 'axios';\nimport {\n  addressSelector,\n  networkSelector,\n  shardSelector\n} from 'redux/selectors';\n\nimport { setAccountShard } from 'redux/slices';\nimport { store } from 'redux/store';\n\nexport default async function getAccountShard() {\n  const appState = store.getState();\n  const network = networkSelector(appState);\n  const address = addressSelector(appState);\n  const shard = shardSelector(appState);\n\n  try {\n    if (shard == null && address) {\n      const { data: account } = await axios.get(\n        `${network.apiAddress}/accounts/${address}`\n      );\n      store.dispatch(setAccountShard(account.shard));\n      return account.shard;\n    } else {\n      return shard;\n    }\n  } catch (err) {\n    console.error(err);\n    return null;\n  }\n}\n","import { useEffect, useState } from 'react';\nimport { Address } from '@elrondnetwork/erdjs/out';\nimport { getServerConfiguration } from 'APICalls/configuration/getServerConfiguration';\nimport { fallbackConfigurations } from 'constants/network';\nimport { useGetAccountInfo } from 'hooks';\nimport { loginAction } from 'redux/commonActions';\nimport { useDispatch } from 'redux/DappProviderContext';\nimport { initializeExtraActions } from 'redux/slices/extraActionsSlice';\nimport { initializeNetworkConfig } from 'redux/slices/networkConfigSlice';\nimport { CustomNetworkType, EnvironmentsEnum, ExtraActionsType } from 'types';\nimport { logout } from 'utils';\nimport getAccountShard from 'utils/account/getAccountShard';\n\ninterface AppInitializerPropsType {\n  customNetworkConfig?: CustomNetworkType;\n  children: any;\n  environment: EnvironmentsEnum;\n  extraActions?: ExtraActionsType;\n}\n\nexport function AppInitializer({\n  customNetworkConfig = {},\n  children,\n  environment,\n  extraActions\n}: AppInitializerPropsType) {\n  const [initialized, setInitialized] = useState(false);\n  const account = useGetAccountInfo();\n  const { address, publicKey } = account;\n  const dispatch = useDispatch();\n\n  async function initializeNetwork() {\n    const fallbackConfig = fallbackConfigurations[environment];\n    if (fallbackConfig != null) {\n      dispatch(\n        initializeNetworkConfig({ ...fallbackConfig, ...customNetworkConfig })\n      );\n    }\n    const serverConfig = await getServerConfiguration(environment);\n    if (serverConfig != null) {\n      dispatch(\n        initializeNetworkConfig({ ...serverConfig, ...customNetworkConfig })\n      );\n    }\n  }\n\n  function initializeCustomExtraActions() {\n    if (extraActions != null) {\n      try {\n        extraActions?.init({\n          onLogin: (address, loginMethod) => {\n            dispatch(loginAction({ address, loginMethod }));\n          },\n          log: (word) => {\n            console.log('dapp log: ', word);\n          }\n        });\n        dispatch(initializeExtraActions(extraActions));\n      } catch (err) {\n        console.error('Unable to initalize extraActions', err);\n      }\n    }\n  }\n\n  async function initializeApp() {\n    initializeCustomExtraActions();\n    await initializeNetwork();\n    setInitialized(true);\n\n    //sync redux with shardId from server\n    getAccountShard();\n  }\n\n  useEffect(() => {\n    if (address) {\n      const pubKey = new Address(address).hex();\n      if (pubKey !== publicKey) {\n        logout();\n      }\n    }\n  }, [address, publicKey]);\n\n  useEffect(() => {\n    initializeApp();\n  }, [customNetworkConfig, environment]);\n\n  return initialized ? children : null;\n}\n\nexport default AppInitializer;\n","import React, { useCallback } from 'react';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nimport {\n  getTransactionsByHashes,\n  sendSignedTransactions\n} from 'APICalls/transactions';\nimport ProviderInitializer from 'components/ProviderInitializer';\nimport TransactionSender from 'components/TransactionSender';\nimport TransactionsTracker from 'components/TransactionsTracker';\nimport OverrideDefaultBehaviourContext from 'contexts/OverrideDefaultBehaviourContext';\nimport {\n  GetTransactionsByHashesType,\n  SendSignedTransactionsAsyncType\n} from 'contexts/types';\nimport { DappCoreContext } from 'redux/DappProviderContext';\nimport { CustomNetworkType, EnvironmentsEnum, ExtraActionsType } from 'types';\nimport AppInitializer from 'wrappers/AppInitializer';\n\nimport { store, persistor } from './store';\n\ninterface DappProviderPropsType {\n  children: React.ReactChildren | React.ReactElement;\n  customNetworkConfig?: CustomNetworkType;\n  extraActions?: ExtraActionsType;\n  completedTransactionsDelay?: number;\n  signWithoutSending?: boolean;\n  environment: 'testnet' | 'mainnet' | 'devnet';\n  sendSignedTransactionsAsync?: SendSignedTransactionsAsyncType;\n  getTransactionsByHash?: GetTransactionsByHashesType;\n}\n\nexport const DappProvider = ({\n  children,\n  customNetworkConfig = {},\n  extraActions,\n  completedTransactionsDelay = 0,\n  signWithoutSending = false,\n  environment,\n  sendSignedTransactionsAsync = sendSignedTransactions,\n  getTransactionsByHash = getTransactionsByHashes\n}: DappProviderPropsType) => {\n  const memoizedSendSignedTransactionsAsync = useCallback(\n    sendSignedTransactionsAsync,\n    []\n  );\n\n  const memoizedGetTransactionsByHash = useCallback(getTransactionsByHash, []);\n  return (\n    <Provider context={DappCoreContext} store={store}>\n      <PersistGate persistor={persistor} loading={null}>\n        <OverrideDefaultBehaviourContext.Provider\n          value={{\n            sendSignedTransactionsAsync: memoizedSendSignedTransactionsAsync,\n            getTransactionsByHash: memoizedGetTransactionsByHash,\n            completedTransactionsDelay\n          }}\n        >\n          <AppInitializer\n            environment={environment as EnvironmentsEnum}\n            customNetworkConfig={customNetworkConfig}\n            extraActions={extraActions}\n          >\n            <ProviderInitializer />\n            {!signWithoutSending && <TransactionSender />}\n            <TransactionsTracker />\n            {children}\n          </AppInitializer>\n        </OverrideDefaultBehaviourContext.Provider>\n      </PersistGate>\n    </Provider>\n  );\n};\n","import React, { useRef } from 'react';\nimport { useSelector } from 'redux/DappProviderContext';\nimport {\n  isAccountLoadingSelector,\n  isLoggedInSelector,\n  walletLoginSelector\n} from 'redux/selectors';\n\nimport { RouteType } from 'types';\n\nconst AuthenticatedRoutesWrapper = ({\n  children,\n  routes,\n  unlockRoute,\n  onRedirect\n}: {\n  children: React.ReactNode;\n  routes: RouteType[];\n  unlockRoute: string;\n  onRedirect?: (unlockRoute?: string) => void;\n}) => {\n  const isLoggedIn = useSelector(isLoggedInSelector);\n\n  const isAccountLoading = useSelector(isAccountLoadingSelector);\n\n  const walletLogin = useSelector(walletLoginSelector);\n  const { pathname } = window.location;\n\n  const authenticatedRoutesRef = useRef(\n    routes.filter((route) => Boolean(route.authenticatedRoute))\n  );\n\n  const isOnAuthenticatedRoute = authenticatedRoutesRef.current.some(\n    ({ path }) => pathname === path\n  );\n\n  const shouldRedirect =\n    isOnAuthenticatedRoute && !isLoggedIn && walletLogin == null;\n\n  if (isAccountLoading || walletLogin) {\n    return null;\n  }\n\n  if (shouldRedirect) {\n    if (onRedirect) {\n      onRedirect(unlockRoute);\n    } else {\n      window.location.href = unlockRoute;\n    }\n    return null;\n  }\n\n  return <React.Fragment>{children}</React.Fragment>;\n};\n\nexport default AuthenticatedRoutesWrapper;\n","import { Address } from '@elrondnetwork/erdjs';\n\nexport class TransactionParameter {\n  sender: Address;\n  receiver: Address;\n  functionName: string;\n  inputParameters: string[];\n  outputParameters: string[];\n\n  constructor(\n    sender: Address,\n    receiver: Address,\n    functionName: string,\n    inputParameters: string[],\n    outputParameters: string[]\n  ) {\n    this.sender = sender;\n    this.receiver = receiver;\n    this.functionName = functionName;\n    this.inputParameters = inputParameters;\n    this.outputParameters = outputParameters;\n  }\n}\n","import React from 'react';\nimport { wrapperClassName } from 'utils';\n\nexport const withClassNameWrapper =\n  (Component: any) =>\n  ({ ...props }) =>\n    (\n      <span className={wrapperClassName}>\n        <Component {...props} />\n      </span>\n    );\n","import React from 'react';\nimport { validation } from '@elrondnetwork/dapp-utils';\nimport {\n  denomination as configDenomination,\n  decimals as configDecimals\n} from 'constants/index';\nimport { denominate, getEgldLabel } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\n\nexport interface DenominateType {\n  value: string;\n  showLastNonZeroDecimal?: boolean;\n  showLabel?: boolean;\n  token?: string;\n  decimals?: number;\n  denomination?: number;\n  'data-testid'?: string;\n}\n\nconst denominateInvalid = (props: DenominateType) => {\n  return (\n    <span\n      data-testid={\n        props['data-testid'] ? props['data-testid'] : 'denominateComponent'\n      }\n    >\n      <span className='int-amount'>...</span>\n    </span>\n  );\n};\n\nconst denominateValid = (props: DenominateType, erdLabel: string) => {\n  const { value, showLastNonZeroDecimal = false, showLabel = true } = props;\n  const decimals =\n    props.decimals !== undefined ? props.decimals : configDecimals;\n  const denomination =\n    props.denomination !== undefined ? props.denomination : configDenomination;\n\n  const denominatedValue = denominate({\n    input: value,\n    denomination,\n    decimals,\n    showLastNonZeroDecimal,\n    addCommas: true\n  });\n\n  const valueParts = denominatedValue.split('.');\n  const hasNoDecimals = valueParts.length === 1;\n  const isNotZero = denominatedValue !== '0';\n\n  if (decimals > 0 && hasNoDecimals && isNotZero) {\n    let zeros = '';\n\n    for (let i = 1; i <= decimals; i++) {\n      zeros = zeros + '0';\n    }\n\n    valueParts.push(zeros);\n  }\n\n  return (\n    <span\n      data-testid={\n        props['data-testid'] ? props['data-testid'] : 'denominateComponent'\n      }\n    >\n      <span className='int-amount'>{valueParts[0]}</span>\n      {valueParts.length > 1 && (\n        <span className='decimals'>.{valueParts[1]}</span>\n      )}\n      {showLabel && (\n        <span className={`symbol ${props.token ? 'text-muted' : ''}`}>\n          &nbsp;{props.token ? props.token : erdLabel}\n        </span>\n      )}\n    </span>\n  );\n};\n\nconst Denominate = (props: DenominateType & { egldLabel?: string }) => {\n  const { value } = props;\n\n  return !validation.stringIsInteger(value)\n    ? denominateInvalid(props)\n    : denominateValid(props, props.egldLabel || '');\n};\n\nconst DenominateWrapper = (props: DenominateType) => {\n  const egldLabel = getEgldLabel();\n  const denominateProps = { ...props, egldLabel };\n  return <Denominate {...denominateProps} />;\n};\n\nexport default withClassNameWrapper(DenominateWrapper);\n","let fontawesomeFreeSolidIcons: any = {};\ntry {\n  fontawesomeFreeSolidIcons = require('@fortawesome/free-solid-svg-icons');\n} catch (err) {}\n\nexport default fontawesomeFreeSolidIcons;\n","let ReactFontawesome: any = {};\ntry {\n  ReactFontawesome = require('@fortawesome/react-fontawesome');\n} catch (err) {}\n\nexport default ReactFontawesome;\n","import React from 'react';\nimport { useGetNetworkConfig } from 'hooks';\n\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\n\nconst ExplorerLink = ({\n  page,\n  text,\n  className\n}: {\n  page: string;\n  text?: any;\n  className?: string;\n}) => {\n  const {\n    network: { explorerAddress }\n  } = useGetNetworkConfig();\n  return (\n    <a\n      href={`${explorerAddress}${page}`}\n      {...{\n        target: '_blank'\n      }}\n      className={`link-style ${className}`}\n    >\n      {text ? (\n        <React.Fragment>{text}</React.Fragment>\n      ) : (\n        <ReactFontawesome.FontAwesomeIcon\n          icon={icons.faSearch}\n          className='text-secondary'\n        />\n      )}\n    </a>\n  );\n};\n\nexport default withClassNameWrapper(ExplorerLink);\n","import React from 'react';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport { useExtensionLogin } from 'services';\nimport { getGeneratedClasses } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport { ExtensionLoginButtonPropsType } from './types';\n\nconst ExtensionLoginButton: (\n  props: ExtensionLoginButtonPropsType\n) => JSX.Element = ({\n  token,\n  className = 'extension-login',\n  children,\n  callbackRoute,\n  buttonClassName,\n  loginButtonText = 'Maiar DeFi Wallet',\n  redirectAfterLogin = false,\n  shouldRenderDefaultCss = true\n}) => {\n  const [onInitiateLogin] = useExtensionLogin({\n    callbackRoute,\n    token,\n    redirectAfterLogin\n  });\n  const classes = getGeneratedClasses(className, shouldRenderDefaultCss, {\n    wrapper: `btn btn-primary px-sm-4 m-1 mx-sm-3 ${\n      buttonClassName != null ? buttonClassName : ''\n    }`,\n    loginText: 'text-left',\n    noExtensionButtonWrapper: 'btn btn-unlock d-inline-block',\n    noExtensionButtonContent:\n      'd-flex justify-content-between align-items-center',\n    noExtensionButtonTitle: 'title',\n    noExtensionButtonIcon: ''\n  });\n\n  const handleLogin = () => {\n    onInitiateLogin();\n  };\n\n  return !window.elrondWallet ? (\n    <a\n      rel='noreferrer'\n      href='https://chrome.google.com/webstore/detail/dngmlblcodfobpdpecaadgfbcggfjfnm?authuser=0&hl=en'\n      target='_blank'\n      className={classes.noExtensionButtonWrapper}\n    >\n      <div className={classes.noExtensionButtonContent}>\n        <div className={classes.noExtensionButtonTitle}>Maiar DeFi Wallet</div>\n        <ReactFontawesome.FontAwesomeIcon\n          className={classes.noExtensionButtonIcon}\n          icon={ReactFontawesome.faArrowRight}\n        />\n      </div>\n    </a>\n  ) : (\n    <button onClick={handleLogin} className={classes.wrapper}>\n      {children || <span className={classes.loginText}>{loginButtonText}</span>}\n    </button>\n  );\n};\n\nexport default withClassNameWrapper(ExtensionLoginButton);\n","let ReactBootstrap: any = {};\ntry {\n  ReactBootstrap = require('react-bootstrap');\n} catch (err) {}\n\nexport default ReactBootstrap;\n","import React from 'react';\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactBootstrap from 'optionalPackages/react-bootstrap';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport { wrapperClassName } from 'utils';\n\nconst ModalContainer = ({\n  children,\n  noSpacer,\n  className,\n  title,\n  onClose\n}: {\n  children: React.ReactNode;\n  noSpacer?: boolean;\n  className?: string;\n  title: React.ReactNode;\n  onClose?: () => void;\n}) => {\n  return (\n    <ReactBootstrap.Modal\n      show\n      backdrop='static'\n      onHide={onClose}\n      className={`modal-container ${\n        className ? className : ''\n      } ${wrapperClassName}`}\n      animation={false}\n      centered\n    >\n      <div className='modal-card card w-100'>\n        <div className='card-title h5 mb-0'>\n          <div className='d-flex justify-content-between align-items-center pt-spacer px-spacer mb-0'>\n            <div className={'px-3'}>{title}</div>\n            <button\n              type='button'\n              className='btn btn-light px-3 py-2'\n              onClick={onClose}\n            >\n              <ReactFontawesome.FontAwesomeIcon\n                size='lg'\n                icon={icons.faTimes}\n              />\n            </button>\n          </div>\n        </div>\n\n        <div\n          className={`modal-card-body text-center ${\n            noSpacer ? 'p-0' : 'p-spacer'\n          }`}\n        >\n          {children}\n        </div>\n      </div>\n    </ReactBootstrap.Modal>\n  );\n};\n\nexport default ModalContainer;\n","/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString === Object.prototype.toString) {\n\t\t\t\t\tfor (var key in arg) {\n\t\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","import React from 'react';\nimport classNames from 'classnames';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport { getGeneratedClasses } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport { PageStateProps } from './types';\n\nexport const PageState = ({\n  icon,\n  title,\n  action,\n  iconClass,\n  dataTestId,\n  description,\n  iconBgClass,\n  iconSize = '5x',\n  className = 'page-state',\n  shouldRenderDefaultCss = true\n}: PageStateProps) => {\n  const generatedClasses = getGeneratedClasses(\n    className,\n    shouldRenderDefaultCss,\n    {\n      wrapper: 'state m-auto p-4 text-center',\n      iconContainer: classNames('icon-state mx-auto', {\n        [`${iconBgClass}`]: Boolean(iconBgClass)\n      }),\n      iconClass: classNames(iconClass != null && iconClass),\n      title: 'h4 my-4',\n      description: 'mb-3'\n    }\n  );\n\n  return (\n    <div className={generatedClasses.wrapper} data-testid={dataTestId}>\n      {icon && (\n        <span className={generatedClasses.iconContainer}>\n          <ReactFontawesome.FontAwesomeIcon\n            icon={icon}\n            className={generatedClasses.iconClass}\n            size={iconSize}\n          />\n        </span>\n      )}\n      {title && <p className={generatedClasses.title}>{title}</p>}\n      {description && (\n        <div className={generatedClasses.description}>{description}</div>\n      )}\n      {action && <React.Fragment>{action}</React.Fragment>}\n    </div>\n  );\n};\n\nexport default withClassNameWrapper(PageState);\n","import React from 'react';\n\nimport Denominate from 'UI/Denominate';\nimport { getAccountBalance } from 'utils';\n\ninterface AddressRowType {\n  selectedAddress?: string;\n  index: number;\n  address: string;\n  onSelectAddress: (address: { address: string; index: number } | null) => void;\n}\n\n// TODO: why not use Trim component?\nconst trimHash = (hash: string, keep = 10) => {\n  const start = hash.substring(0, keep);\n  const end = hash.substring(hash.length - keep);\n  return `${start}...${end}`;\n};\n\nconst noBalance = '...';\n\nconst AddressRow = ({\n  address,\n  index,\n  selectedAddress,\n  onSelectAddress\n}: AddressRowType) => {\n  const [balance, setBalance] = React.useState(noBalance);\n\n  const handleChange = (e: React.SyntheticEvent) => {\n    const { checked } = e.target as HTMLInputElement;\n    if (checked) {\n      onSelectAddress({ address, index });\n    }\n  };\n\n  const fetchBalance = async () => {\n    try {\n      const balance = await getAccountBalance(address);\n      setBalance(balance);\n    } catch (err) {\n      console.error('error fetching balance', balance);\n    }\n  };\n\n  React.useEffect(() => {\n    fetchBalance();\n  }, []);\n\n  return (\n    <tr>\n      <td className='text-left'>\n        <div className='d-flex align-items-start text-left form-check'>\n          <input\n            type='radio'\n            id={`check_${index}`}\n            data-testid={`check_${index}`}\n            onChange={handleChange}\n            role='button'\n            checked={selectedAddress === address}\n            className='form-check-input mr-1'\n          />\n          <label\n            htmlFor={`check_${index}`}\n            role='button'\n            data-testid={`label_${index}`}\n            className='form-check-label text-nowrap trim-size-xl m-0'\n          >\n            <div className='d-flex align-items-center text-nowrap trim'>\n              <span>{trimHash(address)}</span>\n            </div>\n          </label>\n        </div>\n      </td>\n      <td className='text-left'>\n        <Denominate value={balance} />\n      </td>\n      <td className='text-left'>{index}</td>\n    </tr>\n  );\n};\n\nexport default AddressRow;\n","import React from 'react';\n\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport PageState from 'UI/PageState';\nimport { getGeneratedClasses } from 'utils';\n\nimport AddressRow from './AddressRow';\n\nconst ledgerWaitingText = 'Waiting for device';\n\nconst addressesPerPage = 10;\n\ninterface AddressTablePropsType {\n  loading: boolean;\n  accounts: string[];\n  startIndex: number;\n  selectedAddress?: string;\n  className: string;\n  shouldRenderDefaultCss: boolean;\n  onSelectAddress: (address: { address: string; index: number } | null) => void;\n  onGoToPrevPage: () => void;\n  onGoToNextPage: () => void;\n  onConfirmSelectedAddress: () => void;\n}\n\nconst AddressTable = ({\n  loading,\n  accounts,\n  startIndex,\n  selectedAddress,\n  onGoToPrevPage,\n  onGoToNextPage,\n  onConfirmSelectedAddress,\n  onSelectAddress,\n  shouldRenderDefaultCss = true,\n  className = 'ledger-address-table'\n}: AddressTablePropsType) => {\n  const classes = getGeneratedClasses(className, shouldRenderDefaultCss, {\n    wrapper: 'card my-4 text-center',\n    cardBody: 'card-body p-4 mx-lg-4',\n    tableWrapper: 'table-responsive',\n    tableContent: 'table m-0 border-bottom',\n    tableHeader: 'py-2 text-semibold border-bottom',\n    tableHeaderText: 'text-left border-0',\n    buttonsWrapper: 'd-flex justify-content-center pager mt-2',\n    arrowButton: 'btn btn-link mx-2',\n    confirmButton: 'btn btn-primary px-4 mt-4'\n  });\n  switch (true) {\n    case loading:\n      return (\n        <PageState\n          className={className}\n          icon={icons.faCircleNotch}\n          iconClass='fa-spin text-primary'\n          title={ledgerWaitingText}\n        />\n      );\n    default:\n      return (\n        <React.Fragment>\n          <div className='m-auto'>\n            <div className={classes.wrapper}>\n              <div className={classes.cardBody}>\n                <div\n                  className={classes.tableWrapper}\n                  data-testid='ledgerAddresses'\n                >\n                  <table className={classes.tableContent}>\n                    <thead className={classes.tableHeader}>\n                      <tr>\n                        <th className={classes.tableHeaderText}>Address</th>\n                        <th className={classes.tableHeaderText}>Balance</th>\n                        <th className={classes.tableHeaderText}>#</th>\n                      </tr>\n                    </thead>\n                    <tbody data-testid='addressesTable'>\n                      {accounts.map((address, index) => {\n                        const key = index + startIndex * addressesPerPage;\n                        return (\n                          <AddressRow\n                            key={key}\n                            address={address}\n                            index={key}\n                            selectedAddress={selectedAddress}\n                            onSelectAddress={onSelectAddress}\n                          />\n                        );\n                      })}\n                    </tbody>\n                  </table>\n                </div>\n                <div className={classes.buttonsWrapper}>\n                  <button\n                    type='button'\n                    className={classes.arrowButton}\n                    onClick={onGoToPrevPage}\n                    data-testid='prevBtn'\n                    disabled={startIndex === 0}\n                  >\n                    <ReactFontawesome.FontAwesomeIcon\n                      size='sm'\n                      icon={icons.faChevronLeft}\n                    />{' '}\n                    Prev\n                  </button>\n                  <button\n                    type='button'\n                    className={classes.arrowButton}\n                    onClick={onGoToNextPage}\n                    data-testid='nextBtn'\n                  >\n                    Next{' '}\n                    <ReactFontawesome.FontAwesomeIcon\n                      size='sm'\n                      icon={icons.faChevronRight}\n                    />\n                  </button>\n                </div>\n                <button\n                  className={classes.confirmButton}\n                  disabled={selectedAddress === ''}\n                  onClick={onConfirmSelectedAddress}\n                  data-testid='confirmBtn'\n                >\n                  Confirm\n                </button>\n              </div>\n            </div>\n          </div>\n        </React.Fragment>\n      );\n  }\n};\n\nexport default AddressTable;\n","import React from 'react';\nimport { useGetAccountInfo } from 'hooks';\n\nconst ConfirmAddress = ({\n  token,\n  noBorder\n}: {\n  token?: string;\n  noBorder?: boolean;\n}) => {\n  const { ledgerAccount } = useGetAccountInfo();\n  return (\n    <div className='m-auto'>\n      <div className={`card my-4 text-center ${noBorder ? 'border-0' : ''}`}>\n        <div className='card-body p-4 mx-lg-4'>\n          <h4 className='mb-4'>Confirm Ledger Address</h4>\n          <p>For security, please confirm that your address: </p>\n          <p className='lead border rounded p-2'>\n            {ledgerAccount ? ledgerAccount.address : ''}\n          </p>\n          {token && (\n            <React.Fragment>\n              <p>and Auth Token</p>\n              <p className='lead border rounded p-2'>{`${token}{}`}</p>\n            </React.Fragment>\n          )}\n          <p className='m-0'>\n            {token\n              ? 'are the one shown on your Ledger device screen now.'\n              : 'is the one shown on your Ledger device screen now.'}\n          </p>\n\n          <p>Select Approve on your device to confirm.</p>\n          <p>\n            Or, if it does not match, close this page and{' '}\n            <a\n              href='https://help.elrond.com/en/'\n              {...{\n                target: '_blank'\n              }}\n            >\n              contact support\n            </a>\n            .\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ConfirmAddress;\n","import React from 'react';\nimport { ReactComponent as LedgerLogo } from '../assets/ledger-nano.svg';\n\nconst LedgerConnect = ({\n  onClick,\n  error,\n  connectPageContent\n}: {\n  onClick: () => void;\n  error: string;\n  connectPageContent?: React.ReactNode;\n}) => {\n  return (\n    <div className='m-auto login-container'>\n      <div className='card my-4 text-center'>\n        <div className='card-body p-4 mx-lg-4'>\n          {connectPageContent ? (\n            <React.Fragment>{connectPageContent}</React.Fragment>\n          ) : (\n            <React.Fragment>\n              <LedgerLogo className='mb-4' />\n              <h4 className='mb-4'>Connect Ledger</h4>\n              <p className='lead mb-4'>\n                Unlock your device &amp; open the Elrond App.\n              </p>\n            </React.Fragment>\n          )}\n\n          <div>\n            {error && (\n              <p className='text-danger d-flex justify-content-center align-items-center'>\n                {error}\n              </p>\n            )}\n            <button\n              className='btn btn-primary px-4'\n              onClick={onClick}\n              data-testid='connectBtn'\n            >\n              Connect Ledger\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LedgerConnect;\n","import React from 'react';\nimport { useGetAccountInfo } from 'hooks';\n\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport { useLedgerLogin } from 'services';\nimport ModalContainer from 'UI/ModalContainer';\n\nimport PageState from 'UI/PageState';\nimport { getGeneratedClasses } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport AddressTable from './AddressTable';\nimport ConfirmAddress from './ConfirmAddress';\nimport LedgerConnect from './LedgerConnect';\n\nconst ledgerWaitingText = 'Waiting for device';\n\ninterface LedgerLoginContainerPropsType {\n  callbackRoute: string;\n  className?: string;\n  shouldRenderDefaultCss?: boolean;\n  wrapContentInsideModal?: boolean;\n  redirectAfterLogin?: boolean;\n  token?: string;\n  onClose?: () => void;\n}\n\nfunction LedgerLoginContainer({\n  callbackRoute,\n  className = 'login-modal-content',\n  shouldRenderDefaultCss = true,\n  wrapContentInsideModal = true,\n  redirectAfterLogin,\n  onClose,\n  token\n}: LedgerLoginContainerPropsType) {\n  const generatedClasses = getGeneratedClasses(\n    className,\n    shouldRenderDefaultCss,\n    { spinner: 'fa-spin text-primary' }\n  );\n  const { ledgerAccount } = useGetAccountInfo();\n  const [\n    onStartLogin,\n    { error, isLoading },\n    {\n      showAddressList,\n      accounts,\n      onGoToPrevPage,\n      onGoToNextPage,\n      onSelectAddress,\n      onConfirmSelectedAddress,\n      startIndex,\n      selectedAddress\n    }\n  ] = useLedgerLogin({ callbackRoute, token, redirectAfterLogin });\n\n  function getContent() {\n    if (isLoading) {\n      return (\n        <PageState\n          icon={icons.faCircleNotch}\n          iconClass={generatedClasses.spinner}\n          title={ledgerWaitingText}\n        />\n      );\n    }\n    if (ledgerAccount != null && !error) {\n      return <ConfirmAddress token={token} />;\n    }\n\n    if (showAddressList && !error) {\n      return (\n        <AddressTable\n          accounts={accounts}\n          loading={isLoading}\n          className={className}\n          shouldRenderDefaultCss={shouldRenderDefaultCss}\n          onGoToNextPage={onGoToNextPage}\n          onGoToPrevPage={onGoToPrevPage}\n          onSelectAddress={onSelectAddress}\n          startIndex={startIndex}\n          selectedAddress={selectedAddress?.address}\n          onConfirmSelectedAddress={onConfirmSelectedAddress}\n        />\n      );\n    }\n\n    return <LedgerConnect onClick={onStartLogin} error={error} />;\n  }\n  return wrapContentInsideModal ? (\n    <ModalContainer\n      title={'Login with ledger'}\n      className={className}\n      onClose={onClose}\n    >\n      {getContent()}\n    </ModalContainer>\n  ) : (\n    getContent()\n  );\n}\n\nexport default withClassNameWrapper(LedgerLoginContainer);\n","import React from 'react';\nimport { getGeneratedClasses, wrapperClassName } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport LedgerLoginContainer from '../LoginModal';\nimport { LedgerLoginButtonPropsType } from './types';\n\nconst LedgerLoginButton: (props: LedgerLoginButtonPropsType) => JSX.Element = ({\n  token,\n  callbackRoute,\n  children,\n  loginButtonText = 'Ledger',\n  buttonClassName,\n  className = 'ledger-login',\n  redirectAfterLogin = false,\n  wrapContentInsideModal = true,\n  shouldRenderDefaultCss = true\n}) => {\n  const [showLoginModal, setShowLoginModal] = React.useState(false);\n  const generatedClasses = getGeneratedClasses(\n    className,\n    shouldRenderDefaultCss,\n    {\n      wrapper: `btn btn-primary px-sm-4 m-1 mx-sm-3 ${\n        buttonClassName != null ? buttonClassName : ''\n      }`,\n      loginText: 'text-left'\n    }\n  );\n\n  function handleOpenModal() {\n    setShowLoginModal(true);\n  }\n\n  function handleCloseModal() {\n    setShowLoginModal(false);\n  }\n\n  return (\n    <span className={wrapperClassName}>\n      <button onClick={handleOpenModal} className={generatedClasses.wrapper}>\n        {children || (\n          <span className={generatedClasses.loginText}>{loginButtonText}</span>\n        )}\n      </button>\n      {showLoginModal && (\n        <LedgerLoginContainer\n          className={className}\n          shouldRenderDefaultCss={shouldRenderDefaultCss}\n          callbackRoute={callbackRoute}\n          token={token}\n          wrapContentInsideModal={wrapContentInsideModal}\n          redirectAfterLogin={redirectAfterLogin}\n          onClose={handleCloseModal}\n        />\n      )}\n    </span>\n  );\n};\n\nexport default withClassNameWrapper(LedgerLoginButton);\n","import React from 'react';\n\nimport { useGetNotification } from 'hooks';\n\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactBootstrap from 'optionalPackages/react-bootstrap';\nimport { NotificationTypesEnum } from 'types';\n\nimport { wrapperClassName } from 'utils';\nimport PageState from '../PageState';\n\nconst notificationTypesToIcons = {\n  [NotificationTypesEnum.warning]: icons.faExclamationTriangle\n};\nconst defaultIcon = icons.faExclamationTriangle;\n\nexport function NotificationModal() {\n  const { notification, clearNotification } = useGetNotification();\n\n  const showModal = Boolean(notification);\n  const onDone = () => {\n    clearNotification();\n  };\n\n  const icon = notification\n    ? notificationTypesToIcons[notification?.type] || defaultIcon\n    : null;\n\n  return notification ? (\n    <ReactBootstrap.Modal\n      show={showModal}\n      backdrop={true}\n      onHide={notification}\n      className={`modal-container ${wrapperClassName}`}\n      animation={false}\n      centered\n    >\n      <div className='card w-100 notification-modal'>\n        <PageState\n          icon={icon}\n          iconClass={notification.iconClassName}\n          iconBgClass='p-4 rounded-bg-circle'\n          iconSize='3x'\n          title={notification.title}\n          description={notification.description}\n          action={\n            <button className='btn btn-primary' onClick={onDone}>\n              Done\n            </button>\n          }\n        />\n      </div>\n    </ReactBootstrap.Modal>\n  ) : null;\n}\n\nexport default NotificationModal;\n","import React from 'react';\nimport classNames from 'optionalPackages/classnames';\nimport freeSolidIcons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactBootstrap from 'optionalPackages/react-bootstrap';\nimport { SignModalPropsType } from 'types';\nimport PageState from 'UI/PageState';\nimport { getGeneratedClasses, wrapperClassName } from 'utils';\n\nconst SignWithExtensionModal = ({\n  handleClose,\n  error,\n  callbackRoute,\n  transactions,\n  className = 'extension-modal'\n}: SignModalPropsType) => {\n  const classes = getGeneratedClasses(className, true, {\n    wrapper: 'modal-container extension',\n    icon: 'text-white',\n    closeBtn: 'btn btn-close-link mt-2'\n  });\n  const description = error\n    ? error\n    : transactions && transactions.length > 1\n    ? 'Check your Elrond Wallet Extension to sign the transactions'\n    : 'Check your Elrond Wallet Extension to sign the transaction';\n\n  const close = (e: React.MouseEvent) => {\n    e.preventDefault();\n    handleClose();\n    if (\n      callbackRoute != null &&\n      !window.location.pathname.includes(callbackRoute)\n    ) {\n      window.location.href = callbackRoute;\n    }\n  };\n\n  return (\n    <ReactBootstrap.Modal\n      show\n      backdrop='static'\n      onHide={handleClose}\n      className={classNames(classes.wrapper, wrapperClassName)}\n      animation={false}\n      centered\n    >\n      <PageState\n        icon={error ? freeSolidIcons.faTimes : freeSolidIcons.faHourglass}\n        iconClass={classes.icon}\n        className={className}\n        iconBgClass={error ? 'bg-danger' : 'bg-warning'}\n        iconSize='3x'\n        title='Confirm on Maiar DeFi Wallet'\n        description={description}\n        action={\n          <button\n            id='closeButton'\n            data-testid='closeButton'\n            onClick={close}\n            className={classes.closeBtn}\n          >\n            Close\n          </button>\n        }\n      />\n    </ReactBootstrap.Modal>\n  );\n};\n\nexport default SignWithExtensionModal;\n","import * as React from 'react';\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\n\nexport const Simple = ({ children }: { children: React.ReactNode }) => (\n  <div className='token-symbol'>{children}</div>\n);\n\nexport const Combined = ({\n  small,\n  children\n}: {\n  small: boolean | undefined;\n  children: React.ReactNode;\n}) => (\n  <div className={`token-symbol-combined ${small ? 'small' : ''}`}>\n    {children}\n  </div>\n);\n\nexport const Wrapped = ({ children }: { children: React.ReactNode }) => (\n  <div className='token-symbol-wrapped'>\n    <div className='wrapped rounded-circle shadow'>\n      <div className='locked-icon'>\n        <ReactFontawesome.FontAwesomeIcon icon={icons.faDollarSign} size='sm' />\n      </div>\n      {children}\n    </div>\n  </div>\n);\n\nexport const Pool = ({\n  first,\n  second\n}: {\n  first: React.ReactNode;\n  second: React.ReactNode;\n}) => (\n  <div className='token-symbol-pool'>\n    <div className='pool rounded-circle shadow'>\n      {first}\n      <div className='pool-icon'>{second}</div>\n    </div>\n  </div>\n);\n\nexport const Locked = ({ children }: { children: React.ReactNode }) => (\n  <div className='token-symbol-locked'>\n    <div className='locked rounded-circle shadow'>\n      <div className='locked-icon'>\n        <ReactFontawesome.FontAwesomeIcon icon={icons.faLock} size='sm' />\n      </div>\n      {children}\n    </div>\n  </div>\n);\n","import * as React from 'react';\n\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport { getEgldLabel, wrapperClassName } from 'utils';\nimport { ReactComponent as EgldIcon } from '../../assets/icons/EGLD.svg';\nimport { Simple, Combined } from './TokenSymbol';\n\nconst getIdentifierWithoutNonce = (identifier: string) => {\n  const tokenParts = identifier.split('-');\n  return identifier.includes('-')\n    ? `${tokenParts[0]}-${tokenParts[1]}`\n    : identifier;\n};\n\ntype TokenIconProps = {\n  token: string;\n  combined?: boolean | undefined;\n  small?: boolean | undefined;\n};\ntype TokenIconType = TokenIconProps & {\n  symbol: string;\n  label: string;\n  icon: React.ReactNode;\n};\n\nconst getDetails = (token: string): TokenIconType => {\n  const egldLabel = getEgldLabel();\n  const isEgldTransfer = token === egldLabel;\n  return {\n    token,\n    symbol: token ? token.split('-')[0] : '',\n    label: token,\n    // eslint-disable-next-line react/display-name\n    icon: () =>\n      isEgldTransfer ? (\n        <EgldIcon />\n      ) : (\n        <ReactFontawesome.FontAwesomeIcon icon={icons.faGem} />\n      )\n  };\n};\n\nexport default class TokenDetails extends React.Component {\n  static Token = (props: TokenIconProps) => (\n    <React.Fragment>{props.token}</React.Fragment>\n  );\n  static Symbol = (props: TokenIconProps) => (\n    <React.Fragment>\n      {getDetails(getIdentifierWithoutNonce(props.token)).symbol}\n    </React.Fragment>\n  );\n  static Label = (props: TokenIconProps) => (\n    <React.Fragment>\n      {getDetails(getIdentifierWithoutNonce(props.token)).label}\n    </React.Fragment>\n  );\n  static Icon = (props: TokenIconProps) => {\n    const Component: any =\n      process.env.NODE_ENV !== 'test'\n        ? getDetails(getIdentifierWithoutNonce(props.token)).icon\n        : () => null;\n\n    return (\n      <span className={wrapperClassName}>\n        {props.combined ? (\n          <Combined small={props.small}>\n            <Component />\n          </Combined>\n        ) : (\n          <Simple>\n            <Component />\n          </Simple>\n        )}\n      </span>\n    );\n  };\n  render() {\n    return null;\n  }\n}\n","import * as React from 'react';\nimport { decodePart } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\n\nconst allOccurences = (sourceStr: string, searchStr: string) =>\n  [...sourceStr.matchAll(new RegExp(searchStr, 'gi'))].map((a) => a.index);\n\nconst TransactionData = ({\n  data,\n  highlight,\n  isScCall\n}: {\n  data: string;\n  highlight?: string;\n  isScCall?: boolean;\n}) => {\n  let output = <React.Fragment>{data}</React.Fragment>;\n\n  const [encodedScCall, ...remainingDataFields] =\n    highlight && isScCall ? highlight.split('@') : [];\n\n  if (data && highlight && allOccurences(data, highlight).length === 1) {\n    switch (true) {\n      case data.startsWith(highlight): {\n        const [, rest] = data.split(highlight);\n        output = (\n          <React.Fragment>\n            {highlight}\n            <span className='text-muted'>{rest}</span>\n          </React.Fragment>\n        );\n        break;\n      }\n      case data.endsWith(highlight): {\n        const [rest] = data.split(highlight);\n        output = (\n          <React.Fragment>\n            <span className='text-muted'>{rest}</span>\n            {highlight}\n          </React.Fragment>\n        );\n        break;\n      }\n\n      default: {\n        const [start, end] = data.split(highlight);\n\n        output = (\n          <React.Fragment>\n            <span className='text-muted'>{start}</span>\n            <span className={'highlighted'}>{highlight}</span>\n            <span className='text-muted'>{end}</span>\n          </React.Fragment>\n        );\n        break;\n      }\n    }\n  }\n\n  return (\n    <React.Fragment>\n      {encodedScCall && (\n        <div className='form-group mb-0 data-field mw-100'>\n          <span className='form-label text-secondary d-block'>SC Call</span>\n\n          <div\n            data-testid='confirmScCall'\n            className='textarea sc-call form-control cursor-text mt-1 text-break-all'\n          >\n            {[decodePart(encodedScCall), ...remainingDataFields].join('@')}\n          </div>\n        </div>\n      )}\n      <div className='form-group mb-0 data-field mw-100'>\n        <span className='form-label text-secondary d-block'>Data</span>\n\n        <div\n          data-testid='confirmData'\n          className='textarea form-control cursor-text mt-1 text-break-all'\n        >\n          {data ? output : 'N/A'}\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default withClassNameWrapper(TransactionData);\n","import React from 'react';\nimport { Address } from '@elrondnetwork/erdjs/out';\nimport { useGetNetworkConfig } from 'hooks';\nimport useGetTokenDetails from 'hooks/transactions/useGetTokenDetails';\n\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport PageState from 'UI/PageState';\nimport TokenDetails from 'UI/TokenDetails';\nimport TransactionData from 'UI/TransactionData';\nimport {\n  denominate,\n  getEgldLabel,\n  getGeneratedClasses,\n  isTokenTransfer\n} from 'utils';\n\nexport interface SignStepType {\n  onSignTransaction: () => void;\n  onPrev: () => void;\n  handleClose: () => void;\n  waitingForDevice: boolean;\n  error: string | null;\n  callbackRoute?: string;\n  currentStep: number;\n  currentTransaction: any;\n  isLastTransaction: boolean;\n  className: string;\n}\n\nconst SignStep = ({\n  onSignTransaction,\n  handleClose,\n  onPrev,\n  waitingForDevice,\n  currentTransaction,\n  error,\n  isLastTransaction,\n  currentStep,\n  className\n}: SignStepType) => {\n  const egldLabel = getEgldLabel();\n  const transactionData = currentTransaction.transaction.getData().toString();\n  const { network } = useGetNetworkConfig();\n\n  const { tokenId, amount, type, multiTxData, receiver } =\n    currentTransaction.transactionTokenInfo;\n\n  const isTokenTransaction = Boolean(\n    tokenId && isTokenTransfer({ tokenId, erdLabel: egldLabel })\n  );\n\n  const onCloseClick = (e: React.MouseEvent) => {\n    e.preventDefault();\n    if (isFirst) {\n      handleClose();\n    } else {\n      onPrev();\n    }\n  };\n\n  const continueWithoutSigning =\n    type && multiTxData && !transactionData.endsWith(multiTxData);\n\n  let signBtnLabel = 'Sign & Continue';\n  signBtnLabel = waitingForDevice ? 'Check your Ledger' : signBtnLabel;\n  signBtnLabel =\n    isLastTransaction && !waitingForDevice ? 'Sign & Submit' : signBtnLabel;\n  signBtnLabel = continueWithoutSigning ? 'Continue' : signBtnLabel;\n\n  const isFirst = currentStep === 0;\n\n  const { tokenDenomination } = useGetTokenDetails({\n    tokenId: currentTransaction.transactionTokenInfo.tokenId\n  });\n\n  const denominatedAmount = denominate({\n    input: isTokenTransaction\n      ? amount\n      : currentTransaction.transaction.getValue().toString(),\n    denomination: isTokenTransaction\n      ? tokenDenomination\n      : Number(network.egldDenomination),\n    decimals: Number(network.decimals),\n    showLastNonZeroDecimal: false,\n    addCommas: true\n  });\n\n  const classes = getGeneratedClasses(className, true, {\n    formGroup: 'form-group text-left',\n    formLabel: 'form-label text-secondary',\n    icon: 'text-white',\n    contentWrapper:\n      'd-flex flex-column justify-content-start flex-md-row justify-content-md-between mb-3',\n    tokenWrapper: 'mb-3 mb-md-0 d-flex flex-column align-items-start',\n    tokenLabel: 'text-secondary text-left',\n    tokenValue: 'd-flex align-items-center mt-1',\n    tokenAmountLabel: 'text-secondary text-left',\n    tokenAmountValue: 'd-flex align-items-center',\n    dataFormGroup: 'form-group text-left',\n    errorMessage:\n      'text-danger d-flex justify-content-center align-items-center',\n    buttonsWrapper: 'd-flex align-items-center justify-content-end mt-spacer',\n    cancelButton: 'btn btn-dark text-white flex-even mr-2',\n    signButton: 'btn btn-primary flex-even ml-2'\n  });\n\n  return (\n    <PageState\n      icon={error ? icons.faTimes : icons.faHourglass}\n      iconClass={classes.icon}\n      iconBgClass={error ? 'bg-danger' : 'bg-warning'}\n      iconSize='3x'\n      className={className}\n      title='Confirm on Ledger'\n      description={\n        <React.Fragment>\n          {currentTransaction.transaction && (\n            <React.Fragment>\n              <div className={classes.formGroup} data-testid='transactionTitle'>\n                <div className={classes.formLabel}>To: </div>\n                {multiTxData\n                  ? new Address(receiver).bech32()\n                  : currentTransaction.transaction.getReceiver().toString()}\n              </div>\n\n              <div className={classes.contentWrapper}>\n                <div className={classes.tokenWrapper}>\n                  <div className={classes.tokenlabel}>Token</div>\n                  <div className={classes.tokenValue}>\n                    <TokenDetails.Icon token={tokenId || egldLabel} />\n                    <div className='mr-1'></div>\n                    <TokenDetails.Label token={tokenId || egldLabel} />\n                  </div>\n                </div>\n                <div>\n                  <div className={classes.tokenAmountLabel}>Amount</div>\n                  <div className={classes.tokenAmountValue}>\n                    <div className='mr-1'>{denominatedAmount}</div>\n                    <TokenDetails.Symbol token={tokenId || egldLabel} />\n                  </div>\n                </div>\n              </div>\n\n              <div className={classes.dataFormGroup}>\n                {currentTransaction.transaction.getData() && (\n                  <TransactionData\n                    {...{\n                      data: currentTransaction.transaction.getData().toString(),\n                      highlight: multiTxData,\n                      isScCall: !tokenId\n                    }}\n                  />\n                )}\n              </div>\n              {error && <p className={classes.errorMessage}>{error}</p>}\n            </React.Fragment>\n          )}\n        </React.Fragment>\n      }\n      action={\n        <div className={classes.buttonsWrapper}>\n          <button\n            id='closeButton'\n            data-testid='closeButton'\n            onClick={onCloseClick}\n            className={classes.cancelButton}\n          >\n            {isFirst ? 'Cancel' : 'Back'}\n          </button>\n\n          <button\n            type='button'\n            className={classes.signButton}\n            id='signBtn'\n            data-testid='signBtn'\n            onClick={onSignTransaction}\n            disabled={waitingForDevice}\n          >\n            {signBtnLabel}\n          </button>\n        </div>\n      }\n    />\n  );\n};\n\nexport default SignStep;\n","import React from 'react';\nimport { useSignTransactionsWithLedger } from 'hooks';\nimport classNames from 'optionalPackages/classnames';\nimport ReactBootstrap from 'optionalPackages/react-bootstrap';\nimport { SignModalPropsType } from 'types';\nimport { getGeneratedClasses, wrapperClassName } from 'utils';\nimport SignStep from './SignStep';\n\nconst SignWithLedgerModal = ({\n  handleClose,\n  error,\n  className = 'ledger-modal'\n}: SignModalPropsType) => {\n  const {\n    onSignTransaction,\n    onNext,\n    onPrev,\n    allTransactions,\n    waitingForDevice,\n    onAbort,\n    isLastTransaction,\n    currentStep,\n    callbackRoute,\n    currentTransaction\n  } = useSignTransactionsWithLedger({ onCancel: handleClose });\n  const classes = getGeneratedClasses(className, true, {\n    wrapper: 'modal-container wallet-connect',\n    container: 'card container',\n    cardBody: 'card-body'\n  });\n  return (\n    <ReactBootstrap.Modal\n      show={currentTransaction != null}\n      backdrop='static'\n      onHide={handleClose}\n      className={classNames(classes.wrapper, wrapperClassName)}\n      animation={false}\n      centered\n    >\n      <div className={classes.container}>\n        <div className={classes.cardBody}>\n          <SignStep\n            {...{\n              onSignTransaction,\n              onNext,\n              onPrev,\n              allTransactions,\n              waitingForDevice,\n              isLastTransaction,\n              currentStep,\n              callbackRoute,\n              currentTransaction,\n              handleClose: onAbort,\n              className,\n              error\n            }}\n          />\n        </div>\n      </div>\n    </ReactBootstrap.Modal>\n  );\n};\n\nexport default SignWithLedgerModal;\n","import React from 'react';\n\nimport classNames from 'optionalPackages/classnames';\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactBootstrap from 'optionalPackages/react-bootstrap';\nimport { SignModalPropsType } from 'types';\nimport PageState from 'UI/PageState';\nimport { getGeneratedClasses, wrapperClassName } from 'utils';\n\nexport const SignWithWalletConnectModal = ({\n  error,\n  handleClose,\n  callbackRoute,\n  transactions,\n  className = 'wallet-connect-modal'\n}: SignModalPropsType) => {\n  const classes = getGeneratedClasses(className, true, {\n    wrapper: 'modal-container wallet-connect',\n    icon: 'text-white',\n    closeBtn: 'btn btn-close-link mt-2'\n  });\n\n  const hasMultipleTransactions = transactions && transactions?.length > 1;\n  const description = error\n    ? error\n    : `Check your phone to sign the transaction${\n        hasMultipleTransactions ? 's' : ''\n      }`;\n\n  const close = (e: React.MouseEvent) => {\n    e.preventDefault();\n    handleClose();\n    if (\n      callbackRoute != null &&\n      !window.location.pathname.includes(callbackRoute)\n    ) {\n      window.location.href = callbackRoute;\n    }\n  };\n  return (\n    <ReactBootstrap.Modal\n      show\n      backdrop='static'\n      onHide={close}\n      className={classNames(classes.wrapper, wrapperClassName)}\n      animation={false}\n      centered\n    >\n      <PageState\n        icon={error ? icons.faTimes : icons.faHourglass}\n        iconClass={classes.icon}\n        className={className}\n        iconBgClass={error ? 'bg-danger' : 'bg-warning'}\n        iconSize='3x'\n        title='Confirm on Maiar'\n        description={description}\n        action={\n          <button\n            id='closeButton'\n            data-testid='closeButton'\n            onClick={close}\n            className={classes.closeBtn}\n          >\n            Close\n          </button>\n        }\n      />\n    </ReactBootstrap.Modal>\n  );\n};\n\nexport default SignWithWalletConnectModal;\n","import React from 'react';\n\nimport { Transaction } from '@elrondnetwork/erdjs';\nimport {\n  useGetAccountProvider,\n  useGetSignTransactionsError,\n  useSignTransactions\n} from 'hooks';\nimport { LoginMethodsEnum } from 'types';\nimport { getIsProviderEqualTo } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport SignWithExtensionModal from './SignWithExtensionModal';\nimport SignWithLedgerModal from './SignWithLedgerModal';\nimport SignWithWalletConnectModal from './SignWithWalletConnectModal';\n\ninterface SignPropsType {\n  handleClose: () => void;\n  error: string | null;\n  sessionId?: string;\n  transactions: Transaction[];\n  providerType: LoginMethodsEnum;\n  callbackRoute: string;\n  className?: string;\n}\n\ninterface CustomConfirmScreensType {\n  Ledger: (signProps: SignPropsType) => React.ReactNode;\n  Extension: (signProps: SignPropsType) => React.ReactNode;\n  WalletConnect: (signProps: SignPropsType) => React.ReactNode;\n  Extra: (signProps: SignPropsType) => React.ReactNode;\n}\n\ninterface SignTransactionsPropsType {\n  className?: string;\n  CustomConfirmScreens?: CustomConfirmScreensType;\n}\n\nfunction SignTransactionsModals({\n  className,\n  CustomConfirmScreens\n}: SignTransactionsPropsType) {\n  const {\n    callbackRoute,\n    transactions,\n    error,\n    sessionId,\n    onAbort,\n    hasTransactions\n  } = useSignTransactions();\n\n  const { providerType } = useGetAccountProvider();\n  const signTransactionsError = useGetSignTransactionsError();\n\n  const handleClose = () => {\n    onAbort(sessionId);\n  };\n\n  const signError = error || signTransactionsError;\n\n  const signProps: SignPropsType = {\n    handleClose,\n    error: signError,\n    sessionId,\n    transactions: transactions!,\n    providerType,\n    callbackRoute,\n    className\n  };\n  return signError || hasTransactions ? (\n    <React.Fragment>\n      {getIsProviderEqualTo(LoginMethodsEnum.ledger) &&\n        (CustomConfirmScreens?.Ledger?.(signProps) || (\n          <SignWithLedgerModal {...signProps} />\n        ))}\n      {getIsProviderEqualTo(LoginMethodsEnum.walletconnect) &&\n        (CustomConfirmScreens?.WalletConnect?.(signProps) || (\n          <SignWithWalletConnectModal {...signProps} />\n        ))}\n      {getIsProviderEqualTo(LoginMethodsEnum.extension) &&\n        (CustomConfirmScreens?.Extension?.(signProps) || (\n          <SignWithExtensionModal {...signProps} />\n        ))}\n      {getIsProviderEqualTo(LoginMethodsEnum.extra) &&\n        CustomConfirmScreens?.Extra?.(signProps)}\n    </React.Fragment>\n  ) : null;\n}\n\nexport default withClassNameWrapper(SignTransactionsModals);\n","enum SessionStorageKeysEnum {\n  'toasts' = 'toasts'\n}\n\nexport function setToastsIdsToStorage(ids: string[]) {\n  return sessionStorage.setItem(\n    SessionStorageKeysEnum.toasts,\n    JSON.stringify(ids)\n  );\n}\n\nexport function getToastsIdsFromStorage() {\n  const toastsIds = sessionStorage.getItem(SessionStorageKeysEnum.toasts);\n  return toastsIds != null ? JSON.parse(toastsIds) : [];\n}\n","import { Address } from '@elrondnetwork/erdjs/out';\nimport { getShardOfAddress } from 'utils';\n\ninterface IsCrossShardTransactionPropsType {\n  receiverAddress: string;\n  senderShard?: number;\n  senderAddress?: string;\n}\nexport function isCrossShardTransaction({\n  receiverAddress,\n  senderShard,\n  senderAddress\n}: IsCrossShardTransactionPropsType) {\n  try {\n    const receiver = new Address(receiverAddress);\n    const receiverShard = getShardOfAddress(receiver.pubkey());\n    if (senderShard == null && senderAddress != null) {\n      const sender = new Address(senderAddress);\n      return getShardOfAddress(sender) === receiverShard;\n    }\n    return receiverShard === senderShard;\n  } catch (err) {\n    return false;\n  }\n}\n","import React from 'react';\nimport classnames from 'optionalPackages/classnames';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport { getGeneratedClasses } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport { Props } from './types';\n\nconst IconState = ({\n  icon,\n  iconSize = '3x',\n  className = 'icon-state',\n  shouldRenderDefaultCss = true\n}: Props) => {\n  const generatedClasses = getGeneratedClasses(\n    className,\n    shouldRenderDefaultCss,\n    {\n      wrapper: classnames('icon-state mx-auto', className, {\n        half: iconSize === '2x'\n      }),\n      icon: classnames('text-white', className)\n    }\n  );\n\n  return (\n    <span className={generatedClasses.wrapper}>\n      <ReactFontawesome.FontAwesomeIcon\n        icon={icon}\n        size={iconSize}\n        className={generatedClasses.icon}\n      />\n    </span>\n  );\n};\n\nexport default withClassNameWrapper(IconState);\n","import React from 'react';\nimport moment from 'optionalPackages/moment';\nimport { logarithmicRest } from 'utils';\nimport storage from 'utils/session';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport { Props } from './type';\n\nconst Progress = ({ id, children, progress, done }: Props) => {\n  const ref = React.useRef(null);\n  const intervalRef = React.useRef<any>();\n  const removeTxFromSession = () => {\n    const toastProgress = storage.getItem('toastProgress');\n    const hasSessionStoredTx = Boolean(toastProgress[id]);\n\n    if (!hasSessionStoredTx) {\n      return;\n    }\n\n    const expires = moment().add(10, 'minutes').unix();\n\n    delete toastProgress[id];\n\n    storage.setItem({\n      key: 'toastProgress',\n      data: toastProgress,\n      expires\n    });\n  };\n\n  const saveToSession = ({ value }: { value: number }) => {\n    const toastProgress = storage.getItem('toastProgress') || {};\n    toastProgress[id] = value;\n    storage.setItem({\n      key: 'toastProgress',\n      data: toastProgress,\n      expires: moment().add(10, 'minutes').unix()\n    });\n  };\n\n  const getInitialData = () => {\n    const totalSeconds = progress ? progress.endTime - progress.startTime : 0;\n    const toastProgress = storage.getItem('toastProgress');\n    const remaining = progress\n      ? ((progress.endTime - moment().unix()) * 100) / totalSeconds\n      : 0;\n\n    const currentRemaining =\n      toastProgress && id in toastProgress ? toastProgress[id] : remaining;\n    return { currentRemaining, totalSeconds };\n  };\n\n  const { totalSeconds, currentRemaining } = getInitialData();\n\n  const [percentRemaining, setPercentRemaining] =\n    React.useState<number>(currentRemaining);\n\n  React.useEffect(() => {\n    if (progress) {\n      const maxPercent = 90;\n      const perc = totalSeconds / maxPercent;\n      const int = moment.duration(perc.toFixed(2), 's').asMilliseconds();\n\n      if (done) {\n        intervalRef.current = setInterval(() => {\n          if (ref.current !== null) {\n            setPercentRemaining((existing) => {\n              const value = existing - 1;\n              if (value <= 0) {\n                clearInterval(intervalRef.current);\n                removeTxFromSession();\n                return 0;\n              } else {\n                saveToSession({ value });\n                return value;\n              }\n            });\n          }\n        }, 5);\n      } else {\n        intervalRef.current = setInterval(() => {\n          if (ref.current !== null) {\n            setPercentRemaining((existing) => {\n              const decrement =\n                existing > 100 - maxPercent ? 1 : logarithmicRest(existing);\n              const value = existing - decrement;\n              saveToSession({ value });\n              return value;\n            });\n          }\n        }, int);\n      }\n\n      return () => {\n        clearInterval(intervalRef.current);\n      };\n    }\n    return;\n  }, [progress, done]);\n  return progress ? (\n    <div className='progress position-relative' ref={ref}>\n      <div\n        className='progress-bar'\n        role='progressbar'\n        style={{ width: `${percentRemaining}%` }}\n        aria-valuenow={percentRemaining}\n        aria-valuemin={0}\n        aria-valuemax={100}\n      >\n        <div className='content-height'>{children}</div>\n      </div>\n      <div className='d-flex position-absolute w-100'>{children}</div>\n    </div>\n  ) : (\n    <React.Fragment>{children}</React.Fragment>\n  );\n};\n\nexport default withClassNameWrapper(Progress);\n","function fallbackCopyTextToClipboard(text: string) {\n  let success = false;\n\n  const textArea = document.createElement('textarea');\n  textArea.value = text;\n  textArea.style.position = 'fixed';\n  document.body.appendChild(textArea);\n  textArea.focus();\n  textArea.select();\n\n  try {\n    document.execCommand('copy');\n    success = true;\n  } catch (err) {\n    console.error('Fallback: Oops, unable to copy', err);\n  }\n\n  document.body.removeChild(textArea);\n\n  return success;\n}\n\nexport default async function copyTextToClipboard(text: string) {\n  let success = false;\n\n  if (!navigator.clipboard) {\n    success = fallbackCopyTextToClipboard(text);\n  } else {\n    success = await navigator.clipboard.writeText(text).then(\n      function done() {\n        return true;\n      },\n      function error(err) {\n        console.error('Async: Could not copy text: ', err);\n        return false;\n      }\n    );\n  }\n\n  return success;\n}\n","import React from 'react';\n\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport copyTextToClipboard from './helpers/copyToClipboard';\n\ninterface CopyButtonType {\n  text: string;\n  className?: string;\n}\n\nconst CopyButton = ({ text, className = '' }: CopyButtonType) => {\n  const [copyResult, setCopyResut] = React.useState({\n    default: true,\n    success: false\n  });\n\n  const handleCopyToClipboard = async (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    const noSpaces = text ? text.trim() : text;\n    setCopyResut({\n      default: false,\n      success: await copyTextToClipboard(noSpaces)\n    });\n\n    setTimeout(() => {\n      setCopyResut({\n        default: true,\n        success: false\n      });\n    }, 1000);\n  };\n\n  return (\n    <a\n      href='/#'\n      onClick={handleCopyToClipboard}\n      className={`side-action text-secondary ${className}`}\n    >\n      {copyResult.default || !copyResult.success ? (\n        <ReactFontawesome.FontAwesomeIcon icon={icons.faCopy} />\n      ) : (\n        <ReactFontawesome.FontAwesomeIcon\n          icon={icons.faCheck}\n          className='text-primary-highlight'\n        />\n      )}\n    </a>\n  );\n};\n\nexport default withClassNameWrapper(CopyButton);\n","import React from 'react';\nimport { useCallback } from 'react';\nimport debounce from 'lodash/debounce';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\n\ninterface TrimType {\n  text: string;\n  dataTestId?: string;\n}\n\nconst Trim = ({ text, dataTestId = '' }: TrimType) => {\n  const [overflow, setOverflow] = React.useState(false);\n  const trimRef = React.useRef(document.createElement('span'));\n  const hiddenTextRef = React.useRef(document.createElement('span'));\n\n  const listener = useCallback(\n    debounce(() => {\n      if (trimRef.current && hiddenTextRef.current) {\n        const diff =\n          hiddenTextRef.current.offsetWidth - trimRef.current.offsetWidth;\n        setOverflow(diff > 1);\n      }\n    }, 300),\n    []\n  );\n\n  const addWindowResizeListener = () => {\n    window.addEventListener('resize', listener);\n    return () => {\n      window.removeEventListener('resize', listener);\n    };\n  };\n\n  React.useEffect(addWindowResizeListener);\n\n  React.useEffect(() => {\n    listener();\n  }, []);\n\n  return (\n    <span\n      ref={trimRef}\n      className={`trim ${overflow ? 'overflow' : ''}`}\n      data-testid={dataTestId}\n    >\n      <span ref={hiddenTextRef} className='hidden-text-ref'>\n        {text}\n      </span>\n\n      {overflow ? (\n        <React.Fragment>\n          <span className='left'>\n            <span>\n              {String(text).substring(0, Math.floor(text.length / 2))}\n            </span>\n          </span>\n          <span className='ellipsis'>...</span>\n          <span className='right'>\n            <span>{String(text).substring(Math.ceil(text.length / 2))}</span>\n          </span>\n        </React.Fragment>\n      ) : (\n        <span>{text}</span>\n      )}\n    </span>\n  );\n};\n\nexport default withClassNameWrapper(Trim);\n","import React from 'react';\n\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport CopyButton from 'UI/CopyButton';\nimport ExplorerLink from 'UI/ExplorerLink';\nimport Trim from 'UI/Trim';\nimport { getGeneratedClasses, isServerTransactionPending } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport { Props } from './types';\n\nconst TxDetails = ({\n  title,\n  transactions,\n  className = 'tx-details',\n  isTimedOut = false,\n  shouldRenderDefaultCss = true\n}: Props) => {\n  const generatedClasses = getGeneratedClasses(\n    className,\n    shouldRenderDefaultCss,\n    {\n      title: 'mb-0',\n      statusTransactions: 'mb-2 mt-1',\n      iconSuccess: 'mr-1 text-secondary',\n      iconFailed: 'mr-1 text-secondary',\n      trimContainer: 'text-nowrap trim-fs-sm mr-3',\n      iconPending: 'mr-1 text-secondary fa-spin slow-spin',\n      item: 'tx-description d-flex justify-content-start align-items-center'\n    }\n  );\n\n  const iconSuccessData = {\n    icon: icons.faCheck,\n    classNames: generatedClasses.iconSuccess\n  };\n\n  const iconFailedData = {\n    icon: icons.faTimes,\n    classNames: generatedClasses.iconSuccess\n  };\n\n  const iconPendingData = {\n    icon: icons.faSpinner,\n    classNames: generatedClasses.iconPending\n  };\n\n  const iconData = {\n    pending: iconPendingData,\n    success: iconSuccessData,\n    completed: iconSuccessData,\n    fail: iconFailedData,\n    invalid: iconFailedData,\n    timedOut: iconFailedData\n  };\n  return (\n    <React.Fragment>\n      {title && <div className={generatedClasses.title}>{title}</div>}\n      <div className={generatedClasses.statusTransactions}>\n        {\n          transactions.filter((tx) => !isServerTransactionPending(tx.status))\n            .length\n        }{' '}\n        / {transactions.length} transactions processed\n      </div>\n      {transactions.map(({ hash, status }) => {\n        const iconSrc = iconData[status];\n        return (\n          <div className={generatedClasses.item} key={hash}>\n            {!isTimedOut && iconSrc != null && (\n              <ReactFontawesome.FontAwesomeIcon\n                icon={iconSrc.icon}\n                className={iconSrc.classNames}\n              />\n            )}\n            <span\n              className={generatedClasses.trimContainer}\n              style={{ width: '10rem' }}\n            >\n              <Trim text={hash} />\n            </span>\n            <CopyButton text={hash} />\n            {!isServerTransactionPending(status) && (\n              <ExplorerLink page={`/transactions/${hash}`} className='ml-2' />\n            )}\n          </div>\n        );\n      })}\n    </React.Fragment>\n  );\n};\n\nexport default withClassNameWrapper(TxDetails);\n","import React, { useMemo, useRef, useState } from 'react';\n\nimport { useGetTransactionDisplayInfo } from 'hooks';\n\nimport icons from 'optionalPackages/fortawesome-free-solid-svg-icons';\nimport moment from 'optionalPackages/moment';\nimport ReactBootstrap from 'optionalPackages/react-bootstrap';\nimport ReactFontawesome from 'optionalPackages/react-fontawesome';\nimport { useSelector } from 'redux/DappProviderContext';\nimport { shardSelector } from 'redux/selectors';\nimport { isCrossShardTransaction } from 'services/transactions/isCrossShardTransaction';\nimport { SignedTransactionType } from 'types';\nimport IconState from 'UI/IconState';\nimport Progress from 'UI/Progress';\nimport TxDetails from 'UI/TxDetails';\nimport {\n  getAddressFromDataField,\n  getGeneratedClasses,\n  getIsTransactionPending,\n  getIsTransactionTimedOut\n} from 'utils';\n\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport { TransactionToastPropsType } from './types';\n\nconst averageTxDurationMs = 6000;\nconst crossShardRounds = 5;\n\nconst TransactionToast = ({\n  toastId,\n  title = '',\n  shouldRenderDefaultCss = true,\n  className = 'transaction-toast',\n  withTxNonce = false,\n  transactions,\n  status,\n  onClose\n}: TransactionToastPropsType) => {\n  const ref = useRef(null);\n  const [shouldRender, setShouldRender] = useState(true);\n  const transactionDisplayInfo = useGetTransactionDisplayInfo(toastId);\n  const accountShard = useSelector(shardSelector);\n\n  const {\n    errorMessage = 'Transaction failed',\n    timedOutMessage = 'Transaction timed out',\n    successMessage = 'Transaction successful',\n    processingMessage = 'Processing transaction'\n  } = transactionDisplayInfo;\n\n  const isSameShard = useMemo(\n    () =>\n      transactions!.reduce(\n        (\n          prevTxIsSameShard: boolean,\n          { receiver, data }: SignedTransactionType\n        ) => {\n          const receiverAddress = getAddressFromDataField({\n            receiver,\n            data\n          });\n          if (receiverAddress == null) {\n            return prevTxIsSameShard;\n          }\n          return (\n            prevTxIsSameShard &&\n            isCrossShardTransaction({\n              receiverAddress,\n              senderShard: accountShard\n            })\n          );\n        },\n        true\n      ),\n    [transactions, accountShard]\n  );\n\n  const shardAdjustedDuration = isSameShard\n    ? averageTxDurationMs\n    : crossShardRounds * averageTxDurationMs;\n\n  const transactionDuration =\n    transactionDisplayInfo?.transactionDuration || shardAdjustedDuration;\n  const generatedClasses = getGeneratedClasses(\n    className,\n    shouldRenderDefaultCss,\n    {\n      toastFooter: 'mb-0 text-break',\n      details: 'media-body flex-grow-1',\n      toastContainer: 'w-100 media p-2',\n      wrapper: 'toast-visible clickable',\n      toastHeader: 'd-flex justify-content-between mb-1',\n      iconContainer: 'align-self-center ml-2 mr-2 pr-1',\n      title: 'm-0 font-weight-normal text-nowrap text-truncate',\n      closeButton: 'close d-flex side-action align-items-center mx-2 outline-0'\n    }\n  );\n\n  const [startTime, endTime] = useMemo(() => {\n    const startTime = moment().unix();\n    const endTime = moment()\n      .add(Number(transactionDuration), 'milliseconds')\n      .unix();\n    return [startTime, endTime];\n  }, []);\n\n  const progress = { startTime, endTime };\n\n  const successToastData = {\n    id: toastId,\n    icon: icons.faCheck,\n    expires: 30000,\n    hasCloseButton: true,\n    title: successMessage,\n    iconClassName: 'bg-success'\n  };\n\n  const pendingToastData = {\n    id: toastId,\n    expires: false,\n    icon: icons.faHourglass,\n    hasCloseButton: false,\n    title: processingMessage,\n    iconClassName: 'bg-warning'\n  };\n\n  const failToastData = {\n    id: toastId,\n    icon: icons.faTimes,\n    title: errorMessage,\n    hasCloseButton: true,\n    iconClassName: 'bg-danger'\n  };\n\n  const timedOutToastData = {\n    id: toastId,\n    icon: icons.faTimes,\n    title: timedOutMessage,\n    hasCloseButton: true,\n    iconClassName: 'bg-warning'\n  };\n\n  const isPending = getIsTransactionPending(status);\n  const isTimedOut = getIsTransactionTimedOut(status);\n\n  const toatsOptionsData = {\n    signed: pendingToastData,\n    sent: pendingToastData,\n    pending: pendingToastData,\n    success: successToastData,\n    completed: successToastData,\n    cancelled: failToastData,\n    fail: failToastData,\n    timedOut: timedOutToastData\n  };\n\n  const toastDataState = toatsOptionsData[status!];\n\n  const handleDeleteToast = () => {\n    setShouldRender(false);\n    onClose?.(toastId);\n  };\n\n  if (!shouldRender || transactions == null) {\n    return null;\n  }\n\n  return (\n    <ReactBootstrap.Toast\n      ref={ref}\n      className={generatedClasses.wrapper}\n      key={toastId}\n    >\n      <Progress\n        key={toastId}\n        id={toastId}\n        progress={progress}\n        done={!isPending || isTimedOut}\n      >\n        <div className={generatedClasses.toastContainer}>\n          <div className={generatedClasses.iconContainer}>\n            <IconState\n              iconSize='2x'\n              icon={toastDataState.icon}\n              className={toastDataState.iconClassName}\n            />\n            {withTxNonce &&\n              transactions.map((tx: any) => (\n                <p key={tx.nonce.valueOf()}>{tx.nonce.valueOf()}</p>\n              ))}\n          </div>\n          <div className={generatedClasses.details} style={{ minWidth: 0 }}>\n            <div className={generatedClasses.toastHeader}>\n              <h5 className={generatedClasses.title}>{toastDataState.title}</h5>\n              {!isPending && (\n                <button\n                  type='button'\n                  className={generatedClasses.closeButton}\n                  onClick={handleDeleteToast}\n                >\n                  <ReactFontawesome.FontAwesomeIcon\n                    icon={icons.faTimes}\n                    size='xs'\n                  />\n                </button>\n              )}\n            </div>\n            <div className={generatedClasses.toastFooter}>\n              <TxDetails\n                transactions={transactions}\n                title={title}\n                isTimedOut={isTimedOut}\n              />\n            </div>\n          </div>\n        </div>\n      </Progress>\n    </ReactBootstrap.Toast>\n  );\n};\n\nexport default withClassNameWrapper(TransactionToast);\n","import React, { useEffect, useState } from 'react';\nimport { useGetSignedTransactions } from 'hooks';\nimport { useGetPendingTransactions } from 'services';\nimport {\n  getToastsIdsFromStorage,\n  setToastsIdsToStorage\n} from 'storage/session';\nimport { SignedTransactionsBodyType } from 'types';\nimport TransactionToast from 'UI/TransactionToast';\nimport { getGeneratedClasses } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\n\nimport { TransactionsToastListPropsType } from './types';\n\nfunction TransactionsToastList({\n  shouldRenderDefaultCss = true,\n  withTxNonce = false,\n  className = 'transactions-toast-list',\n  pendingTransactions,\n  signedTransactions\n}: TransactionsToastListPropsType) {\n  const [toastsIds, setToastsIds] = useState<any>([]);\n\n  const pendingTransactionsFromStore =\n    useGetPendingTransactions().pendingTransactions;\n\n  const signedTransactionsFromStore = useGetSignedTransactions();\n\n  const pendingTransactionsToRender =\n    pendingTransactions || pendingTransactionsFromStore;\n\n  const signedTransactionsToRender =\n    signedTransactions || signedTransactionsFromStore;\n\n  const generatedClasses = getGeneratedClasses(\n    className,\n    shouldRenderDefaultCss,\n    {\n      wrapper:\n        'toast-messages d-flex flex-column align-items-center justify-content-sm-end',\n      toast: ''\n    }\n  );\n\n  const mappedToastsList = toastsIds?.map((toastId: string) => {\n    const currentTx: SignedTransactionsBodyType =\n      signedTransactionsToRender[toastId];\n    if (\n      currentTx == null ||\n      currentTx?.transactions == null ||\n      currentTx?.status == null\n    ) {\n      return null;\n    }\n\n    const { transactions, status } = currentTx;\n    return (\n      <TransactionToast\n        className={className}\n        key={toastId}\n        transactions={transactions}\n        status={status}\n        toastId={toastId}\n        withTxNonce={withTxNonce}\n      />\n    );\n  });\n\n  const mapPendingSignedTransactions = () => {\n    const newToasts = [...toastsIds];\n\n    for (const sessionId in pendingTransactionsToRender) {\n      const hasToast = toastsIds.includes(sessionId);\n\n      if (!hasToast) {\n        newToasts.push(sessionId);\n      }\n    }\n\n    setToastsIds(newToasts);\n  };\n\n  const fetchSessionStorageToasts = () => {\n    const sessionStorageToastsIds = getToastsIdsFromStorage();\n\n    if (sessionStorageToastsIds) {\n      const newToasts = [...toastsIds, ...sessionStorageToastsIds];\n      setToastsIds(newToasts);\n    }\n  };\n\n  const saveSessionStorageToasts = () => {\n    const shouldSaveLocalToasts = Boolean(toastsIds.length);\n    if (!shouldSaveLocalToasts) {\n      return;\n    }\n\n    setToastsIdsToStorage(toastsIds);\n  };\n\n  useEffect(() => {\n    fetchSessionStorageToasts();\n    return () => {\n      saveSessionStorageToasts();\n    };\n  }, []);\n\n  useEffect(() => {\n    mapPendingSignedTransactions();\n  }, [pendingTransactionsToRender]);\n\n  return <div className={generatedClasses.wrapper}>{mappedToastsList}</div>;\n}\n\nexport default withClassNameWrapper(TransactionsToastList);\n","let platform: any = {};\ntry {\n  platform = require('platform');\n} catch (err) {}\n\nexport default platform;\n","let qrcode: any = {};\ntry {\n  qrcode = require('qrcode');\n} catch (err) {}\n\nexport default qrcode;\n","import React, { useEffect, useState } from 'react';\n\nimport platform from 'optionalPackages/platform';\nimport QRCode from 'optionalPackages/qrcode';\nimport { useWalletConnectLogin } from 'services';\nimport ModalContainer from 'UI/ModalContainer';\nimport { getGeneratedClasses } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport { ReactComponent as Lighting } from '../WalletConnectLoginButton/lightning.svg';\nimport { LoginModalPropsType } from './types';\n\nfunction WalletConnectLoginContainer({\n  callbackRoute,\n  loginButtonText,\n  title = 'Maiar Login',\n  logoutRoute = '/unlock',\n  className = 'wallect-connect-login-modal',\n  lead = 'Scan the QR code using Maiar',\n  shouldRenderDefaultCss = true,\n  wrapContentInsideModal = true,\n  redirectAfterLogin,\n  token,\n  onClose\n}: LoginModalPropsType) {\n  const [\n    initLoginWithWalletConnect,\n    { error },\n    { uriDeepLink, walletConnectUri }\n  ] = useWalletConnectLogin({\n    logoutRoute,\n    callbackRoute,\n    token,\n    redirectAfterLogin,\n    shouldLoginUser: true\n  });\n  const [qrCodeSvg, setQrCodeSvg] = useState<string>('');\n  const isMobileDevice =\n    platform?.os?.family === 'iOS' || platform?.os?.family === 'Android';\n  const generatedClasses = getGeneratedClasses(\n    className,\n    shouldRenderDefaultCss,\n    {\n      wrapper: 'btn btn-primary px-sm-4 m-1 mx-sm-3',\n      loginText: 'text-left',\n      container: 'm-auto login-container',\n      card: 'card my-3 text-center',\n      cardBody: 'card-body p-4 mx-lg-4',\n      qrCodeSvgContainer: 'mx-auto mb-3',\n      title: 'mb-3',\n      leadText: 'lead mb-0',\n      mobileLoginButton: 'btn btn-primary px-4 mt-4',\n      errorMessage:\n        'text-danger d-flex justify-content-center align-items-center'\n    }\n  );\n\n  const generateQRCode = async () => {\n    if (!walletConnectUri) {\n      return;\n    }\n\n    const svg = await QRCode.toString(walletConnectUri, {\n      type: 'svg'\n    });\n\n    setQrCodeSvg(svg);\n  };\n\n  useEffect(() => {\n    generateQRCode();\n  }, [walletConnectUri]);\n\n  useEffect(() => {\n    initLoginWithWalletConnect();\n  }, []);\n\n  const content = (\n    <div className={generatedClasses.container}>\n      <div className={generatedClasses.root}>\n        <div className={generatedClasses.card}>\n          <div className={generatedClasses.cardBody}>\n            <div\n              className={generatedClasses.qrCodeSvgContainer}\n              dangerouslySetInnerHTML={{\n                __html: qrCodeSvg\n              }}\n              style={{\n                width: '15rem',\n                height: '15rem'\n              }}\n            />\n            <h4 className={generatedClasses.title}>{title}</h4>\n            {isMobileDevice ? (\n              <React.Fragment>\n                <p className={generatedClasses.leadText}>{loginButtonText}</p>\n                <a\n                  id='accessWalletBtn'\n                  data-testid='accessWalletBtn'\n                  className={generatedClasses.mobileLoginButton}\n                  href={uriDeepLink || undefined}\n                  rel='noopener noreferrer nofollow'\n                  target='_blank'\n                >\n                  <Lighting\n                    className={generatedClasses.cardBody}\n                    style={{\n                      width: '0.7rem',\n                      height: '0.7rem'\n                    }}\n                  />\n                  {title}\n                </a>\n              </React.Fragment>\n            ) : (\n              <p className={generatedClasses.leadText}>{lead}</p>\n            )}\n            <div>\n              {error && (\n                <p className={generatedClasses.errorMessage}>{error}</p>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  return wrapContentInsideModal ? (\n    <ModalContainer\n      title={'Login with Maiar'}\n      className={className}\n      onClose={onClose}\n    >\n      {content}\n    </ModalContainer>\n  ) : (\n    content\n  );\n}\n\nexport default withClassNameWrapper(WalletConnectLoginContainer);\n","import React, { Fragment, useState } from 'react';\nimport { getGeneratedClasses } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport WalletConnectLoginContainer from '../WalletConnectLoginContainer';\nimport { WalletConnectLoginButtonPropsType } from './types';\n\nconst WalletConnectLoginButton = ({\n  children,\n  callbackRoute,\n  loginButtonText = 'Maiar App',\n  title = 'Maiar Login',\n  logoutRoute = '/unlock',\n  shouldRenderDefaultCss = true,\n  wrapContentInsideModal = true,\n  redirectAfterLogin = false,\n  buttonClassName,\n  className = 'wallect-connect-login',\n  lead = 'Scan the QR code using Maiar',\n  token\n}: WalletConnectLoginButtonPropsType) => {\n  const [showLoginModal, setShowLoginModal] = useState(false);\n  const generatedClasses = getGeneratedClasses(\n    className,\n    shouldRenderDefaultCss,\n    {\n      wrapper: `btn btn-primary px-sm-4 m-1 mx-sm-3 ${\n        buttonClassName != null ? buttonClassName : ''\n      }`,\n      loginText: 'text-left'\n    }\n  );\n\n  const handleOpenModal = () => {\n    setShowLoginModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setShowLoginModal(false);\n  };\n\n  return (\n    <Fragment>\n      <button onClick={handleOpenModal} className={generatedClasses.wrapper}>\n        {children || (\n          <span className={generatedClasses.loginText}>{loginButtonText}</span>\n        )}\n      </button>\n      {showLoginModal && (\n        <WalletConnectLoginContainer\n          callbackRoute={callbackRoute}\n          loginButtonText={loginButtonText}\n          title={title}\n          token={token}\n          className={className}\n          logoutRoute={logoutRoute}\n          lead={lead}\n          wrapContentInsideModal={wrapContentInsideModal}\n          redirectAfterLogin={redirectAfterLogin}\n          onClose={handleCloseModal}\n        />\n      )}\n    </Fragment>\n  );\n};\n\nexport default withClassNameWrapper(WalletConnectLoginButton);\n","import React from 'react';\nimport { useWebWalletLogin } from 'services';\nimport { getGeneratedClasses } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport { WebWalletLoginButtonPropsType } from './types';\n\nconst WebWalletLoginButton: (\n  props: WebWalletLoginButtonPropsType\n) => JSX.Element = ({\n  children,\n  token,\n  className = 'web-wallet-login',\n  callbackRoute,\n  buttonClassName,\n  loginButtonText = 'Elrond Web Wallet',\n  shouldRenderDefaultCss = true\n}) => {\n  const [onInitiateLogin] = useWebWalletLogin({\n    callbackRoute,\n    token\n  });\n  const classes = getGeneratedClasses(className, shouldRenderDefaultCss, {\n    wrapper: `btn btn-primary px-sm-4 m-1 mx-sm-3 ${\n      buttonClassName != null ? buttonClassName : ''\n    }`,\n    loginText: 'text-left'\n  });\n\n  const handleLogin = () => {\n    onInitiateLogin();\n  };\n\n  return (\n    <button onClick={handleLogin} className={classes.wrapper}>\n      {children || <span className={classes.loginText}>{loginButtonText}</span>}\n    </button>\n  );\n};\n\nexport default withClassNameWrapper(WebWalletLoginButton);\n","import React from 'react';\nimport { useGetLoginInfo } from 'hooks';\nimport ExtensionLoginButton from 'UI/extension/LoginButton';\n\nimport LedgerLoginButton from 'UI/ledger/LoginButton';\nimport WalletConnectLoginButton from 'UI/walletConnect/WalletConnectLoginButton';\nimport WebWalletLoginButton from 'UI/webWallet/LoginButton';\nimport { getGeneratedClasses, wrapperClassName } from 'utils';\nimport { withClassNameWrapper } from 'wrappers/withClassNameWrapper';\nimport { Props } from './types';\n\nconst UnlockPage = ({\n  loginRoute,\n  title = 'Login',\n  className = 'unlock-page',\n  shouldRenderDefaultCss = true,\n  LedgerLoginButtonText = 'Ledger',\n  description = 'Pick a login method',\n  WalletConnectLoginButtonText = 'Maiar',\n  ExtensionLoginButtonText = 'Extension',\n  WebWalletLoginButtonText = 'Web wallet'\n}: Props) => {\n  const generatedClasses = getGeneratedClasses(\n    className,\n    shouldRenderDefaultCss,\n    {\n      wrapper: `home d-flex flex-fill align-items-center ${wrapperClassName}`,\n      title: 'mb-4',\n      description: 'mb-4',\n      cardContainer: 'm-auto',\n      card: 'card my-4 text-center',\n      cardBody: 'card-body py-4 px-2 px-sm-2 mx-lg-4'\n    }\n  );\n  const { isLoggedIn } = useGetLoginInfo();\n\n  React.useEffect(() => {\n    if (isLoggedIn) {\n      window.location.href = loginRoute;\n    }\n  }, [isLoggedIn]);\n\n  return (\n    <div className={generatedClasses.wrapper}>\n      <div className={generatedClasses.cardContainer}>\n        <div className={generatedClasses.card}>\n          <div className={generatedClasses.cardBody}>\n            <h4 className={generatedClasses.title}>{title}</h4>\n            <p className={generatedClasses.description}>{description}</p>\n            <ExtensionLoginButton\n              callbackRoute={loginRoute}\n              loginButtonText={ExtensionLoginButtonText}\n            />\n            <WebWalletLoginButton\n              callbackRoute={loginRoute}\n              loginButtonText={WebWalletLoginButtonText}\n            />\n            <LedgerLoginButton\n              loginButtonText={LedgerLoginButtonText}\n              callbackRoute={loginRoute}\n            />\n            <WalletConnectLoginButton\n              callbackRoute={loginRoute}\n              loginButtonText={WalletConnectLoginButtonText}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withClassNameWrapper(UnlockPage);\n"],"names":["logoutAction","createAction","loginAction","payload","createDeepEqualSelector","createSelectorCreator","defaultMemoize","isEqual","networkConfigSelector","state","networkConfig","proxySelector","proxy","providerSelector","provider","chainIDSelector","ChainID","chainID","apiProviderSelector","apiProvider","walletConnectBridgeAddressSelector","network","walletConnectBridgeAddress","walletConnectDeepLinkSelector","walletConnectDeepLink","networkSelector","apiNetworkSelector","apiAddress","explorerAddressSelector","explorerAddress","egldLabelSelector","egldLabel","TransactionServerStatusesEnum","TransactionBatchStatusesEnum","LoginMethodsEnum","NotificationTypesEnum","TypesOfSmartContractCallsEnum","EnvironmentsEnum","accountInfoSelector","account","addressSelector","address","accountSelector","accountBalanceSelector","balance","accountNonceSelector","nonce","valueOf","shardSelector","shard","ledgerAccountSelector","ledgerAccount","walletConnectAccountSelector","walletConnectAccount","isAccountLoadingSelector","isAccountLoading","isAccountLoadingErrorSelector","accountLoadingError","loginInfoSelector","loginInfo","loginMethodSelector","loginMethod","isLoggedInSelector","none","Boolean","walletConnectLoginSelector","walletConnectLogin","ledgerLoginSelector","ledgerLogin","walletLoginSelector","walletLogin","loginExpiresAtSelector","loginExpiresAt","getNewLoginExpiresTimestamp","Date","setHours","getHours","optionalRedirect","callbackUrl","shouldRedirect","setTimeout","window","location","pathname","includes","href","getBridgeAddressFromNetwork","walletConnectBridgeAddresses","Math","floor","random","length","initialState","tokenLogin","extensionLogin","loginInfoSlice","createSlice","name","reducers","setLoginMethod","action","setTokenLogin","setTokenLoginSignature","signature","setWalletLogin","setWalletConnectLogin","setLedgerLogin","setLoginExpiresAt","extraReducers","builder","addCase","actions","reducer","whitelistedActions","throttledSetNewToken","throttle","store","dispatch","loginSessionMiddleware","next","type","appState","getState","loginTimestamp","isLoggedIn","now","isExpired","console","log","logout","err","error","emptyAccount","publicKey","accountInfoSlice","setAddress","Address","hex","setAccount","setAccountNonce","setAccountShard","setLedgerAccount","setWalletConnectAccount","setIsAccountLoading","setAccountLoadingError","REHYDRATE","accountInfo","DAPP_INIT_ROUTE","getProviderType","constructor","WalletProvider","wallet","WalletConnectProvider","walletconnect","HWProvider","ledger","ExtensionProvider","extension","EmptyProvider","extra","newWalletProvider","walletAddress","notInitializedError","caller","init","login","options","Error","getAddress","isInitialized","isConnected","sendTransaction","transaction","signTransaction","signTransactions","transactions","signMessage","message","emptyProvider","getProvider","extraActionsSlice","initializeExtraActions","modalsSlice","setTxSubmittedModal","txSubmittedModal","setNotificationModal","notificationModal","clearTxSubmittedModal","undefined","clearNotificationModal","defaultNetwork","id","egldDenomination","decimals","gasPerDataByte","apiTimeout","ProxyProvider","timeout","Number","ApiProvider","networkConfigSlice","initializeNetworkConfig","omit","setChainID","setProvider","defaultTransactionErrorMessage","defaultTransactionSuccessMessage","defaultTransactionProcessingMessage","defaultTransactionSubmittedMessage","signTransactionsSlice","setTransactionsDisplayInfo","sessionId","transactionsDisplayInfo","errorMessage","successMessage","processingMessage","submittedMessage","transactionDuration","clearTransactionsInfoForSessionId","clearTransactionsInfo","TransactionTypesEnum","okInHex","areScCallsSuccessful","scResults","success","forEach","result","data","decoded","Buffer","from","toString","split","hasOkPart","find","part","isContract","receiver","extractedAddress","getAddressFromDataField","isContractAddress","addressIndex","getAddressIndex","parts","MultiESDTNFTTransfer","ESDTNFTTransfer","pendingBatchTransactionsStates","sent","successBatchTransactionsStates","failBatchTransactionsStates","fail","cancelled","timedOut","timedOutBatchTransactionsStates","pendingServerTransactionsStatuses","pending","successServerTransactionsStates","completedServerTransactionsStates","completed","failServerTransactionsStates","invalid","getIsTransactionCompleted","status","getIsTransactionPending","isScCall","isPending","isBatchTransactionPending","isServerTransactionPending","getIsTransactionSuccessful","isBatchTransactionSuccessful","isServerTransactionSuccessful","getIsTransactionFailed","isBatchTransactionFailed","isServerTransactionFailed","getIsTransactionTimedOut","isBatchTransactionTimedOut","base64Regex","isStringBase64","string","test","encodeToBase64","btoa","decodeBase64","atob","isUtf8","str","i","charCodeAt","decodePart","decodedPart","hexPart","trim","getAllStringOccurrences","sourceStr","searchStr","matchAll","RegExp","map","a","index","parseMultiEsdtTransferData","contractCallDataIndex","startsWith","encodedTxCount","rest","txCount","BigNumber","toNumber","itemIndex","txIndex","nftTransaction","token","encodedNonce","esdtTransaction","amount","some","tx","scCallData","scCall","noData","tokenId","getTokenFromData","tokenTransfer","ESDTTransfer","nftTransfer","encodedToken","encodedAmount","replace","e","isTokenTransfer","erdLabel","buildUrlParams","search","urlParams","urlSearchParams","URLSearchParams","params","Object","fromEntries","nextUrlParams","buildReplyUrl","url","entries","URL","origin","parseTransactionAfterSigning","isLedger","version","TransactionVersion","withTxHashSignVersion","TransactionOptions","withTxHashSignOptions","parsedTransaction","toPlainObject","hash","getHash","signedTransactions","transactionsToSign","signTransactionsError","transactionsSlice","updateSignedTransaction","updateSignedTransactions","updateSignedTransactionStatus","transactionHash","areTransactionsSuccessful","every","areTransactionsFailed","setTransactionsToSign","clearSignTransactions","setSignTransactionsError","parsedSignedTransactions","reduce","acc","txTimestamp","expiration","transactionsInfoPersistConfig","key","storage","sessionStorage","transactionsReducer","blacklist","customReducers","persistReducer","transactionsInfo","rootReducer","combineReducers","extraActions","modals","persistConfig","whitelist","localStorageReducers","configureStore","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","PAUSE","PERSIST","PURGE","REGISTER","ignoredPaths","concat","persistor","persistStore","extraActionsSelector","extraActionsInit","createSelector","newTransaction","rawTransaction","parsedData","Transaction","value","Balance","fromString","TransactionPayload","Nonce","gasLimit","GasLimit","gasPrice","GasPrice","transactionsSelectors","signedTransactionsSelector","signTransactionsErrorSelector","pendingSignedTransactionsSelector","txBody","successfulTransactionsSelector","completedTransactionsSelector","failedTransactionsSelector","timedOutTransactionsSelector","transactionsToSignSelector","transactionStatusSelector","_","transactionSessionId","defaultTransactionInfo","transactionsInfoSelectors","transactionDisplayInfoSelector","modalsSliceSelector","txSubmittedModalSelector","notificationModalSelector","getIsLoggedIn","onRedirect","switchTrue","object","defaultValue","obj","keys","cur","canTransformToPublicKey","checkAddress","bech32","addressIsValid","destinationAddress","isValidBach","getNetworkProxy","getApiProvider","getAccountProvider","getAccountProviderType","getChainID","getNetworkConfig","getEgldLabel","getIsProviderEqualTo","comparedProviderType","providerType","loggedIn","Promise","resolve","getAccount","setNonce","getLatestNonce","currentAccountNonce","isNaN","max","getAccountBalance","accountAddress","refreshAccount","setNewAccount","initialized","accountData","isAddressOfMetachain","pubKey","metachainPrefix","pubKeyPrefix","slice","equals","zeroAddress","alloc","fill","getShardOfAddress","hexPubKey","numShards","maskHigh","parseInt","maskLow","lastByteOfPubKey","logarithmicRest","position","minp","maxp","minv","maxv","scale","exp","ledgerErrorCodes","code","DEFAULT_MIN_GAS_LIMIT","configEndpoint","mainnet","testnet","devnet","fallbackConfigurations","gasPriceModifier","defaultGasPrice","defaultGasLimit","denomination","dappInitRoute","walletSignSession","pipe","previous","condition","then","newValue","Function","config","ROUNDING_MODE","ROUND_FLOOR","denominate","input","configDenomination","configDecimals","showLastNonZeroDecimal","addCommas","Token","validation","stringIsInteger","toDenominated","current","bnBalance","isZero","integerPart","decimalPart","bNdecimalPart","decimalPlaces","min","shownDecimalsAreZero","isGreaterThan","substring","formatted","toFormat","formattedBalance","integerPartZero","numericPart","zeroPlaceholders","Array","zeros","join","minAmount","nominate","customDenomination","createBalanceBuilder","TokenType","Fungible","classnames","require","getGeneratedClasses","className","shouldRenderDefaultCss","defaultStyles","defaultClassNames","classNames","wrapperClassName","moment","setItem","expires","String","JSON","stringify","getItem","item","deserializedItem","parse","hasOwnProperty","expired","unix","removeItem","clear","defaultContextValue","DappCoreContext","React","createContext","useStore","createStoreHook","useDispatch","createDispatchHook","useSelector","createSelectorHook","useExtensionLogin","initiateLogin","setIsLoading","getInstance","isSuccessfullyInitialized","warn","encodeURIComponent","callbackRoute","providerLoginData","loginToken","redirectAfterLogin","setError","useState","isLoading","loginFailed","useWebWalletLogin","setMinutes","getMinutes","walletLoginData","loginData","ledgerAppErrorText","failInitializeErrorText","defaultAddressesPerPage","useLedgerLogin","onStartLogin","hwWalletP","accounts","setShowAddressList","fetchAccounts","getAccounts","startIndex","addressesPerPage","setAccounts","statusCode","onConfirmSelectedAddress","selectedAddress","hwWalletProvider","loginUser","dispatchLoginActions","onLoginFailed","setStartIndex","setSelectedAddress","showAddressList","loginType","customMessage","onSelectAddress","newSelectedAddress","onGoToNextPage","onGoToPrevPage","useEffect","useUpdateEffect","effect","dependencies","isInitialMount","useRef","useWalletConnectLogin","generateWcUri","providerRef","walletConnectUri","hasUri","setWcUri","wcUriWithToken","loginProvider","providerHandlers","onClientLogin","handleOnLogin","onClientLogout","handleOnLogout","newProvider","getSignature","hasSignature","loginActionData","logoutRoute","walletConnector","on","clearInterval","heartbeatDisconnectInterval","setInterval","handleHeartbeat","isProviderConnected","connected","method","sendCustomMessage","heartbeatInterval","wcUri","hasWcUri","uriDeepLink","interval","calcTotalFee","minGasLimit","totalFee","fee","operations","calculateFeeLimit","getGasLimit","getGasPrice","getData","chainId","plus","redirectAfterSign","sessionInformation","networkConstants","accountBalance","storeChainId","transactionsPayload","isArray","bNtotalFee","bNbalance","stringIsFloat","hasSufficientFunds","minus","notificationPayload","warning","iconClassName","title","description","hasValidChainId","signTransactionsPayload","transformAndSignTransactions","validatedReceiver","addr","ErrorCodesEnum","invalidReceiver","transactionsChainId","sender","sendTransactions","txToSign","areComplexTransactions","getPrototypeOf","useTrackTransactionStatus","transactionId","onSuccess","onFail","onCancelled","onTimedOut","onCompleted","transactionsBatch","isFailed","isTimedOut","isSuccessful","isCompleted","isCancelled","useGetPendingTransactions","pendingTransactions","pendingTransactionsArray","hasPendingTransactions","useGetFailedTransactions","failedTransactions","failedTransactionsArray","hasFailedTransactions","useGetSuccessfulTransactions","successfulTransactions","successfulTransactionsArray","hasSuccessfulTransactions","multiTxData","useParseMultiEsdtTransferData","parsedTransactionsByDataField","setParsedTransactions","allTransactions","setAllTransactions","addTransactionDataToParsedInfo","txInfo","existing","getTxInfoByDataField","multiTransactionData","extractTransactionESDTData","transactionIndex","multiTxs","trx","idx","newTx","push","getReceiver","useGetActiveTransactionsStatus","timedOutTransactions","completedTransactions","hasActiveTransactions","useGetCompletedTransactions","completedTransactionsArray","hasCompletedTransactions","sendSignedTransactions","promises","all","response","txHash","getTransactionsByHashes","hashes","axios","get","withScResults","responseData","previousStatus","txOnNetwork","txResponse","invalidTransaction","results","hasStatusChanged","ProviderInitializer","setExtensionProvider","tryAuthenticateWalletUser","fetchAccount","initWalletLoginProvider","refreshChainID","initializeProvider","setLedgerProvider","sendSignedTransactionsAsync","getTransactionsByHash","completedTransactionsDelay","OverrideDefaultBehaviourContext","TransactionSender","handleSendTransactions","sessionIds","isSessionIdSigned","signed","shouldSendCurrentSession","sendingRef","transactionsToSend","transactionObject","Signature","applySignature","responseHashes","newStatus","newTransactions","submittedModalPayload","clearSignInfo","history","pushState","document","useContext","TransactionStatusTracker","transactionPayload","intervalRef","isFetchingStatusRef","retriesRef","timeoutRefs","manageTimedOutTransactions","checkTransactionStatus","serverTransactions","retriesForThisHash","isScCallCompleted","resultWithError","scResult","returnMessage","TransactionsTracker","Fragment","getServerConfiguration","environment","useGetNetworkConfig","useGetNotification","notification","clearNotification","useGetTransactionDisplayInfo","toastId","useParseSignedTransactions","searchData","qs","signSessionId","getTransactionsFromWalletUrl","useSignTransactions","signTransactionsWithProvider","signingDisabled","values","onCancel","savedCallback","cancelAction","onAbort","proxyAccount","latestNonce","errMessage","hasTransactions","useGetSignedTransactions","swr","fetcher","fetch","res","json","useGetTokenDetails","tokenDenomination","tokenLabel","tokenAvatar","useSwr","selectedToken","assets","svgUrl","useSignTransactionsWithLedger","sign","currentTransaction","setWaitingForDevice","signedTx","newSignedTx","currentStep","newSignedTransactions","setSignedTransactions","isLastTransaction","setCurrentStep","exising","reset","setCurrentTransaction","waitingForDevice","extractTransactionsInfo","dataField","transactionTokenInfo","isTokenTransaction","signTx","isFirst","continueWithoutSigning","endsWith","onSignTransaction","onNext","nextStep","onPrev","useGetSignTransactionsError","useGetAccountInfo","useGetLoginInfo","useGetAccountProvider","getAccountShard","AppInitializer","initializeApp","initializeCustomExtraActions","initializeNetwork","setInitialized","fallbackConfig","customNetworkConfig","serverConfig","children","onLogin","word","DappProvider","signWithoutSending","memoizedSendSignedTransactionsAsync","useCallback","memoizedGetTransactionsByHash","Provider","context","PersistGate","loading","AuthenticatedRoutesWrapper","routes","unlockRoute","authenticatedRoutesRef","filter","route","authenticatedRoute","isOnAuthenticatedRoute","path","TransactionParameter","functionName","inputParameters","outputParameters","withClassNameWrapper","Component","props","denominateInvalid","denominateValid","showLabel","denominatedValue","valueParts","hasNoDecimals","isNotZero","Denominate","DenominateWrapper","denominateProps","fontawesomeFreeSolidIcons","ReactFontawesome","ExplorerLink","page","text","target","FontAwesomeIcon","icon","icons","faSearch","ExtensionLoginButton","buttonClassName","loginButtonText","onInitiateLogin","classes","wrapper","loginText","noExtensionButtonWrapper","noExtensionButtonContent","noExtensionButtonTitle","noExtensionButtonIcon","handleLogin","elrondWallet","rel","faArrowRight","onClick","ReactBootstrap","ModalContainer","noSpacer","onClose","Modal","show","backdrop","onHide","animation","centered","size","faTimes","PageState","iconClass","dataTestId","iconBgClass","iconSize","generatedClasses","iconContainer","trimHash","keep","start","end","noBalance","AddressRow","setBalance","handleChange","checked","fetchBalance","onChange","role","htmlFor","ledgerWaitingText","AddressTable","cardBody","tableWrapper","tableContent","tableHeader","tableHeaderText","buttonsWrapper","arrowButton","confirmButton","faCircleNotch","disabled","faChevronLeft","faChevronRight","ConfirmAddress","noBorder","LedgerConnect","connectPageContent","LedgerLogo","LedgerLoginContainer","wrapContentInsideModal","spinner","getContent","LedgerLoginButton","showLoginModal","setShowLoginModal","handleOpenModal","handleCloseModal","notificationTypesToIcons","faExclamationTriangle","defaultIcon","NotificationModal","showModal","onDone","SignWithExtensionModal","handleClose","closeBtn","close","preventDefault","freeSolidIcons","faHourglass","Simple","Combined","small","getIdentifierWithoutNonce","identifier","tokenParts","getDetails","isEgldTransfer","symbol","label","EgldIcon","faGem","TokenDetails","render","process","env","NODE_ENV","combined","allOccurences","TransactionData","highlight","output","encodedScCall","remainingDataFields","SignStep","transactionData","onCloseClick","signBtnLabel","denominatedAmount","getValue","formGroup","formLabel","contentWrapper","tokenWrapper","tokenValue","tokenAmountLabel","tokenAmountValue","dataFormGroup","cancelButton","signButton","tokenlabel","Icon","Label","Symbol","SignWithLedgerModal","container","SignWithWalletConnectModal","hasMultipleTransactions","SignTransactionsModals","CustomConfirmScreens","signError","signProps","Ledger","WalletConnect","Extension","Extra","SessionStorageKeysEnum","setToastsIdsToStorage","ids","toasts","getToastsIdsFromStorage","toastsIds","isCrossShardTransaction","receiverAddress","senderShard","senderAddress","receiverShard","pubkey","IconState","half","Progress","progress","done","ref","removeTxFromSession","toastProgress","hasSessionStoredTx","add","saveToSession","getInitialData","totalSeconds","endTime","startTime","remaining","currentRemaining","percentRemaining","setPercentRemaining","maxPercent","perc","int","duration","toFixed","asMilliseconds","decrement","style","width","fallbackCopyTextToClipboard","textArea","createElement","body","appendChild","focus","select","execCommand","removeChild","copyTextToClipboard","navigator","clipboard","writeText","CopyButton","copyResult","setCopyResut","handleCopyToClipboard","stopPropagation","noSpaces","faCopy","faCheck","Trim","overflow","setOverflow","trimRef","hiddenTextRef","listener","debounce","diff","offsetWidth","addWindowResizeListener","addEventListener","removeEventListener","ceil","TxDetails","statusTransactions","iconSuccess","iconFailed","trimContainer","iconPending","iconSuccessData","iconFailedData","iconPendingData","faSpinner","iconData","iconSrc","averageTxDurationMs","crossShardRounds","TransactionToast","withTxNonce","shouldRender","setShouldRender","transactionDisplayInfo","accountShard","timedOutMessage","isSameShard","useMemo","prevTxIsSameShard","shardAdjustedDuration","toastFooter","details","toastContainer","toastHeader","closeButton","successToastData","hasCloseButton","pendingToastData","failToastData","timedOutToastData","toatsOptionsData","toastDataState","handleDeleteToast","Toast","minWidth","TransactionsToastList","setToastsIds","pendingTransactionsFromStore","signedTransactionsFromStore","pendingTransactionsToRender","signedTransactionsToRender","toast","mappedToastsList","currentTx","mapPendingSignedTransactions","newToasts","hasToast","fetchSessionStorageToasts","sessionStorageToastsIds","saveSessionStorageToasts","shouldSaveLocalToasts","platform","qrcode","WalletConnectLoginContainer","lead","shouldLoginUser","initLoginWithWalletConnect","qrCodeSvg","setQrCodeSvg","isMobileDevice","os","family","card","qrCodeSvgContainer","leadText","mobileLoginButton","generateQRCode","QRCode","svg","content","root","dangerouslySetInnerHTML","__html","height","Lighting","WalletConnectLoginButton","WebWalletLoginButton","UnlockPage","loginRoute","LedgerLoginButtonText","WalletConnectLoginButtonText","ExtensionLoginButtonText","WebWalletLoginButtonText","cardContainer"],"mappings":"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"}