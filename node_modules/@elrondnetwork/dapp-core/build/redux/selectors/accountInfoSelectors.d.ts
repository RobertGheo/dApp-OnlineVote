/// <reference types="redux-persist/types/persistreducer" />
import { RootState } from '../store';
export declare const accountInfoSelector: (state: RootState) => import("../slices").AccountInfoSliceType;
export declare const addressSelector: import("reselect").OutputSelector<import("redux").EmptyObject & {
    account: import("../slices").AccountInfoSliceType;
    networkConfig: import("../slices").NetworkConfigStateType;
    extraActions: import("../..").ExtraActionsType;
    loginInfo: import("../slices").LoginInfoStateType;
    modals: import("../slices").ModalsSliceState;
    transactions: import("../slices").TransactionsSliceStateType & import("redux-persist/es/persistReducer").PersistPartial;
    transactionsInfo: import("../slices").StateType & import("redux-persist/es/persistReducer").PersistPartial;
} & import("redux-persist/es/persistReducer").PersistPartial, string, (res: import("../slices").AccountInfoSliceType) => string>;
export declare const accountSelector: import("reselect").OutputSelector<import("redux").EmptyObject & {
    account: import("../slices").AccountInfoSliceType;
    networkConfig: import("../slices").NetworkConfigStateType;
    extraActions: import("../..").ExtraActionsType;
    loginInfo: import("../slices").LoginInfoStateType;
    modals: import("../slices").ModalsSliceState;
    transactions: import("../slices").TransactionsSliceStateType & import("redux-persist/es/persistReducer").PersistPartial;
    transactionsInfo: import("../slices").StateType & import("redux-persist/es/persistReducer").PersistPartial;
} & import("redux-persist/es/persistReducer").PersistPartial, import("../slices").AccountType, (res: import("../slices").AccountInfoSliceType) => import("../slices").AccountType>;
export declare const accountBalanceSelector: import("reselect").OutputSelector<import("redux").EmptyObject & {
    account: import("../slices").AccountInfoSliceType;
    networkConfig: import("../slices").NetworkConfigStateType;
    extraActions: import("../..").ExtraActionsType;
    loginInfo: import("../slices").LoginInfoStateType;
    modals: import("../slices").ModalsSliceState;
    transactions: import("../slices").TransactionsSliceStateType & import("redux-persist/es/persistReducer").PersistPartial;
    transactionsInfo: import("../slices").StateType & import("redux-persist/es/persistReducer").PersistPartial;
} & import("redux-persist/es/persistReducer").PersistPartial, string, (res: import("../slices").AccountType) => string>;
export declare const accountNonceSelector: import("reselect").OutputSelector<import("redux").EmptyObject & {
    account: import("../slices").AccountInfoSliceType;
    networkConfig: import("../slices").NetworkConfigStateType;
    extraActions: import("../..").ExtraActionsType;
    loginInfo: import("../slices").LoginInfoStateType;
    modals: import("../slices").ModalsSliceState;
    transactions: import("../slices").TransactionsSliceStateType & import("redux-persist/es/persistReducer").PersistPartial;
    transactionsInfo: import("../slices").StateType & import("redux-persist/es/persistReducer").PersistPartial;
} & import("redux-persist/es/persistReducer").PersistPartial, number, (res: import("../slices").AccountType) => number>;
export declare const shardSelector: import("reselect").OutputSelector<import("redux").EmptyObject & {
    account: import("../slices").AccountInfoSliceType;
    networkConfig: import("../slices").NetworkConfigStateType;
    extraActions: import("../..").ExtraActionsType;
    loginInfo: import("../slices").LoginInfoStateType;
    modals: import("../slices").ModalsSliceState;
    transactions: import("../slices").TransactionsSliceStateType & import("redux-persist/es/persistReducer").PersistPartial;
    transactionsInfo: import("../slices").StateType & import("redux-persist/es/persistReducer").PersistPartial;
} & import("redux-persist/es/persistReducer").PersistPartial, number | undefined, (res: import("../slices").AccountInfoSliceType) => number | undefined>;
export declare const ledgerAccountSelector: import("reselect").OutputSelector<import("redux").EmptyObject & {
    account: import("../slices").AccountInfoSliceType;
    networkConfig: import("../slices").NetworkConfigStateType;
    extraActions: import("../..").ExtraActionsType;
    loginInfo: import("../slices").LoginInfoStateType;
    modals: import("../slices").ModalsSliceState;
    transactions: import("../slices").TransactionsSliceStateType & import("redux-persist/es/persistReducer").PersistPartial;
    transactionsInfo: import("../slices").StateType & import("redux-persist/es/persistReducer").PersistPartial;
} & import("redux-persist/es/persistReducer").PersistPartial, import("../slices").LedgerAccountType | null, (res: import("../slices").AccountInfoSliceType) => import("../slices").LedgerAccountType | null>;
export declare const walletConnectAccountSelector: import("reselect").OutputSelector<import("redux").EmptyObject & {
    account: import("../slices").AccountInfoSliceType;
    networkConfig: import("../slices").NetworkConfigStateType;
    extraActions: import("../..").ExtraActionsType;
    loginInfo: import("../slices").LoginInfoStateType;
    modals: import("../slices").ModalsSliceState;
    transactions: import("../slices").TransactionsSliceStateType & import("redux-persist/es/persistReducer").PersistPartial;
    transactionsInfo: import("../slices").StateType & import("redux-persist/es/persistReducer").PersistPartial;
} & import("redux-persist/es/persistReducer").PersistPartial, string | null, (res: import("../slices").AccountInfoSliceType) => string | null>;
export declare const isAccountLoadingSelector: import("reselect").OutputSelector<import("redux").EmptyObject & {
    account: import("../slices").AccountInfoSliceType;
    networkConfig: import("../slices").NetworkConfigStateType;
    extraActions: import("../..").ExtraActionsType;
    loginInfo: import("../slices").LoginInfoStateType;
    modals: import("../slices").ModalsSliceState;
    transactions: import("../slices").TransactionsSliceStateType & import("redux-persist/es/persistReducer").PersistPartial;
    transactionsInfo: import("../slices").StateType & import("redux-persist/es/persistReducer").PersistPartial;
} & import("redux-persist/es/persistReducer").PersistPartial, boolean, (res: import("../slices").AccountInfoSliceType) => boolean>;
export declare const isAccountLoadingErrorSelector: import("reselect").OutputSelector<import("redux").EmptyObject & {
    account: import("../slices").AccountInfoSliceType;
    networkConfig: import("../slices").NetworkConfigStateType;
    extraActions: import("../..").ExtraActionsType;
    loginInfo: import("../slices").LoginInfoStateType;
    modals: import("../slices").ModalsSliceState;
    transactions: import("../slices").TransactionsSliceStateType & import("redux-persist/es/persistReducer").PersistPartial;
    transactionsInfo: import("../slices").StateType & import("redux-persist/es/persistReducer").PersistPartial;
} & import("redux-persist/es/persistReducer").PersistPartial, string | null, (res: import("../slices").AccountInfoSliceType) => string | null>;
