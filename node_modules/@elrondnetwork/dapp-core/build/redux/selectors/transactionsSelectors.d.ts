/// <reference types="redux-persist/types/persistreducer" />
import { Transaction } from '@elrondnetwork/erdjs/out';
import { SignedTransactionsType } from 'types/transactions';
import { RootState } from '../store';
export interface TransactionsToSignReturnType {
    callbackRoute: string;
    sessionId: string;
    redirectAfterSign: boolean;
    transactions: Transaction[];
    sessionInformation?: any;
}
export declare const transactionsSelectors: (state: RootState) => import("../slices").TransactionsSliceStateType & import("redux-persist/es/persistReducer").PersistPartial;
export declare const signedTransactionsSelector: import("reselect").OutputSelector<import("redux").EmptyObject & {
    account: import("../slices").AccountInfoSliceType;
    networkConfig: import("../slices").NetworkConfigStateType;
    extraActions: import("../..").ExtraActionsType;
    loginInfo: import("../slices").LoginInfoStateType;
    modals: import("../slices").ModalsSliceState;
    transactions: import("../slices").TransactionsSliceStateType & import("redux-persist/es/persistReducer").PersistPartial;
    transactionsInfo: import("../slices").StateType & import("redux-persist/es/persistReducer").PersistPartial;
} & import("redux-persist/es/persistReducer").PersistPartial, SignedTransactionsType, (res: import("../slices").TransactionsSliceStateType & import("redux-persist/es/persistReducer").PersistPartial) => SignedTransactionsType>;
export declare const signTransactionsErrorSelector: import("reselect").OutputSelector<import("redux").EmptyObject & {
    account: import("../slices").AccountInfoSliceType;
    networkConfig: import("../slices").NetworkConfigStateType;
    extraActions: import("../..").ExtraActionsType;
    loginInfo: import("../slices").LoginInfoStateType;
    modals: import("../slices").ModalsSliceState;
    transactions: import("../slices").TransactionsSliceStateType & import("redux-persist/es/persistReducer").PersistPartial;
    transactionsInfo: import("../slices").StateType & import("redux-persist/es/persistReducer").PersistPartial;
} & import("redux-persist/es/persistReducer").PersistPartial, string | null, (res: import("../slices").TransactionsSliceStateType & import("redux-persist/es/persistReducer").PersistPartial) => string | null>;
export declare const pendingSignedTransactionsSelector: import("reselect").OutputSelector<import("redux").EmptyObject & {
    account: import("../slices").AccountInfoSliceType;
    networkConfig: import("../slices").NetworkConfigStateType;
    extraActions: import("../..").ExtraActionsType;
    loginInfo: import("../slices").LoginInfoStateType;
    modals: import("../slices").ModalsSliceState;
    transactions: import("../slices").TransactionsSliceStateType & import("redux-persist/es/persistReducer").PersistPartial;
    transactionsInfo: import("../slices").StateType & import("redux-persist/es/persistReducer").PersistPartial;
} & import("redux-persist/es/persistReducer").PersistPartial, {}, (res: SignedTransactionsType) => {}>;
export declare const successfulTransactionsSelector: import("reselect").OutputSelector<import("redux").EmptyObject & {
    account: import("../slices").AccountInfoSliceType;
    networkConfig: import("../slices").NetworkConfigStateType;
    extraActions: import("../..").ExtraActionsType;
    loginInfo: import("../slices").LoginInfoStateType;
    modals: import("../slices").ModalsSliceState;
    transactions: import("../slices").TransactionsSliceStateType & import("redux-persist/es/persistReducer").PersistPartial;
    transactionsInfo: import("../slices").StateType & import("redux-persist/es/persistReducer").PersistPartial;
} & import("redux-persist/es/persistReducer").PersistPartial, {}, (res: SignedTransactionsType) => {}>;
export declare const completedTransactionsSelector: import("reselect").OutputSelector<import("redux").EmptyObject & {
    account: import("../slices").AccountInfoSliceType;
    networkConfig: import("../slices").NetworkConfigStateType;
    extraActions: import("../..").ExtraActionsType;
    loginInfo: import("../slices").LoginInfoStateType;
    modals: import("../slices").ModalsSliceState;
    transactions: import("../slices").TransactionsSliceStateType & import("redux-persist/es/persistReducer").PersistPartial;
    transactionsInfo: import("../slices").StateType & import("redux-persist/es/persistReducer").PersistPartial;
} & import("redux-persist/es/persistReducer").PersistPartial, {}, (res: SignedTransactionsType) => {}>;
export declare const failedTransactionsSelector: import("reselect").OutputSelector<import("redux").EmptyObject & {
    account: import("../slices").AccountInfoSliceType;
    networkConfig: import("../slices").NetworkConfigStateType;
    extraActions: import("../..").ExtraActionsType;
    loginInfo: import("../slices").LoginInfoStateType;
    modals: import("../slices").ModalsSliceState;
    transactions: import("../slices").TransactionsSliceStateType & import("redux-persist/es/persistReducer").PersistPartial;
    transactionsInfo: import("../slices").StateType & import("redux-persist/es/persistReducer").PersistPartial;
} & import("redux-persist/es/persistReducer").PersistPartial, {}, (res: SignedTransactionsType) => {}>;
export declare const timedOutTransactionsSelector: import("reselect").OutputSelector<import("redux").EmptyObject & {
    account: import("../slices").AccountInfoSliceType;
    networkConfig: import("../slices").NetworkConfigStateType;
    extraActions: import("../..").ExtraActionsType;
    loginInfo: import("../slices").LoginInfoStateType;
    modals: import("../slices").ModalsSliceState;
    transactions: import("../slices").TransactionsSliceStateType & import("redux-persist/es/persistReducer").PersistPartial;
    transactionsInfo: import("../slices").StateType & import("redux-persist/es/persistReducer").PersistPartial;
} & import("redux-persist/es/persistReducer").PersistPartial, {}, (res: SignedTransactionsType) => {}>;
export declare const transactionsToSignSelector: import("reselect").OutputSelector<import("redux").EmptyObject & {
    account: import("../slices").AccountInfoSliceType;
    networkConfig: import("../slices").NetworkConfigStateType;
    extraActions: import("../..").ExtraActionsType;
    loginInfo: import("../slices").LoginInfoStateType;
    modals: import("../slices").ModalsSliceState;
    transactions: import("../slices").TransactionsSliceStateType & import("redux-persist/es/persistReducer").PersistPartial;
    transactionsInfo: import("../slices").StateType & import("redux-persist/es/persistReducer").PersistPartial;
} & import("redux-persist/es/persistReducer").PersistPartial, TransactionsToSignReturnType | null, (res: import("../slices").TransactionsSliceStateType & import("redux-persist/es/persistReducer").PersistPartial) => TransactionsToSignReturnType | null>;
export declare const transactionStatusSelector: import("reselect").OutputParametricSelector<import("redux").EmptyObject & {
    account: import("../slices").AccountInfoSliceType;
    networkConfig: import("../slices").NetworkConfigStateType;
    extraActions: import("../..").ExtraActionsType;
    loginInfo: import("../slices").LoginInfoStateType;
    modals: import("../slices").ModalsSliceState;
    transactions: import("../slices").TransactionsSliceStateType & import("redux-persist/es/persistReducer").PersistPartial;
    transactionsInfo: import("../slices").StateType & import("redux-persist/es/persistReducer").PersistPartial;
} & import("redux-persist/es/persistReducer").PersistPartial, string | null, import("../../types/transactions").SignedTransactionsBodyType, (res1: SignedTransactionsType, res2: string | null) => import("../../types/transactions").SignedTransactionsBodyType>;
