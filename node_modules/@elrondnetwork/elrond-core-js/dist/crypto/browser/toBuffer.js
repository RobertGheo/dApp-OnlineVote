'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var BigNumber = require('bignumber.js');

var toBuffer = function toBuffer(v) {
  if (Buffer.isBuffer(v)) return v;

  if (v === null || v === undefined) {
    throw new Error('toBuffer called with empty value');
  }

  if (Array.isArray(v)) {
    v = Buffer.from(v);
  } else if (typeof v === 'string') {
    if (isHexString(v)) {
      v = Buffer.from(padToEven(stripHexPrefix(v)), 'hex');
    } else {
      v = Buffer.from(v);
    }
  } else if (typeof v === 'number') {
    v = intToBuffer(v);
  } else if (isBigNumber(v)) {
    v = Buffer.from(padToEven(v.toString(16)), 'hex');
  } else if (v.toArray) {
    v = Buffer.from(v.toArray());
  } else if (v.subarray) {
    v = Buffer.from(v);
  } else {
    throw new Error('invalid type');
  }

  return v;
};

var stripHexPrefix = function stripHexPrefix(str) {
  if (typeof str !== 'string') {
    return str;
  }

  return isHexPrefixed(str) ? str.slice(2) : str;
};

var isHexPrefixed = function isHexPrefixed(str) {
  if (typeof str !== 'string') {
    throw new Error("[is-hex-prefixed] value must be type 'string', is currently type " + (0, _typeof2["default"])(str) + ", while checking isHexPrefixed.");
  }

  return str.slice(0, 2) === '0x';
};

function isHexString(value, length) {
  if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {
    return false;
  }

  if (length && value.length !== 2 + 2 * length) {
    return false;
  }

  return true;
}

var padToEven = function padToEven(value) {
  if (typeof value !== 'string') {
    throw new Error('padToEven only support string');
  }

  if (value.length % 2) {
    value = '0' + a;
  }

  return value;
};

var intToBuffer = function intToBuffer(i) {
  var hex = intToHex(i);
  return new Buffer(hex.slice(2), 'hex');
}; // returns hex string from int


var intToHex = function intToHex(i) {
  var hex = i.toString(16); // eslint-disable-line

  return '0x' + padToEven(hex);
};

var isBigNumber = function isBigNumber(obj) {
  return obj instanceof BigNumber || obj && obj.constructor && obj.constructor.name === 'BigNumber';
};

module.exports = toBuffer;