'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var bls = require('@elrondnetwork/bls-wasm');

var init =
/*#__PURE__*/
function () {
  var _ref = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee() {
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return bls.init(bls.BLS12_381);

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function init() {
    return _ref.apply(this, arguments);
  };
}();

var generatePairFromSeed = function generatePairFromSeed(privateKey) {
  var sec = new bls.SecretKey();
  sec.setLittleEndian(Uint8Array.from(Buffer.from(privateKey, 'hex')));
  var pub = sec.getPublicKey();
  return {
    publicKey: Buffer.from(pub.serialize()).toString('hex'),
    privateKey: Buffer.from(sec.serialize()).toString('hex')
  };
};

var sign = function sign(message, privateKey) {
  var sec = new bls.SecretKey();
  sec.setLittleEndian(Uint8Array.from(Buffer.from(privateKey, 'hex')));
  var msg = Uint8Array.from(Buffer.from(message, 'hex'));
  return Buffer.from(sec.sign(msg).serialize()).toString('hex');
};

module.exports = {
  generatePairFromSeed: generatePairFromSeed,
  sign: sign,
  init: init
};