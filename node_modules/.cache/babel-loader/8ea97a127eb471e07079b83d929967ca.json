{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StrictChecker = void 0;\n\nconst errors = __importStar(require(\"../errors\"));\n/**\n * An interaction checker that aims to be as strict as possible.\n * It is designed to catch programmer errors such as:\n *  - incorrect types of contract call arguments\n *  - errors related to calling \"non-payable\" functions with some value provided\n *  - gas estimation errors (not yet implemented)\n */\n\n\nclass StrictChecker {\n  checkInteraction(interaction) {\n    let definition = interaction.getEndpoint();\n    this.checkPayable(interaction, definition);\n    this.checkArguments(interaction, definition);\n  }\n\n  checkPayable(interaction, definition) {\n    let hasValue = interaction.getValue().isSet();\n    let isPayableInEGLD = definition.modifiers.isPayableInEGLD();\n\n    if (hasValue && !isPayableInEGLD) {\n      throw new errors.ErrContractInteraction(\"cannot send EGLD value to non-payable\");\n    }\n  }\n\n  checkArguments(interaction, definition) {\n    let formalArguments = definition.input;\n    let actualArguments = interaction.getArguments();\n    let numFormalArguments = formalArguments.length;\n    let numActualArguments = actualArguments.length;\n\n    if (numFormalArguments != numActualArguments) {\n      throw new errors.ErrContractInteraction(`bad arguments, expected: ${numFormalArguments}, got: ${numActualArguments}`);\n    } // TODO: discuss again, possibly redesign the handling of covariance / contravariance.\n\n\n    for (let i = 0; i < numFormalArguments; i++) {\n      let expectedType = formalArguments[i].type;\n      let argument = actualArguments[i];\n      let actualType = argument.getType(); // isAssignableFrom() is responsible to handle covariance and contravariance (depending on the class that overrides it).\n\n      let ok = expectedType.isAssignableFrom(actualType);\n\n      if (!ok) {\n        throw new errors.ErrContractInteraction(`type mismatch at index ${i}, expected: ${expectedType}, got: ${actualType}`);\n      }\n    }\n  }\n\n}\n\nexports.StrictChecker = StrictChecker;","map":{"version":3,"sources":["../../src/smartcontracts/strictChecker.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAA,MAAA,GAAA,YAAA,CAAA,OAAA,CAAA,WAAA,CAAA,CAAA;AAKA;;;;;;AAMG;;;AACH,MAAa,aAAb,CAA0B;AACtB,EAAA,gBAAgB,CAAC,WAAD,EAAyB;AACrC,QAAI,UAAU,GAAG,WAAW,CAAC,WAAZ,EAAjB;AAEA,SAAK,YAAL,CAAkB,WAAlB,EAA+B,UAA/B;AACA,SAAK,cAAL,CAAoB,WAApB,EAAiC,UAAjC;AACH;;AAEO,EAAA,YAAY,CAAC,WAAD,EAA2B,UAA3B,EAAyD;AACzE,QAAI,QAAQ,GAAG,WAAW,CAAC,QAAZ,GAAuB,KAAvB,EAAf;AACA,QAAI,eAAe,GAAG,UAAU,CAAC,SAAX,CAAqB,eAArB,EAAtB;;AAEA,QAAI,QAAQ,IAAI,CAAC,eAAjB,EAAkC;AAC9B,YAAM,IAAI,MAAM,CAAC,sBAAX,CAAkC,uCAAlC,CAAN;AACH;AACJ;;AAEO,EAAA,cAAc,CAAC,WAAD,EAA2B,UAA3B,EAAyD;AAC3E,QAAI,eAAe,GAAG,UAAU,CAAC,KAAjC;AACA,QAAI,eAAe,GAAG,WAAW,CAAC,YAAZ,EAAtB;AACA,QAAI,kBAAkB,GAAG,eAAe,CAAC,MAAzC;AACA,QAAI,kBAAkB,GAAG,eAAe,CAAC,MAAzC;;AAEA,QAAI,kBAAkB,IAAI,kBAA1B,EAA8C;AAC1C,YAAM,IAAI,MAAM,CAAC,sBAAX,CAAkC,4BAA4B,kBAAkB,UAAU,kBAAkB,EAA5G,CAAN;AACH,KAR0E,CAU3E;;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,kBAApB,EAAwC,CAAC,EAAzC,EAA6C;AACzC,UAAI,YAAY,GAAG,eAAe,CAAC,CAAD,CAAf,CAAmB,IAAtC;AACA,UAAI,QAAQ,GAAG,eAAe,CAAC,CAAD,CAA9B;AACA,UAAI,UAAU,GAAG,QAAQ,CAAC,OAAT,EAAjB,CAHyC,CAIzC;;AACA,UAAI,EAAE,GAAG,YAAY,CAAC,gBAAb,CAA8B,UAA9B,CAAT;;AAEA,UAAI,CAAC,EAAL,EAAS;AACL,cAAM,IAAI,MAAM,CAAC,sBAAX,CAAkC,0BAA0B,CAAC,eAAe,YAAY,UAAU,UAAU,EAA5G,CAAN;AACH;AACJ;AACJ;;AAxCqB;;AAA1B,OAAA,CAAA,aAAA,GAAA,aAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StrictChecker = void 0;\nconst errors = __importStar(require(\"../errors\"));\n/**\n * An interaction checker that aims to be as strict as possible.\n * It is designed to catch programmer errors such as:\n *  - incorrect types of contract call arguments\n *  - errors related to calling \"non-payable\" functions with some value provided\n *  - gas estimation errors (not yet implemented)\n */\nclass StrictChecker {\n    checkInteraction(interaction) {\n        let definition = interaction.getEndpoint();\n        this.checkPayable(interaction, definition);\n        this.checkArguments(interaction, definition);\n    }\n    checkPayable(interaction, definition) {\n        let hasValue = interaction.getValue().isSet();\n        let isPayableInEGLD = definition.modifiers.isPayableInEGLD();\n        if (hasValue && !isPayableInEGLD) {\n            throw new errors.ErrContractInteraction(\"cannot send EGLD value to non-payable\");\n        }\n    }\n    checkArguments(interaction, definition) {\n        let formalArguments = definition.input;\n        let actualArguments = interaction.getArguments();\n        let numFormalArguments = formalArguments.length;\n        let numActualArguments = actualArguments.length;\n        if (numFormalArguments != numActualArguments) {\n            throw new errors.ErrContractInteraction(`bad arguments, expected: ${numFormalArguments}, got: ${numActualArguments}`);\n        }\n        // TODO: discuss again, possibly redesign the handling of covariance / contravariance.\n        for (let i = 0; i < numFormalArguments; i++) {\n            let expectedType = formalArguments[i].type;\n            let argument = actualArguments[i];\n            let actualType = argument.getType();\n            // isAssignableFrom() is responsible to handle covariance and contravariance (depending on the class that overrides it).\n            let ok = expectedType.isAssignableFrom(actualType);\n            if (!ok) {\n                throw new errors.ErrContractInteraction(`type mismatch at index ${i}, expected: ${expectedType}, got: ${actualType}`);\n            }\n        }\n    }\n}\nexports.StrictChecker = StrictChecker;\n//# sourceMappingURL=strictChecker.js.map"]},"metadata":{},"sourceType":"script"}