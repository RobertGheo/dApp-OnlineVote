{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Receipt = exports.TransactionOnNetworkType = exports.TransactionOnNetwork = void 0;\n\nconst address_1 = require(\"./address\");\n\nconst balance_1 = require(\"./balance\");\n\nconst networkParams_1 = require(\"./networkParams\");\n\nconst nonce_1 = require(\"./nonce\");\n\nconst signature_1 = require(\"./signature\");\n\nconst transactionPayload_1 = require(\"./transactionPayload\");\n\nconst hash_1 = require(\"./hash\");\n\nconst transaction_1 = require(\"./transaction\");\n\nconst smartContractResults_1 = require(\"./smartcontracts/smartContractResults\");\n/**\n * A plain view of a transaction, as queried from the Network.\n */\n\n\nclass TransactionOnNetwork {\n  constructor(init) {\n    this.type = new TransactionOnNetworkType();\n    this.nonce = new nonce_1.Nonce(0);\n    this.round = 0;\n    this.epoch = 0;\n    this.value = balance_1.Balance.Zero();\n    this.receiver = new address_1.Address();\n    this.sender = new address_1.Address();\n    this.gasPrice = new networkParams_1.GasPrice(0);\n    this.gasLimit = new networkParams_1.GasLimit(0);\n    this.data = new transactionPayload_1.TransactionPayload();\n    this.signature = signature_1.Signature.empty();\n    this.status = transaction_1.TransactionStatus.createUnknown();\n    this.hyperblockNonce = new nonce_1.Nonce(0);\n    this.hyperblockHash = hash_1.Hash.empty();\n    this.receipt = new Receipt();\n    this.results = smartContractResults_1.SmartContractResults.empty();\n    Object.assign(this, init);\n  }\n\n  static fromHttpResponse(response) {\n    let transactionOnNetwork = new TransactionOnNetwork();\n    transactionOnNetwork.type = new TransactionOnNetworkType(response.type || \"\");\n    transactionOnNetwork.nonce = new nonce_1.Nonce(response.nonce || 0);\n    transactionOnNetwork.round = response.round;\n    transactionOnNetwork.epoch = response.epoch || 0;\n    transactionOnNetwork.value = balance_1.Balance.fromString(response.value);\n    transactionOnNetwork.sender = address_1.Address.fromBech32(response.sender);\n    transactionOnNetwork.receiver = address_1.Address.fromBech32(response.receiver);\n    transactionOnNetwork.gasPrice = new networkParams_1.GasPrice(response.gasPrice);\n    transactionOnNetwork.gasLimit = new networkParams_1.GasLimit(response.gasLimit);\n    transactionOnNetwork.data = transactionPayload_1.TransactionPayload.fromEncoded(response.data);\n    transactionOnNetwork.status = new transaction_1.TransactionStatus(response.status);\n    transactionOnNetwork.hyperblockNonce = new nonce_1.Nonce(response.hyperblockNonce || 0);\n    transactionOnNetwork.hyperblockHash = new hash_1.Hash(response.hyperblockHash);\n    transactionOnNetwork.receipt = Receipt.fromHttpResponse(response.receipt || {});\n    transactionOnNetwork.results = smartContractResults_1.SmartContractResults.fromHttpResponse(response.results || response.smartContractResults || []);\n    return transactionOnNetwork;\n  }\n\n  getReceipt() {\n    return this.receipt;\n  }\n\n  getSmartContractResults() {\n    return this.results;\n  }\n\n}\n\nexports.TransactionOnNetwork = TransactionOnNetwork;\n/**\n * Not yet implemented.\n */\n\nclass TransactionOnNetworkType {\n  constructor(value) {\n    this.value = value || \"unknown\";\n  }\n\n}\n\nexports.TransactionOnNetworkType = TransactionOnNetworkType;\n\nclass Receipt {\n  constructor() {\n    this.value = balance_1.Balance.Zero();\n    this.sender = new address_1.Address();\n    this.message = \"\";\n    this.hash = transaction_1.TransactionHash.empty();\n  }\n\n  static fromHttpResponse(response) {\n    let receipt = new Receipt();\n    receipt.value = balance_1.Balance.fromString(response.value);\n    receipt.sender = new address_1.Address(response.sender);\n    receipt.message = response.data;\n    receipt.hash = new transaction_1.TransactionHash(response.txHash);\n    return receipt;\n  }\n\n}\n\nexports.Receipt = Receipt;","map":{"version":3,"sources":["../src/transactionOnNetwork.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Receipt = exports.TransactionOnNetworkType = exports.TransactionOnNetwork = void 0;\nconst address_1 = require(\"./address\");\nconst balance_1 = require(\"./balance\");\nconst networkParams_1 = require(\"./networkParams\");\nconst nonce_1 = require(\"./nonce\");\nconst signature_1 = require(\"./signature\");\nconst transactionPayload_1 = require(\"./transactionPayload\");\nconst hash_1 = require(\"./hash\");\nconst transaction_1 = require(\"./transaction\");\nconst smartContractResults_1 = require(\"./smartcontracts/smartContractResults\");\n/**\n * A plain view of a transaction, as queried from the Network.\n */\nclass TransactionOnNetwork {\n    constructor(init) {\n        this.type = new TransactionOnNetworkType();\n        this.nonce = new nonce_1.Nonce(0);\n        this.round = 0;\n        this.epoch = 0;\n        this.value = balance_1.Balance.Zero();\n        this.receiver = new address_1.Address();\n        this.sender = new address_1.Address();\n        this.gasPrice = new networkParams_1.GasPrice(0);\n        this.gasLimit = new networkParams_1.GasLimit(0);\n        this.data = new transactionPayload_1.TransactionPayload();\n        this.signature = signature_1.Signature.empty();\n        this.status = transaction_1.TransactionStatus.createUnknown();\n        this.hyperblockNonce = new nonce_1.Nonce(0);\n        this.hyperblockHash = hash_1.Hash.empty();\n        this.receipt = new Receipt();\n        this.results = smartContractResults_1.SmartContractResults.empty();\n        Object.assign(this, init);\n    }\n    static fromHttpResponse(response) {\n        let transactionOnNetwork = new TransactionOnNetwork();\n        transactionOnNetwork.type = new TransactionOnNetworkType(response.type || \"\");\n        transactionOnNetwork.nonce = new nonce_1.Nonce(response.nonce || 0);\n        transactionOnNetwork.round = response.round;\n        transactionOnNetwork.epoch = response.epoch || 0;\n        transactionOnNetwork.value = balance_1.Balance.fromString(response.value);\n        transactionOnNetwork.sender = address_1.Address.fromBech32(response.sender);\n        transactionOnNetwork.receiver = address_1.Address.fromBech32(response.receiver);\n        transactionOnNetwork.gasPrice = new networkParams_1.GasPrice(response.gasPrice);\n        transactionOnNetwork.gasLimit = new networkParams_1.GasLimit(response.gasLimit);\n        transactionOnNetwork.data = transactionPayload_1.TransactionPayload.fromEncoded(response.data);\n        transactionOnNetwork.status = new transaction_1.TransactionStatus(response.status);\n        transactionOnNetwork.hyperblockNonce = new nonce_1.Nonce(response.hyperblockNonce || 0);\n        transactionOnNetwork.hyperblockHash = new hash_1.Hash(response.hyperblockHash);\n        transactionOnNetwork.receipt = Receipt.fromHttpResponse(response.receipt || {});\n        transactionOnNetwork.results = smartContractResults_1.SmartContractResults.fromHttpResponse(response.results || response.smartContractResults || []);\n        return transactionOnNetwork;\n    }\n    getReceipt() {\n        return this.receipt;\n    }\n    getSmartContractResults() {\n        return this.results;\n    }\n}\nexports.TransactionOnNetwork = TransactionOnNetwork;\n/**\n * Not yet implemented.\n */\nclass TransactionOnNetworkType {\n    constructor(value) {\n        this.value = value || \"unknown\";\n    }\n}\nexports.TransactionOnNetworkType = TransactionOnNetworkType;\nclass Receipt {\n    constructor() {\n        this.value = balance_1.Balance.Zero();\n        this.sender = new address_1.Address();\n        this.message = \"\";\n        this.hash = transaction_1.TransactionHash.empty();\n    }\n    static fromHttpResponse(response) {\n        let receipt = new Receipt();\n        receipt.value = balance_1.Balance.fromString(response.value);\n        receipt.sender = new address_1.Address(response.sender);\n        receipt.message = response.data;\n        receipt.hash = new transaction_1.TransactionHash(response.txHash);\n        return receipt;\n    }\n}\nexports.Receipt = Receipt;\n//# sourceMappingURL=transactionOnNetwork.js.map"]},"metadata":{},"sourceType":"script"}