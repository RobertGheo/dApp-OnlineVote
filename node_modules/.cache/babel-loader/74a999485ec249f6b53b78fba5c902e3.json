{"ast":null,"code":"var _jsxFileName = \"/home/robert/Final Project/dApp-OnlineVote/src/pages/Dashboard/Actions/indexRed.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport { transactionServices, useGetAccountInfo, useGetPendingTransactions, refreshAccount, useGetNetworkConfig } from '@elrondnetwork/dapp-core';\nimport { Address, AddressValue, ContractFunction, ProxyProvider, Query } from '@elrondnetwork/erdjs'; //import { faArrowUp, faArrowDown } from '@fortawesome/free-solid-svg-icons';\n//import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport moment from 'moment';\nimport { contractAddress } from 'config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ActionsRed = () => {\n  _s();\n\n  const account = useGetAccountInfo();\n  const {\n    hasPendingTransactions\n  } = useGetPendingTransactions();\n  const {\n    network\n  } = useGetNetworkConfig();\n  const {\n    address\n  } = account;\n  const [secondsLeft, setSecondsLeft] = React.useState();\n  const [hasPing, setHasPing] = React.useState();\n  const\n  /*transactionSessionId*/\n  [, setTransactionSessionId] = React.useState(null);\n\n  const mount = () => {\n    if (secondsLeft) {\n      const interval = setInterval(() => {\n        setSecondsLeft(existing => {\n          if (existing) {\n            return existing - 1;\n          } else {\n            clearInterval(interval);\n            return 0;\n          }\n        });\n      }, 1000);\n      return () => {\n        clearInterval(interval);\n      };\n    }\n  }; // eslint-disable-next-line react-hooks/exhaustive-deps\n\n\n  React.useEffect(mount, [hasPing]);\n  React.useEffect(() => {\n    const query = new Query({\n      address: new Address(contractAddress),\n      func: new ContractFunction('getTimeToPong'),\n      args: [new AddressValue(new Address(address))]\n    });\n    const proxy = new ProxyProvider(network.apiAddress);\n    proxy.queryContract(query).then(_ref => {\n      let {\n        returnData\n      } = _ref;\n      const [encoded] = returnData;\n\n      switch (encoded) {\n        case undefined:\n          setHasPing(true);\n          break;\n\n        case '':\n          setSecondsLeft(0);\n          setHasPing(false);\n          break;\n\n        default:\n          {\n            const decoded = Buffer.from(encoded, 'base64').toString('hex');\n            setSecondsLeft(parseInt(decoded, 16));\n            setHasPing(false);\n            break;\n          }\n      }\n    }).catch(err => {\n      console.error('Unable to call VM query', err);\n    }); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [hasPendingTransactions]);\n  const {\n    sendTransactions\n  } = transactionServices;\n\n  const sendPingTransaction = async () => {\n    const pingTransaction = {\n      value: '1000000000000000000',\n      data: 'ping',\n      receiver: contractAddress\n    };\n    await refreshAccount();\n    const {\n      sessionId\n      /*, error*/\n\n    } = await sendTransactions({\n      transactions: pingTransaction,\n      transactionsDisplayInfo: {\n        processingMessage: 'Processing Ping transaction',\n        errorMessage: 'An error has occured during Ping',\n        successMessage: 'Ping transaction successful'\n      },\n      redirectAfterSign: false\n    });\n\n    if (sessionId != null) {\n      setTransactionSessionId(sessionId);\n    }\n  };\n\n  const sendPongTransaction = async () => {\n    const pongTransaction = {\n      value: '0',\n      data: 'pong',\n      receiver: contractAddress\n    };\n    await refreshAccount();\n    const {\n      sessionId\n      /*, error*/\n\n    } = await sendTransactions({\n      transactions: pongTransaction,\n      transactionsDisplayInfo: {\n        processingMessage: 'Processing Pong transaction',\n        errorMessage: 'An error has occured during Pong',\n        successMessage: 'Pong transaction successful'\n      },\n      redirectAfterSign: false\n    });\n\n    if (sessionId != null) {\n      setTransactionSessionId(sessionId);\n    }\n  };\n\n  const pongAllowed = secondsLeft === 0 && !hasPendingTransactions;\n  const notAllowedClass = 'not-allowed disabled';\n  const timeRemaining = moment().startOf('day').seconds(secondsLeft || 0).format('mm:ss');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"d-flex col justify-content-center\",\n    children: hasPing !== undefined && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: hasPing && !hasPendingTransactions ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card row w-100 border-danger shadow mx-auto\",\n        onClick: sendPingTransaction,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-danger m-2\",\n          children: \"Vote\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"/\",\n          className: \"text-dark\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex col justify-content-center\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `card row w-100 border-danger shadow mx-auto ${notAllowedClass}`,\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: `btn btn-danger m-2 ${notAllowedClass}`,\n              children: \"Done\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-white\",\n              children: pongAllowed ? /*#__PURE__*/_jsxDEV(\"a\", {\n                href: \"/\",\n                className: \"text-dark text-decoration-none\",\n                children: \"Pong\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: \"Pong\"\n              }, void 0, false)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 15\n        }, this)\n      }, void 0, false)\n    }, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ActionsRed, \"AWppVBqyx279k0D4/5EwWVhfpN4=\", false, function () {\n  return [useGetAccountInfo, useGetPendingTransactions, useGetNetworkConfig];\n});\n\n_c = ActionsRed;\nexport default ActionsRed;\n\nvar _c;\n\n$RefreshReg$(_c, \"ActionsRed\");","map":{"version":3,"sources":["/home/robert/Final Project/dApp-OnlineVote/src/pages/Dashboard/Actions/indexRed.tsx"],"names":["React","transactionServices","useGetAccountInfo","useGetPendingTransactions","refreshAccount","useGetNetworkConfig","Address","AddressValue","ContractFunction","ProxyProvider","Query","moment","contractAddress","ActionsRed","account","hasPendingTransactions","network","address","secondsLeft","setSecondsLeft","useState","hasPing","setHasPing","setTransactionSessionId","mount","interval","setInterval","existing","clearInterval","useEffect","query","func","args","proxy","apiAddress","queryContract","then","returnData","encoded","undefined","decoded","Buffer","from","toString","parseInt","catch","err","console","error","sendTransactions","sendPingTransaction","pingTransaction","value","data","receiver","sessionId","transactions","transactionsDisplayInfo","processingMessage","errorMessage","successMessage","redirectAfterSign","sendPongTransaction","pongTransaction","pongAllowed","notAllowedClass","timeRemaining","startOf","seconds","format","className"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  transactionServices,\n  useGetAccountInfo,\n  useGetPendingTransactions,\n  refreshAccount,\n  useGetNetworkConfig\n} from '@elrondnetwork/dapp-core';\nimport {\n  Address,\n  AddressValue,\n  ContractFunction,\n  ProxyProvider,\n  Query\n} from '@elrondnetwork/erdjs';\n//import { faArrowUp, faArrowDown } from '@fortawesome/free-solid-svg-icons';\n//import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport moment from 'moment';\nimport { contractAddress } from 'config';\n\nconst ActionsRed = () => {\n  const account = useGetAccountInfo();\n  const { hasPendingTransactions } = useGetPendingTransactions();\n  const { network } = useGetNetworkConfig();\n  const { address } = account;\n\n  const [secondsLeft, setSecondsLeft] = React.useState<number>();\n  const [hasPing, setHasPing] = React.useState<boolean>();\n  const /*transactionSessionId*/ [, setTransactionSessionId] = React.useState<\n      string | null\n    >(null);\n\n  const mount = () => {\n    if (secondsLeft) {\n      const interval = setInterval(() => {\n        setSecondsLeft((existing) => {\n          if (existing) {\n            return existing - 1;\n          } else {\n            clearInterval(interval);\n            return 0;\n          }\n        });\n      }, 1000);\n      return () => {\n        clearInterval(interval);\n      };\n    }\n  };\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  React.useEffect(mount, [hasPing]);\n\n  React.useEffect(() => {\n    const query = new Query({\n      address: new Address(contractAddress),\n      func: new ContractFunction('getTimeToPong'),\n      args: [new AddressValue(new Address(address))]\n    });\n    const proxy = new ProxyProvider(network.apiAddress);\n    proxy\n      .queryContract(query)\n      .then(({ returnData }) => {\n        const [encoded] = returnData;\n        switch (encoded) {\n          case undefined:\n            setHasPing(true);\n            break;\n          case '':\n            setSecondsLeft(0);\n            setHasPing(false);\n            break;\n          default: {\n            const decoded = Buffer.from(encoded, 'base64').toString('hex');\n            setSecondsLeft(parseInt(decoded, 16));\n            setHasPing(false);\n            break;\n          }\n        }\n      })\n      .catch((err) => {\n        console.error('Unable to call VM query', err);\n      });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [hasPendingTransactions]);\n\n  const { sendTransactions } = transactionServices;\n\n  const sendPingTransaction = async () => {\n    const pingTransaction = {\n      value: '1000000000000000000',\n      data: 'ping',\n      receiver: contractAddress\n    };\n    await refreshAccount();\n\n    const { sessionId /*, error*/ } = await sendTransactions({\n      transactions: pingTransaction,\n      transactionsDisplayInfo: {\n        processingMessage: 'Processing Ping transaction',\n        errorMessage: 'An error has occured during Ping',\n        successMessage: 'Ping transaction successful'\n      },\n      redirectAfterSign: false\n    });\n    if (sessionId != null) {\n      setTransactionSessionId(sessionId);\n    }\n  };\n\n  const sendPongTransaction = async () => {\n    const pongTransaction = {\n      value: '0',\n      data: 'pong',\n      receiver: contractAddress\n    };\n    await refreshAccount();\n\n    const { sessionId /*, error*/ } = await sendTransactions({\n      transactions: pongTransaction,\n      transactionsDisplayInfo: {\n        processingMessage: 'Processing Pong transaction',\n        errorMessage: 'An error has occured during Pong',\n        successMessage: 'Pong transaction successful'\n      },\n      redirectAfterSign: false\n    });\n    if (sessionId != null) {\n      setTransactionSessionId(sessionId);\n    }\n  };\n\n  const pongAllowed = secondsLeft === 0 && !hasPendingTransactions;\n  const notAllowedClass = 'not-allowed disabled';\n\n  const timeRemaining = moment()\n    .startOf('day')\n    .seconds(secondsLeft || 0)\n    .format('mm:ss');\n  return (\n    <div className='d-flex col justify-content-center'>\n      {hasPing !== undefined && (\n        <>\n          {hasPing && !hasPendingTransactions ? (\n            <div\n              className='card row w-100 border-danger shadow mx-auto'\n              onClick={sendPingTransaction}\n            >\n              <button type='button' className='btn btn-danger m-2'>\n                Vote\n              </button>\n              <a href='/' className='text-dark'></a>\n            </div>\n          ) : (\n            <>\n              <div className='d-flex col justify-content-center'>\n                <div\n                  {...{\n                    className: `card row w-100 border-danger shadow mx-auto ${notAllowedClass}`\n                  }}\n                >\n                  <button className={`btn btn-danger m-2 ${notAllowedClass}`}>\n                    Done\n                  </button>\n                  <span className='text-white'>\n                    {pongAllowed ? (\n                      <a href='/' className='text-dark text-decoration-none'>\n                        Pong\n                      </a>\n                    ) : (\n                      <>Pong</>\n                    )}\n                  </span>\n                </div>\n              </div>\n            </>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default ActionsRed;\n"]},"metadata":{},"sourceType":"module"}