{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ArrayVecBinaryCodec = void 0;\n\nconst typesystem_1 = require(\"../typesystem\");\n\nclass ArrayVecBinaryCodec {\n  constructor(binaryCodec) {\n    this.binaryCodec = binaryCodec;\n  }\n\n  decodeNested(buffer, type) {\n    let arrayLength = type.length;\n    let typeParameter = type.getFirstTypeParameter();\n    let result = [];\n    let totalLength = 0;\n\n    for (let i = 0; i < arrayLength; i++) {\n      let [decoded, decodedLength] = this.binaryCodec.decodeNested(buffer, typeParameter);\n      result.push(decoded);\n      totalLength += decodedLength;\n      buffer = buffer.slice(decodedLength);\n    }\n\n    return [new typesystem_1.ArrayVec(type, result), totalLength];\n  }\n\n  decodeTopLevel(buffer, type) {\n    let [result, _] = this.decodeNested(buffer, type);\n    return result;\n  }\n\n  encodeNested(array) {\n    let itemsBuffers = [];\n\n    for (const item of array.getItems()) {\n      let itemBuffer = this.binaryCodec.encodeNested(item);\n      itemsBuffers.push(itemBuffer);\n    }\n\n    return Buffer.concat(itemsBuffers);\n  }\n\n  encodeTopLevel(array) {\n    return this.encodeNested(array);\n  }\n\n}\n\nexports.ArrayVecBinaryCodec = ArrayVecBinaryCodec;","map":{"version":3,"sources":["../../../src/smartcontracts/codec/arrayVec.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,YAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAGA,MAAa,mBAAb,CAAgC;AAG5B,EAAA,WAAA,CAAY,WAAZ,EAAoC;AAChC,SAAK,WAAL,GAAmB,WAAnB;AACH;;AAED,EAAA,YAAY,CAAC,MAAD,EAAiB,IAAjB,EAAmC;AAC3C,QAAI,WAAW,GAAG,IAAI,CAAC,MAAvB;AACA,QAAI,aAAa,GAAG,IAAI,CAAC,qBAAL,EAApB;AACA,QAAI,MAAM,GAAiB,EAA3B;AACA,QAAI,WAAW,GAAG,CAAlB;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,WAApB,EAAiC,CAAC,EAAlC,EAAsC;AAClC,UAAI,CAAC,OAAD,EAAU,aAAV,IAA2B,KAAK,WAAL,CAAiB,YAAjB,CAA8B,MAA9B,EAAsC,aAAtC,CAA/B;AACA,MAAA,MAAM,CAAC,IAAP,CAAY,OAAZ;AACA,MAAA,WAAW,IAAI,aAAf;AACA,MAAA,MAAM,GAAG,MAAM,CAAC,KAAP,CAAa,aAAb,CAAT;AACH;;AAED,WAAO,CAAC,IAAI,YAAA,CAAA,QAAJ,CAAa,IAAb,EAAmB,MAAnB,CAAD,EAA6B,WAA7B,CAAP;AACH;;AAED,EAAA,cAAc,CAAC,MAAD,EAAiB,IAAjB,EAAmC;AAC7C,QAAI,CAAC,MAAD,EAAS,CAAT,IAAc,KAAK,YAAL,CAAkB,MAAlB,EAA0B,IAA1B,CAAlB;AACA,WAAO,MAAP;AACH;;AAED,EAAA,YAAY,CAAC,KAAD,EAAgB;AACxB,QAAI,YAAY,GAAa,EAA7B;;AAEA,SAAK,MAAM,IAAX,IAAmB,KAAK,CAAC,QAAN,EAAnB,EAAqC;AACjC,UAAI,UAAU,GAAG,KAAK,WAAL,CAAiB,YAAjB,CAA8B,IAA9B,CAAjB;AACA,MAAA,YAAY,CAAC,IAAb,CAAkB,UAAlB;AACH;;AAED,WAAO,MAAM,CAAC,MAAP,CAAc,YAAd,CAAP;AACH;;AAED,EAAA,cAAc,CAAC,KAAD,EAAgB;AAC1B,WAAO,KAAK,YAAL,CAAkB,KAAlB,CAAP;AACH;;AAzC2B;;AAAhC,OAAA,CAAA,mBAAA,GAAA,mBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ArrayVecBinaryCodec = void 0;\nconst typesystem_1 = require(\"../typesystem\");\nclass ArrayVecBinaryCodec {\n    constructor(binaryCodec) {\n        this.binaryCodec = binaryCodec;\n    }\n    decodeNested(buffer, type) {\n        let arrayLength = type.length;\n        let typeParameter = type.getFirstTypeParameter();\n        let result = [];\n        let totalLength = 0;\n        for (let i = 0; i < arrayLength; i++) {\n            let [decoded, decodedLength] = this.binaryCodec.decodeNested(buffer, typeParameter);\n            result.push(decoded);\n            totalLength += decodedLength;\n            buffer = buffer.slice(decodedLength);\n        }\n        return [new typesystem_1.ArrayVec(type, result), totalLength];\n    }\n    decodeTopLevel(buffer, type) {\n        let [result, _] = this.decodeNested(buffer, type);\n        return result;\n    }\n    encodeNested(array) {\n        let itemsBuffers = [];\n        for (const item of array.getItems()) {\n            let itemBuffer = this.binaryCodec.encodeNested(item);\n            itemsBuffers.push(itemBuffer);\n        }\n        return Buffer.concat(itemsBuffers);\n    }\n    encodeTopLevel(array) {\n        return this.encodeNested(array);\n    }\n}\nexports.ArrayVecBinaryCodec = ArrayVecBinaryCodec;\n//# sourceMappingURL=arrayVec.js.map"]},"metadata":{},"sourceType":"script"}