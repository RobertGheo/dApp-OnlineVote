{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.chooseApiProvider = exports.chooseProxyProvider = exports.setupInteractiveWithProvider = exports.setupInteractive = void 0;\n\nconst _1 = require(\".\");\n\nconst testutils_1 = require(\"./testutils\");\n\nfunction setupInteractive(providerChoice) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let provider = chooseProxyProvider(providerChoice);\n    return yield setupInteractiveWithProvider(provider);\n  });\n}\n\nexports.setupInteractive = setupInteractive;\n\nfunction setupInteractiveWithProvider(provider) {\n  return __awaiter(this, void 0, void 0, function* () {\n    yield _1.NetworkConfig.getDefault().sync(provider);\n    let wallets = yield testutils_1.loadAndSyncTestWallets(provider);\n    let erdSys = yield _1.SystemWrapper.load(provider);\n    return {\n      erdSys,\n      Egld: _1.Egld,\n      wallets\n    };\n  });\n}\n\nexports.setupInteractiveWithProvider = setupInteractiveWithProvider;\n\nfunction chooseProxyProvider(providerChoice) {\n  let providers = {\n    \"local-testnet\": new _1.ProxyProvider(\"http://localhost:7950\", {\n      timeout: 5000\n    }),\n    \"elrond-testnet\": new _1.ProxyProvider(\"https://testnet-gateway.elrond.com\", {\n      timeout: 5000\n    }),\n    \"elrond-devnet\": new _1.ProxyProvider(\"https://devnet-gateway.elrond.com\", {\n      timeout: 5000\n    }),\n    \"elrond-mainnet\": new _1.ProxyProvider(\"https://gateway.elrond.com\", {\n      timeout: 20000\n    })\n  };\n  let chosenProvider = providers[providerChoice];\n\n  if (chosenProvider) {\n    return chosenProvider;\n  }\n\n  throw new _1.ErrInvalidArgument(`providerChoice is not recognized (must be one of: ${Object.keys(providers)})`);\n}\n\nexports.chooseProxyProvider = chooseProxyProvider;\n\nfunction chooseApiProvider(providerChoice) {\n  let providers = {\n    \"elrond-devnet\": new _1.ApiProvider(\"https://devnet-api.elrond.com\", {\n      timeout: 5000\n    }),\n    \"elrond-testnet\": new _1.ApiProvider(\"https://testnet-api.elrond.com\", {\n      timeout: 5000\n    }),\n    \"elrond-mainnet\": new _1.ApiProvider(\"https://api.elrond.com\", {\n      timeout: 5000\n    })\n  };\n  let chosenProvider = providers[providerChoice];\n\n  if (chosenProvider) {\n    return chosenProvider;\n  }\n\n  throw new _1.ErrInvalidArgument(`providerChoice is not recognized (must be one of: ${Object.keys(providers)})`);\n}\n\nexports.chooseApiProvider = chooseApiProvider;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAIA,SAAsBA,gBAAtB,CAAuCC,cAAvC,EAA6D;;AACzD,QAAIC,QAAQ,GAAGC,mBAAmB,CAACF,cAAD,CAAlC;AACA,WAAO,MAAMG,4BAA4B,CAACF,QAAD,CAAzC;AACH;AAAA;;AAHDG;;AAKA,SAAsBD,4BAAtB,CAAmDF,QAAnD,EAAsE;;AAClE,UAAMI,iBAAcC,UAAd,GAA2BC,IAA3B,CAAgCN,QAAhC,CAAN;AACA,QAAIO,OAAO,GAAG,MAAMC,mCAAuBR,QAAvB,CAApB;AACA,QAAIS,MAAM,GAAG,MAAML,iBAAcM,IAAd,CAAmBV,QAAnB,CAAnB;AACA,WAAO;AAAES,YAAF;AAAUE,UAAI,EAAJP,OAAV;AAAgBG;AAAhB,KAAP;AACH;AAAA;;AALDJ;;AAOA,SAAgBF,mBAAhB,CAAoCF,cAApC,EAA0D;AACtD,MAAIa,SAAS,GAA8B;AACvC,qBAAiB,IAAIR,gBAAJ,CAAkB,uBAAlB,EAA2C;AAAES,aAAO,EAAE;AAAX,KAA3C,CADsB;AAEvC,sBAAkB,IAAIT,gBAAJ,CAAkB,oCAAlB,EAAwD;AAAES,aAAO,EAAE;AAAX,KAAxD,CAFqB;AAGvC,qBAAiB,IAAIT,gBAAJ,CAAkB,mCAAlB,EAAuD;AAAES,aAAO,EAAE;AAAX,KAAvD,CAHsB;AAIvC,sBAAkB,IAAIT,gBAAJ,CAAkB,4BAAlB,EAAgD;AAAES,aAAO,EAAE;AAAX,KAAhD;AAJqB,GAA3C;AAOA,MAAIC,cAAc,GAAGF,SAAS,CAACb,cAAD,CAA9B;;AACA,MAAIe,cAAJ,EAAoB;AAChB,WAAOA,cAAP;AACH;;AAED,QAAM,IAAIV,qBAAJ,CAAuB,qDAAqDW,MAAM,CAACC,IAAP,CAAYJ,SAAZ,CAAsB,GAAlG,CAAN;AACH;;AAdDT;;AAgBA,SAAgBc,iBAAhB,CAAkClB,cAAlC,EAAwD;AACpD,MAAIa,SAAS,GAAiC;AAC1C,qBAAiB,IAAIR,cAAJ,CAAgB,+BAAhB,EAAiD;AAAES,aAAO,EAAE;AAAX,KAAjD,CADyB;AAE1C,sBAAkB,IAAIT,cAAJ,CAAgB,gCAAhB,EAAkD;AAAES,aAAO,EAAE;AAAX,KAAlD,CAFwB;AAG1C,sBAAkB,IAAIT,cAAJ,CAAgB,wBAAhB,EAA0C;AAAES,aAAO,EAAE;AAAX,KAA1C;AAHwB,GAA9C;AAMA,MAAIC,cAAc,GAAGF,SAAS,CAACb,cAAD,CAA9B;;AACA,MAAIe,cAAJ,EAAoB;AAChB,WAAOA,cAAP;AACH;;AAED,QAAM,IAAIV,qBAAJ,CAAuB,qDAAqDW,MAAM,CAACC,IAAP,CAAYJ,SAAZ,CAAsB,GAAlG,CAAN;AACH;;AAbDT","names":["setupInteractive","providerChoice","provider","chooseProxyProvider","setupInteractiveWithProvider","exports","_1","getDefault","sync","wallets","testutils_1","erdSys","load","Egld","providers","timeout","chosenProvider","Object","keys","chooseApiProvider"],"sourceRoot":"","sources":["../src/interactive.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}