{"ast":null,"code":"import fs from 'fs';\nimport path from 'path';\nimport { useGetAccountInfo } from '@elrondnetwork/dapp-core';\nimport { ProxyProvider, UserSigner, Account, Transaction, Address, Balance, GasLimit, NetworkConfig } from '@elrondnetwork/erdjs';\n\nconst exampleFaucet = () => {\n  var _s = $RefreshSig$();\n\n  //Egld Claim Faucet for blockchain transaction fee\n  const PemFile = '../wallet/wallet-owner.pem';\n  const ProxyUrl = 'https://devnet-gateway.elrond.com';\n  const ApiUrl = 'https://devnet-api.elrond.com'; //const __dirname = dirname(pathToFileURL(''));\n\n  const ClaimEgldFaucet = async () => {\n    _s();\n\n    const {\n      address\n    } = useGetAccountInfo();\n    const provider = new ProxyProvider(ProxyUrl, {\n      timeout: 5000\n    });\n    const signer = await getSigner();\n    const accountSender = new Account(signer.getAddress());\n    console.log(`login ${address}`);\n    await new Promise(resolve => setTimeout(resolve, 5000));\n    console.log(`who is sending ${signer}`);\n    await NetworkConfig.getDefault().sync(provider);\n    await accountSender.sync(provider);\n    const tx = await buildRewardTransactionFor(address);\n    tx.setNonce(accountSender.nonce);\n    await signer.sign(tx);\n    console.log(`name of wallet ${accountSender}`);\n    console.log(`proxy name ${provider}`);\n    await tx.send(provider);\n    await new Promise(r => setTimeout(r, 5000));\n  };\n\n  _s(ClaimEgldFaucet, \"7qrQ0ctvcTJVxIevjF36DsgkyDw=\", false, function () {\n    return [useGetAccountInfo];\n  });\n\n  const getSigner = async () => {\n    const pemWalletPath = path.basename(PemFile);\n    const pemWalletContents = await fs.promises.readFile(pemWalletPath, {\n      encoding: 'utf8'\n    });\n    return UserSigner.fromPem(pemWalletContents);\n  };\n\n  const buildRewardTransactionFor = async receiverAddress => new Transaction({\n    gasLimit: new GasLimit(500000),\n    receiver: new Address(receiverAddress),\n    value: Balance.egld(0.0006)\n  });\n\n  ClaimEgldFaucet();\n};\n\nexport { exampleFaucet };","map":{"version":3,"sources":["/home/robert/Final Project/dApp-OnlineVote/src/claimxegdl.tsx"],"names":["fs","path","useGetAccountInfo","ProxyProvider","UserSigner","Account","Transaction","Address","Balance","GasLimit","NetworkConfig","exampleFaucet","PemFile","ProxyUrl","ApiUrl","ClaimEgldFaucet","address","provider","timeout","signer","getSigner","accountSender","getAddress","console","log","Promise","resolve","setTimeout","getDefault","sync","tx","buildRewardTransactionFor","setNonce","nonce","sign","send","r","pemWalletPath","basename","pemWalletContents","promises","readFile","encoding","fromPem","receiverAddress","gasLimit","receiver","value","egld"],"mappings":"AAAA,OAAOA,EAAP,MAAe,IAAf;AAEA,OAAOC,IAAP,MAA8B,MAA9B;AAGA,SAIEC,iBAJF,QAMO,0BANP;AAOA,SACEC,aADF,EAEEC,UAFF,EAGEC,OAHF,EAIEC,WAJF,EAKEC,OALF,EAMEC,OANF,EAQEC,QARF,EASEC,aATF,QAcO,sBAdP;;AAiBA,MAAMC,aAAa,GAAG,MAAM;AAAA;;AAC1B;AACA,QAAMC,OAAO,GAAG,4BAAhB;AACA,QAAMC,QAAQ,GAAG,mCAAjB;AACA,QAAMC,MAAM,GAAG,+BAAf,CAJ0B,CAM1B;;AACA,QAAMC,eAAe,GAAG,YAAY;AAAA;;AAClC,UAAM;AAAEC,MAAAA;AAAF,QAAcd,iBAAiB,EAArC;AACA,UAAMe,QAAQ,GAAG,IAAId,aAAJ,CAAkBU,QAAlB,EAA4B;AAAEK,MAAAA,OAAO,EAAE;AAAX,KAA5B,CAAjB;AACA,UAAMC,MAAM,GAAG,MAAMC,SAAS,EAA9B;AACA,UAAMC,aAAa,GAAG,IAAIhB,OAAJ,CAAYc,MAAM,CAACG,UAAP,EAAZ,CAAtB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAa,SAAQR,OAAQ,EAA7B;AACA,UAAM,IAAIS,OAAJ,CAAaC,OAAD,IAAaC,UAAU,CAACD,OAAD,EAAU,IAAV,CAAnC,CAAN;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAa,kBAAiBL,MAAO,EAArC;AACA,UAAMT,aAAa,CAACkB,UAAd,GAA2BC,IAA3B,CAAgCZ,QAAhC,CAAN;AACA,UAAMI,aAAa,CAACQ,IAAd,CAAmBZ,QAAnB,CAAN;AAEA,UAAMa,EAAE,GAAG,MAAMC,yBAAyB,CAACf,OAAD,CAA1C;AACAc,IAAAA,EAAE,CAACE,QAAH,CAAYX,aAAa,CAACY,KAA1B;AACA,UAAMd,MAAM,CAACe,IAAP,CAAYJ,EAAZ,CAAN;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAa,kBAAiBH,aAAc,EAA5C;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAa,cAAaP,QAAS,EAAnC;AAEA,UAAMa,EAAE,CAACK,IAAH,CAAQlB,QAAR,CAAN;AACA,UAAM,IAAIQ,OAAJ,CAAaW,CAAD,IAAOT,UAAU,CAACS,CAAD,EAAI,IAAJ,CAA7B,CAAN;AACD,GAnBD;;AAP0B,KAOpBrB,eAPoB;AAAA,YAQJb,iBARI;AAAA;;AA4B1B,QAAMkB,SAAS,GAAG,YAAY;AAC5B,UAAMiB,aAAa,GAAGpC,IAAI,CAACqC,QAAL,CAAc1B,OAAd,CAAtB;AACA,UAAM2B,iBAAiB,GAAG,MAAMvC,EAAE,CAACwC,QAAH,CAAYC,QAAZ,CAAqBJ,aAArB,EAAoC;AAClEK,MAAAA,QAAQ,EAAE;AADwD,KAApC,CAAhC;AAGA,WAAOtC,UAAU,CAACuC,OAAX,CAAmBJ,iBAAnB,CAAP;AACD,GAND;;AAQA,QAAMR,yBAAyB,GAAG,MAAOa,eAAP,IAChC,IAAItC,WAAJ,CAAgB;AACduC,IAAAA,QAAQ,EAAE,IAAIpC,QAAJ,CAAa,MAAb,CADI;AAEdqC,IAAAA,QAAQ,EAAE,IAAIvC,OAAJ,CAAYqC,eAAZ,CAFI;AAGdG,IAAAA,KAAK,EAAEvC,OAAO,CAACwC,IAAR,CAAa,MAAb;AAHO,GAAhB,CADF;;AAOAjC,EAAAA,eAAe;AAChB,CA5CD;;AA6CA,SAASJ,aAAT","sourcesContent":["import fs from 'fs';\nimport fetch from 'node-fetch';\nimport path, { dirname } from 'path';\nimport { fileURLToPath, pathToFileURL } from 'url';\nimport BigNumber from 'bignumber.js';\nimport {\n  getEgldLabel,\n  refreshAccount,\n  transactionServices,\n  useGetAccountInfo,\n  useGetNetworkConfig\n} from '@elrondnetwork/dapp-core';\nimport {\n  ProxyProvider,\n  UserSigner,\n  Account,\n  Transaction,\n  Address,\n  Balance,\n  TransactionPayload,\n  GasLimit,\n  NetworkConfig,\n  ContractFunction,\n  BigUIntValue,\n  BytesValue,\n  Egld\n} from '@elrondnetwork/erdjs';\nimport { url } from 'inspector';\n\nconst exampleFaucet = () => {\n  //Egld Claim Faucet for blockchain transaction fee\n  const PemFile = '../wallet/wallet-owner.pem';\n  const ProxyUrl = 'https://devnet-gateway.elrond.com';\n  const ApiUrl = 'https://devnet-api.elrond.com';\n\n  //const __dirname = dirname(pathToFileURL(''));\n  const ClaimEgldFaucet = async () => {\n    const { address } = useGetAccountInfo();\n    const provider = new ProxyProvider(ProxyUrl, { timeout: 5000 });\n    const signer = await getSigner();\n    const accountSender = new Account(signer.getAddress());\n    console.log(`login ${address}`);\n    await new Promise((resolve) => setTimeout(resolve, 5000));\n    console.log(`who is sending ${signer}`);\n    await NetworkConfig.getDefault().sync(provider);\n    await accountSender.sync(provider);\n\n    const tx = await buildRewardTransactionFor(address);\n    tx.setNonce(accountSender.nonce);\n    await signer.sign(tx);\n    console.log(`name of wallet ${accountSender}`);\n    console.log(`proxy name ${provider}`);\n\n    await tx.send(provider);\n    await new Promise((r) => setTimeout(r, 5000));\n  };\n\n  const getSigner = async () => {\n    const pemWalletPath = path.basename(PemFile);\n    const pemWalletContents = await fs.promises.readFile(pemWalletPath, {\n      encoding: 'utf8'\n    });\n    return UserSigner.fromPem(pemWalletContents);\n  };\n\n  const buildRewardTransactionFor = async (receiverAddress: string) =>\n    new Transaction({\n      gasLimit: new GasLimit(500000),\n      receiver: new Address(receiverAddress),\n      value: Balance.egld(0.0006)\n    });\n\n  ClaimEgldFaucet();\n};\nexport { exampleFaucet };\n"]},"metadata":{},"sourceType":"module"}