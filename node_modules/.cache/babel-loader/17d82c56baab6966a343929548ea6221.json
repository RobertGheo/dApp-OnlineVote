{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport fs from 'fs';\nimport path from 'path';\nimport { useGetAccountInfo } from '@elrondnetwork/dapp-core';\nimport { ProxyProvider, UserSigner, Account, Transaction, Address, Balance, GasLimit, NetworkConfig } from '@elrondnetwork/erdjs';\n//Egld Claim Faucet for blockchain transaction fee\nconst PemFile = './wallet/wallet-owner.pem';\nconst ProxyUrl = 'https://devnet-gateway.elrond.com';\nconst ApiUrl = 'https://devnet-api.elrond.com'; //const __dirname = dirname(pathToFileURL(''));\n\nconst ClaimEgldFaucet = async () => {\n  _s();\n\n  const {\n    address\n  } = useGetAccountInfo();\n  const provider = new ProxyProvider(ProxyUrl, {\n    timeout: 5000\n  });\n  const signer = await getSigner();\n  const accountSender = new Account(signer.getAddress());\n  await new Promise(resolve => setTimeout(resolve, 5000));\n  await NetworkConfig.getDefault().sync(provider);\n  await accountSender.sync(provider);\n  const tx = await buildRewardTransactionFor(address);\n  tx.setNonce(accountSender.nonce);\n  await signer.sign(tx);\n  await tx.send(provider);\n  await new Promise(r => setTimeout(r, 5000));\n};\n\n_s(ClaimEgldFaucet, \"7qrQ0ctvcTJVxIevjF36DsgkyDw=\", false, function () {\n  return [useGetAccountInfo];\n});\n\n_c = ClaimEgldFaucet;\n\nconst getSigner = async () => {\n  const pemWalletPath = path.basename(PemFile);\n  const pemWalletContents = await fs.promises.readFile(pemWalletPath, {\n    encoding: 'utf8'\n  });\n  return UserSigner.fromPem(pemWalletContents);\n};\n\nconst buildRewardTransactionFor = async receiverAddress => new Transaction({\n  gasLimit: new GasLimit(500000),\n  receiver: new Address(receiverAddress),\n  value: Balance.egld(0.0006)\n});\n\nexport { ClaimEgldFaucet };\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimEgldFaucet\");","map":{"version":3,"sources":["/home/robert/Final Project/dApp-OnlineVote/src/claimxegdl.tsx"],"names":["fs","path","useGetAccountInfo","ProxyProvider","UserSigner","Account","Transaction","Address","Balance","GasLimit","NetworkConfig","PemFile","ProxyUrl","ApiUrl","ClaimEgldFaucet","address","provider","timeout","signer","getSigner","accountSender","getAddress","Promise","resolve","setTimeout","getDefault","sync","tx","buildRewardTransactionFor","setNonce","nonce","sign","send","r","pemWalletPath","basename","pemWalletContents","promises","readFile","encoding","fromPem","receiverAddress","gasLimit","receiver","value","egld"],"mappings":";;AAAA,OAAOA,EAAP,MAAe,IAAf;AAEA,OAAOC,IAAP,MAA8B,MAA9B;AAGA,SAIEC,iBAJF,QAMO,0BANP;AAOA,SACEC,aADF,EAEEC,UAFF,EAGEC,OAHF,EAIEC,WAJF,EAKEC,OALF,EAMEC,OANF,EAQEC,QARF,EASEC,aATF,QAcO,sBAdP;AAiBA;AACA,MAAMC,OAAO,GAAG,2BAAhB;AACA,MAAMC,QAAQ,GAAG,mCAAjB;AACA,MAAMC,MAAM,GAAG,+BAAf,C,CAEA;;AAEA,MAAMC,eAAe,GAAG,YAAY;AAAA;;AAClC,QAAM;AAAEC,IAAAA;AAAF,MAAcb,iBAAiB,EAArC;AACA,QAAMc,QAAQ,GAAG,IAAIb,aAAJ,CAAkBS,QAAlB,EAA4B;AAAEK,IAAAA,OAAO,EAAE;AAAX,GAA5B,CAAjB;AACA,QAAMC,MAAM,GAAG,MAAMC,SAAS,EAA9B;AACA,QAAMC,aAAa,GAAG,IAAIf,OAAJ,CAAYa,MAAM,CAACG,UAAP,EAAZ,CAAtB;AAEA,QAAM,IAAIC,OAAJ,CAAaC,OAAD,IAAaC,UAAU,CAACD,OAAD,EAAU,IAAV,CAAnC,CAAN;AAEA,QAAMb,aAAa,CAACe,UAAd,GAA2BC,IAA3B,CAAgCV,QAAhC,CAAN;AACA,QAAMI,aAAa,CAACM,IAAd,CAAmBV,QAAnB,CAAN;AAEA,QAAMW,EAAE,GAAG,MAAMC,yBAAyB,CAACb,OAAD,CAA1C;AACAY,EAAAA,EAAE,CAACE,QAAH,CAAYT,aAAa,CAACU,KAA1B;AACA,QAAMZ,MAAM,CAACa,IAAP,CAAYJ,EAAZ,CAAN;AAEA,QAAMA,EAAE,CAACK,IAAH,CAAQhB,QAAR,CAAN;AACA,QAAM,IAAIM,OAAJ,CAAaW,CAAD,IAAOT,UAAU,CAACS,CAAD,EAAI,IAAJ,CAA7B,CAAN;AACD,CAjBD;;GAAMnB,e;UACgBZ,iB;;;KADhBY,e;;AAmBN,MAAMK,SAAS,GAAG,YAAY;AAC5B,QAAMe,aAAa,GAAGjC,IAAI,CAACkC,QAAL,CAAcxB,OAAd,CAAtB;AACA,QAAMyB,iBAAiB,GAAG,MAAMpC,EAAE,CAACqC,QAAH,CAAYC,QAAZ,CAAqBJ,aAArB,EAAoC;AAClEK,IAAAA,QAAQ,EAAE;AADwD,GAApC,CAAhC;AAGA,SAAOnC,UAAU,CAACoC,OAAX,CAAmBJ,iBAAnB,CAAP;AACD,CAND;;AAQA,MAAMR,yBAAyB,GAAG,MAAOa,eAAP,IAChC,IAAInC,WAAJ,CAAgB;AACdoC,EAAAA,QAAQ,EAAE,IAAIjC,QAAJ,CAAa,MAAb,CADI;AAEdkC,EAAAA,QAAQ,EAAE,IAAIpC,OAAJ,CAAYkC,eAAZ,CAFI;AAGdG,EAAAA,KAAK,EAAEpC,OAAO,CAACqC,IAAR,CAAa,MAAb;AAHO,CAAhB,CADF;;AAOA,SAAS/B,eAAT","sourcesContent":["import fs from 'fs';\nimport fetch from 'node-fetch';\nimport path, { dirname } from 'path';\nimport { fileURLToPath, pathToFileURL } from 'url';\nimport BigNumber from 'bignumber.js';\nimport {\n  getEgldLabel,\n  refreshAccount,\n  transactionServices,\n  useGetAccountInfo,\n  useGetNetworkConfig\n} from '@elrondnetwork/dapp-core';\nimport {\n  ProxyProvider,\n  UserSigner,\n  Account,\n  Transaction,\n  Address,\n  Balance,\n  TransactionPayload,\n  GasLimit,\n  NetworkConfig,\n  ContractFunction,\n  BigUIntValue,\n  BytesValue,\n  Egld\n} from '@elrondnetwork/erdjs';\nimport { url } from 'inspector';\n\n//Egld Claim Faucet for blockchain transaction fee\nconst PemFile = './wallet/wallet-owner.pem';\nconst ProxyUrl = 'https://devnet-gateway.elrond.com';\nconst ApiUrl = 'https://devnet-api.elrond.com';\n\n//const __dirname = dirname(pathToFileURL(''));\n\nconst ClaimEgldFaucet = async () => {\n  const { address } = useGetAccountInfo();\n  const provider = new ProxyProvider(ProxyUrl, { timeout: 5000 });\n  const signer = await getSigner();\n  const accountSender = new Account(signer.getAddress());\n\n  await new Promise((resolve) => setTimeout(resolve, 5000));\n\n  await NetworkConfig.getDefault().sync(provider);\n  await accountSender.sync(provider);\n\n  const tx = await buildRewardTransactionFor(address);\n  tx.setNonce(accountSender.nonce);\n  await signer.sign(tx);\n\n  await tx.send(provider);\n  await new Promise((r) => setTimeout(r, 5000));\n};\n\nconst getSigner = async () => {\n  const pemWalletPath = path.basename(PemFile);\n  const pemWalletContents = await fs.promises.readFile(pemWalletPath, {\n    encoding: 'utf8'\n  });\n  return UserSigner.fromPem(pemWalletContents);\n};\n\nconst buildRewardTransactionFor = async (receiverAddress: string) =>\n  new Transaction({\n    gasLimit: new GasLimit(500000),\n    receiver: new Address(receiverAddress),\n    value: Balance.egld(0.0006)\n  });\n\nexport { ClaimEgldFaucet };\n"]},"metadata":{},"sourceType":"module"}