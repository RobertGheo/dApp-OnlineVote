{"ast":null,"code":"var _jsxFileName = \"/home/robert/Final Project/dApp-OnlineVote/src/pages/Dashboard/helpers/votebox2.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { DappUI, logout, useGetAccountInfo, useGetNetworkConfig } from '@elrondnetwork/dapp-core';\nimport { Address, AddressValue, ContractFunction, ProxyProvider, Query } from '@elrondnetwork/erdjs';\nimport { Modal } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { contractAddressHex1 } from 'config';\nimport { routeNames } from 'routes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst VotedBox2 = () => {\n  _s();\n\n  const {\n    address\n  } = useGetAccountInfo();\n  const {\n    network\n  } = useGetNetworkConfig();\n  const [hasVotedLabour, setVotedLabour] = React.useState();\n\n  const handleLogout = () => {\n    logout(`${window.location.origin}${routeNames.votedSuccessful}`);\n  };\n\n  React.useEffect(() => {\n    const query = new Query({\n      address: new Address(contractAddressHex1),\n      func: new ContractFunction('didUserPing'),\n      args: [new AddressValue(new Address(address))]\n    });\n    const proxy = new ProxyProvider(network.apiAddress);\n    proxy.queryContract(query).then(_ref => {\n      let {\n        returnData\n      } = _ref;\n      const [encoded] = returnData;\n\n      switch (encoded) {\n        default:\n          {\n            const decoded = Buffer.from(encoded, 'base64').toString('hex');\n            setVotedLabour(Boolean(decoded));\n            break;\n          }\n      }\n    }).catch(err => {\n      console.error('Unable to call VM query', err);\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: hasVotedLabour && /*#__PURE__*/_jsxDEV(Modal, {\n      show: true,\n      className: \"p-5\",\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        className: \"badge badge-danger\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"h3 p-2 mx-2 mt-2 mb-0 text-center\",\n          children: \"Labour Party Ballot Box\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        className: \"h2 p-5 m-2 text-center\",\n        children: [\"You have already voted successfully.\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card pt-5 mt-4 border-0\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card p-3 text-left shadow border-danger\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"h4\",\n              children: \"Your address:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              \"data-testid\": \"accountAddress\",\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                className: \"text-danger h6\",\n                href: `${network.explorerAddress}/address/${address}`,\n                target: '_blank',\n                rel: \"noopener noreferrer\",\n                title: \"View in Explorer\",\n                children: /*#__PURE__*/_jsxDEV(DappUI.Trim, {\n                  \"data-testid\": \"accountAddress\",\n                  text: address\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 76,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: routeNames.votedSuccessful,\n          className: \"btn-success p-2 px-3 mx-3 my-2 rounded h2\",\n          onClick: handleLogout,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(VotedBox2, \"/q1j+CW/2qZ+xI5K8ZryM3GNJGw=\", false, function () {\n  return [useGetAccountInfo, useGetNetworkConfig];\n});\n\n_c = VotedBox2;\nexport default VotedBox2;\n\nvar _c;\n\n$RefreshReg$(_c, \"VotedBox2\");","map":{"version":3,"sources":["/home/robert/Final Project/dApp-OnlineVote/src/pages/Dashboard/helpers/votebox2.tsx"],"names":["React","DappUI","logout","useGetAccountInfo","useGetNetworkConfig","Address","AddressValue","ContractFunction","ProxyProvider","Query","Modal","Link","contractAddressHex1","routeNames","VotedBox2","address","network","hasVotedLabour","setVotedLabour","useState","handleLogout","window","location","origin","votedSuccessful","useEffect","query","func","args","proxy","apiAddress","queryContract","then","returnData","encoded","decoded","Buffer","from","toString","Boolean","catch","err","console","error","explorerAddress","target"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  DappUI,\n  logout,\n  useGetAccountInfo,\n  useGetNetworkConfig\n} from '@elrondnetwork/dapp-core';\nimport {\n  Address,\n  AddressValue,\n  ContractFunction,\n  ProxyProvider,\n  Query\n} from '@elrondnetwork/erdjs';\nimport { Modal } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { contractAddressHex1 } from 'config';\nimport { routeNames } from 'routes';\n\nconst VotedBox2 = () => {\n  const { address } = useGetAccountInfo();\n  const { network } = useGetNetworkConfig();\n  const [hasVotedLabour, setVotedLabour] = React.useState<boolean>();\n  const handleLogout = () => {\n    logout(`${window.location.origin}${routeNames.votedSuccessful}`);\n  };\n\n  React.useEffect(() => {\n    const query = new Query({\n      address: new Address(contractAddressHex1),\n      func: new ContractFunction('didUserPing'),\n      args: [new AddressValue(new Address(address))]\n    });\n    const proxy = new ProxyProvider(network.apiAddress);\n    proxy\n      .queryContract(query)\n      .then(({ returnData }) => {\n        const [encoded] = returnData;\n        switch (encoded) {\n          default: {\n            const decoded = Buffer.from(encoded, 'base64').toString('hex');\n            setVotedLabour(Boolean(decoded));\n            break;\n          }\n        }\n      })\n      .catch((err) => {\n        console.error('Unable to call VM query', err);\n      });\n  });\n\n  return (\n    <>\n      {hasVotedLabour && (\n        <Modal show={true} className='p-5'>\n          <Modal.Header className='badge badge-danger'>\n            <div className='h3 p-2 mx-2 mt-2 mb-0 text-center'>\n              Labour Party Ballot Box\n            </div>\n          </Modal.Header>\n          <Modal.Body className='h2 p-5 m-2 text-center'>\n            You have already voted successfully.\n            <div className='card pt-5 mt-4 border-0'>\n              <div className='card p-3 text-left shadow border-danger'>\n                <span className='h4'>Your address:</span>\n                <span data-testid='accountAddress'>\n                  <a\n                    className='text-danger h6'\n                    href={`${network.explorerAddress}/address/${address}`}\n                    {...{\n                      target: '_blank'\n                    }}\n                    rel='noopener noreferrer'\n                    title='View in Explorer'\n                  >\n                    <DappUI.Trim data-testid='accountAddress' text={address} />\n                  </a>\n                </span>\n              </div>\n            </div>\n          </Modal.Body>\n          <Modal.Footer>\n            <Link\n              to={routeNames.votedSuccessful}\n              className='btn-success p-2 px-3 mx-3 my-2 rounded h2'\n              onClick={handleLogout}\n            >\n              Close\n            </Link>\n          </Modal.Footer>\n        </Modal>\n      )}\n    </>\n  );\n};\nexport default VotedBox2;\n"]},"metadata":{},"sourceType":"module"}