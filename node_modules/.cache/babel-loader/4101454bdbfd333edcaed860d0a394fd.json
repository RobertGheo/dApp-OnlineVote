{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ProtoSerializer = void 0;\n\nconst errors = __importStar(require(\"../errors\"));\n\nconst utils_1 = require(\"../smartcontracts/codec/utils\");\n\nconst compiled_1 = require(\"./compiled\");\n\nconst constants_1 = require(\"../constants\");\n/**\n * Hides away the serialization complexity, for each type of object (e.g. transactions).\n \n * The implementation is non-generic, but practical: there's a pair of `serialize` / `deserialize` method for each type of object.\n */\n\n\nclass ProtoSerializer {\n  /**\n   * Serializes a Transaction object to a Buffer. Handles low-level conversion logic and field-mappings as well.\n   */\n  serializeTransaction(transaction) {\n    let protoTransaction = new compiled_1.proto.Transaction({\n      // elrond-go's serializer handles nonce == 0 differently, thus we treat 0 as \"undefined\".\n      Nonce: transaction.getNonce().valueOf() ? transaction.getNonce().valueOf() : undefined,\n      Value: this.serializeBalance(transaction.getValue()),\n      RcvAddr: transaction.getReceiver().pubkey(),\n      RcvUserName: null,\n      SndAddr: transaction.getSender().pubkey(),\n      SndUserName: null,\n      GasPrice: transaction.getGasPrice().valueOf(),\n      GasLimit: transaction.getGasLimit().valueOf(),\n      Data: transaction.getData().isEmpty() ? null : transaction.getData().valueOf(),\n      ChainID: Buffer.from(transaction.getChainID().valueOf()),\n      Version: transaction.getVersion().valueOf(),\n      Signature: Buffer.from(transaction.getSignature().hex(), \"hex\")\n    });\n\n    if (transaction.getOptions().valueOf() !== constants_1.TRANSACTION_OPTIONS_DEFAULT) {\n      protoTransaction.Options = transaction.getOptions().valueOf();\n    }\n\n    let encoded = compiled_1.proto.Transaction.encode(protoTransaction).finish();\n    let buffer = Buffer.from(encoded);\n    return buffer;\n  }\n  /**\n   * Custom serialization, compatible with elrond-go.\n   */\n\n\n  serializeBalance(balance) {\n    let value = balance.valueOf();\n\n    if (value.isZero()) {\n      return Buffer.from([0, 0]);\n    } // Will retain the magnitude, as a buffer.\n\n\n    let buffer = utils_1.bigIntToBuffer(value); // We prepend the \"positive\" sign marker, in order to be compatible with Elrond Go's \"sign & magnitude\" proto-representation (a custom one).\n\n    buffer = Buffer.concat([Buffer.from([0x00]), buffer]);\n    return buffer;\n  }\n\n  deserializeTransaction(_buffer) {\n    // Not needed (yet).\n    throw new errors.ErrUnsupportedOperation(\"deserializeTransaction\");\n  }\n\n}\n\nexports.ProtoSerializer = ProtoSerializer;","map":{"version":3,"sources":["../../src/proto/serializer.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAA,MAAA,GAAA,YAAA,CAAA,OAAA,CAAA,WAAA,CAAA,CAAA;;AAEA,MAAA,OAAA,GAAA,OAAA,CAAA,+BAAA,CAAA;;AAEA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,cAAA,CAAA;AAEA;;;;AAIG;;;AACH,MAAa,eAAb,CAA4B;AACxB;;AAEG;AACH,EAAA,oBAAoB,CAAC,WAAD,EAAyB;AACzC,QAAI,gBAAgB,GAAG,IAAI,UAAA,CAAA,KAAA,CAAM,WAAV,CAAsB;AACzC;AACA,MAAA,KAAK,EAAE,WAAW,CAAC,QAAZ,GAAuB,OAAvB,KAAmC,WAAW,CAAC,QAAZ,GAAuB,OAAvB,EAAnC,GAAsE,SAFpC;AAGzC,MAAA,KAAK,EAAE,KAAK,gBAAL,CAAsB,WAAW,CAAC,QAAZ,EAAtB,CAHkC;AAIzC,MAAA,OAAO,EAAE,WAAW,CAAC,WAAZ,GAA0B,MAA1B,EAJgC;AAKzC,MAAA,WAAW,EAAE,IAL4B;AAMzC,MAAA,OAAO,EAAE,WAAW,CAAC,SAAZ,GAAwB,MAAxB,EANgC;AAOzC,MAAA,WAAW,EAAE,IAP4B;AAQzC,MAAA,QAAQ,EAAE,WAAW,CAAC,WAAZ,GAA0B,OAA1B,EAR+B;AASzC,MAAA,QAAQ,EAAE,WAAW,CAAC,WAAZ,GAA0B,OAA1B,EAT+B;AAUzC,MAAA,IAAI,EAAE,WAAW,CAAC,OAAZ,GAAsB,OAAtB,KAAkC,IAAlC,GAAyC,WAAW,CAAC,OAAZ,GAAsB,OAAtB,EAVN;AAWzC,MAAA,OAAO,EAAE,MAAM,CAAC,IAAP,CAAY,WAAW,CAAC,UAAZ,GAAyB,OAAzB,EAAZ,CAXgC;AAYzC,MAAA,OAAO,EAAE,WAAW,CAAC,UAAZ,GAAyB,OAAzB,EAZgC;AAazC,MAAA,SAAS,EAAE,MAAM,CAAC,IAAP,CAAY,WAAW,CAAC,YAAZ,GAA2B,GAA3B,EAAZ,EAA8C,KAA9C;AAb8B,KAAtB,CAAvB;;AAgBA,QAAK,WAAW,CAAC,UAAZ,GAAyB,OAAzB,OAAuC,WAAA,CAAA,2BAA5C,EAA0E;AACtE,MAAA,gBAAgB,CAAC,OAAjB,GAA2B,WAAW,CAAC,UAAZ,GAAyB,OAAzB,EAA3B;AACH;;AAED,QAAI,OAAO,GAAG,UAAA,CAAA,KAAA,CAAM,WAAN,CAAkB,MAAlB,CAAyB,gBAAzB,EAA2C,MAA3C,EAAd;AACA,QAAI,MAAM,GAAG,MAAM,CAAC,IAAP,CAAY,OAAZ,CAAb;AACA,WAAO,MAAP;AACH;AAED;;AAEG;;;AACK,EAAA,gBAAgB,CAAC,OAAD,EAAiB;AACrC,QAAI,KAAK,GAAG,OAAO,CAAC,OAAR,EAAZ;;AACA,QAAI,KAAK,CAAC,MAAN,EAAJ,EAAoB;AAChB,aAAO,MAAM,CAAC,IAAP,CAAY,CAAC,CAAD,EAAI,CAAJ,CAAZ,CAAP;AACH,KAJoC,CAMrC;;;AACA,QAAI,MAAM,GAAG,OAAA,CAAA,cAAA,CAAe,KAAf,CAAb,CAPqC,CAQrC;;AACA,IAAA,MAAM,GAAG,MAAM,CAAC,MAAP,CAAc,CAAC,MAAM,CAAC,IAAP,CAAY,CAAC,IAAD,CAAZ,CAAD,EAAsB,MAAtB,CAAd,CAAT;AACA,WAAO,MAAP;AACH;;AAED,EAAA,sBAAsB,CAAC,OAAD,EAAgB;AAClC;AACA,UAAM,IAAI,MAAM,CAAC,uBAAX,CAAmC,wBAAnC,CAAN;AACH;;AAjDuB;;AAA5B,OAAA,CAAA,eAAA,GAAA,eAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProtoSerializer = void 0;\nconst errors = __importStar(require(\"../errors\"));\nconst utils_1 = require(\"../smartcontracts/codec/utils\");\nconst compiled_1 = require(\"./compiled\");\nconst constants_1 = require(\"../constants\");\n/**\n * Hides away the serialization complexity, for each type of object (e.g. transactions).\n \n * The implementation is non-generic, but practical: there's a pair of `serialize` / `deserialize` method for each type of object.\n */\nclass ProtoSerializer {\n    /**\n     * Serializes a Transaction object to a Buffer. Handles low-level conversion logic and field-mappings as well.\n     */\n    serializeTransaction(transaction) {\n        let protoTransaction = new compiled_1.proto.Transaction({\n            // elrond-go's serializer handles nonce == 0 differently, thus we treat 0 as \"undefined\".\n            Nonce: transaction.getNonce().valueOf() ? transaction.getNonce().valueOf() : undefined,\n            Value: this.serializeBalance(transaction.getValue()),\n            RcvAddr: transaction.getReceiver().pubkey(),\n            RcvUserName: null,\n            SndAddr: transaction.getSender().pubkey(),\n            SndUserName: null,\n            GasPrice: transaction.getGasPrice().valueOf(),\n            GasLimit: transaction.getGasLimit().valueOf(),\n            Data: transaction.getData().isEmpty() ? null : transaction.getData().valueOf(),\n            ChainID: Buffer.from(transaction.getChainID().valueOf()),\n            Version: transaction.getVersion().valueOf(),\n            Signature: Buffer.from(transaction.getSignature().hex(), \"hex\")\n        });\n        if (transaction.getOptions().valueOf() !== constants_1.TRANSACTION_OPTIONS_DEFAULT) {\n            protoTransaction.Options = transaction.getOptions().valueOf();\n        }\n        let encoded = compiled_1.proto.Transaction.encode(protoTransaction).finish();\n        let buffer = Buffer.from(encoded);\n        return buffer;\n    }\n    /**\n     * Custom serialization, compatible with elrond-go.\n     */\n    serializeBalance(balance) {\n        let value = balance.valueOf();\n        if (value.isZero()) {\n            return Buffer.from([0, 0]);\n        }\n        // Will retain the magnitude, as a buffer.\n        let buffer = utils_1.bigIntToBuffer(value);\n        // We prepend the \"positive\" sign marker, in order to be compatible with Elrond Go's \"sign & magnitude\" proto-representation (a custom one).\n        buffer = Buffer.concat([Buffer.from([0x00]), buffer]);\n        return buffer;\n    }\n    deserializeTransaction(_buffer) {\n        // Not needed (yet).\n        throw new errors.ErrUnsupportedOperation(\"deserializeTransaction\");\n    }\n}\nexports.ProtoSerializer = ProtoSerializer;\n//# sourceMappingURL=serializer.js.map"]},"metadata":{},"sourceType":"script"}