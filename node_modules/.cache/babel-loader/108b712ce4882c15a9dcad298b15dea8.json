{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExtensionProvider = void 0;\n\nconst signableMessage_1 = require(\"../signableMessage\");\n\nconst signature_1 = require(\"../signature\");\n\nconst transaction_1 = require(\"../transaction\");\n\nclass ExtensionProvider {\n  constructor() {\n    this.initialized = false;\n\n    if (ExtensionProvider._instance) {\n      throw new Error(\"Error: Instantiation failed: Use ExtensionProvider.getInstance() instead of new.\");\n    }\n\n    this.account = {\n      address: \"\"\n    };\n    ExtensionProvider._instance = this;\n  }\n\n  static getInstance() {\n    return ExtensionProvider._instance;\n  }\n\n  setAddress(address) {\n    this.account.address = address;\n    return ExtensionProvider._instance;\n  }\n\n  init() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (window && window.elrondWallet) {\n        this.initialized = true;\n      }\n\n      return this.initialized;\n    });\n  }\n\n  login() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.initialized) {\n        throw new Error(\"Extension provider is not initialised, call init() first\");\n      }\n\n      const {\n        token\n      } = options;\n      const data = token ? token : \"\";\n      yield this.startBgrMsgChannel(\"connect\", data);\n      return this.account.address;\n    });\n  }\n\n  logout() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.initialized) {\n        throw new Error(\"Extension provider is not initialised, call init() first\");\n      }\n\n      try {\n        yield this.startBgrMsgChannel(\"logout\", this.account.address);\n      } catch (error) {\n        console.warn(\"Extension origin url is already cleared!\", error);\n      }\n\n      return true;\n    });\n  }\n\n  getAddress() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.initialized) {\n        throw new Error(\"Extension provider is not initialised, call init() first\");\n      }\n\n      return this.account ? this.account.address : \"\";\n    });\n  }\n\n  isInitialized() {\n    return this.initialized;\n  }\n\n  isConnected() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return !!this.account;\n    });\n  }\n\n  sendTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const txResponse = yield this.startBgrMsgChannel(\"sendTransactions\", {\n        from: this.account.address,\n        transactions: [transaction.toPlainObject()]\n      });\n      return transaction_1.Transaction.fromPlainObject(txResponse[0]);\n    });\n  }\n\n  signTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const txResponse = yield this.startBgrMsgChannel(\"signTransactions\", {\n        from: this.account.address,\n        transactions: [transaction.toPlainObject()]\n      });\n      return transaction_1.Transaction.fromPlainObject(txResponse[0]);\n    });\n  }\n\n  signTransactions(transactions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      transactions = transactions.map(transaction => transaction.toPlainObject());\n      let txResponse = yield this.startBgrMsgChannel(\"signTransactions\", {\n        from: this.account.address,\n        transactions: transactions\n      });\n\n      try {\n        txResponse = txResponse.map(transaction => transaction_1.Transaction.fromPlainObject(transaction));\n      } catch (error) {\n        throw new Error(\"Transaction canceled.\");\n      }\n\n      return txResponse;\n    });\n  }\n\n  signMessage(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const data = {\n        account: this.account.address,\n        message: message.message.toString()\n      };\n      const signResponse = yield this.startBgrMsgChannel(\"signMessage\", data);\n      const signedMsg = new signableMessage_1.SignableMessage({\n        address: message.address,\n        message: Buffer.from(signResponse.message),\n        signature: new signature_1.Signature(signResponse.signature)\n      });\n      return signedMsg;\n    });\n  }\n\n  cancelAction() {\n    return this.startBgrMsgChannel(\"cancelAction\", {});\n  }\n\n  startBgrMsgChannel(operation, connectData) {\n    return new Promise(resolve => {\n      window.postMessage({\n        target: \"erdw-inpage\",\n        type: operation,\n        data: connectData\n      }, window.origin);\n\n      const eventHandler = event => {\n        if (event.isTrusted && event.data.target === \"erdw-contentScript\") {\n          if (event.data.type === \"connectResponse\") {\n            this.account = event.data.data;\n            window.removeEventListener(\"message\", eventHandler);\n            resolve(event.data.data);\n          } else {\n            window.removeEventListener(\"message\", eventHandler);\n            resolve(event.data.data);\n          }\n        }\n      };\n\n      window.addEventListener(\"message\", eventHandler, false);\n    });\n  }\n\n}\n\nexports.ExtensionProvider = ExtensionProvider;\nExtensionProvider._instance = new ExtensionProvider();","map":{"version":3,"sources":["../../src/dapp/extensionProvider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExtensionProvider = void 0;\nconst signableMessage_1 = require(\"../signableMessage\");\nconst signature_1 = require(\"../signature\");\nconst transaction_1 = require(\"../transaction\");\nclass ExtensionProvider {\n    constructor() {\n        this.initialized = false;\n        if (ExtensionProvider._instance) {\n            throw new Error(\"Error: Instantiation failed: Use ExtensionProvider.getInstance() instead of new.\");\n        }\n        this.account = { address: \"\" };\n        ExtensionProvider._instance = this;\n    }\n    static getInstance() {\n        return ExtensionProvider._instance;\n    }\n    setAddress(address) {\n        this.account.address = address;\n        return ExtensionProvider._instance;\n    }\n    init() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (window && window.elrondWallet) {\n                this.initialized = true;\n            }\n            return this.initialized;\n        });\n    }\n    login(options = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.initialized) {\n                throw new Error(\"Extension provider is not initialised, call init() first\");\n            }\n            const { token } = options;\n            const data = token ? token : \"\";\n            yield this.startBgrMsgChannel(\"connect\", data);\n            return this.account.address;\n        });\n    }\n    logout() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.initialized) {\n                throw new Error(\"Extension provider is not initialised, call init() first\");\n            }\n            try {\n                yield this.startBgrMsgChannel(\"logout\", this.account.address);\n            }\n            catch (error) {\n                console.warn(\"Extension origin url is already cleared!\", error);\n            }\n            return true;\n        });\n    }\n    getAddress() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.initialized) {\n                throw new Error(\"Extension provider is not initialised, call init() first\");\n            }\n            return this.account ? this.account.address : \"\";\n        });\n    }\n    isInitialized() {\n        return this.initialized;\n    }\n    isConnected() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return !!this.account;\n        });\n    }\n    sendTransaction(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const txResponse = yield this.startBgrMsgChannel(\"sendTransactions\", {\n                from: this.account.address,\n                transactions: [transaction.toPlainObject()],\n            });\n            return transaction_1.Transaction.fromPlainObject(txResponse[0]);\n        });\n    }\n    signTransaction(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const txResponse = yield this.startBgrMsgChannel(\"signTransactions\", {\n                from: this.account.address,\n                transactions: [transaction.toPlainObject()],\n            });\n            return transaction_1.Transaction.fromPlainObject(txResponse[0]);\n        });\n    }\n    signTransactions(transactions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            transactions = transactions.map((transaction) => transaction.toPlainObject());\n            let txResponse = yield this.startBgrMsgChannel(\"signTransactions\", {\n                from: this.account.address,\n                transactions: transactions,\n            });\n            try {\n                txResponse = txResponse.map((transaction) => transaction_1.Transaction.fromPlainObject(transaction));\n            }\n            catch (error) {\n                throw new Error(\"Transaction canceled.\");\n            }\n            return txResponse;\n        });\n    }\n    signMessage(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = {\n                account: this.account.address,\n                message: message.message.toString(),\n            };\n            const signResponse = yield this.startBgrMsgChannel(\"signMessage\", data);\n            const signedMsg = new signableMessage_1.SignableMessage({\n                address: message.address,\n                message: Buffer.from(signResponse.message),\n                signature: new signature_1.Signature(signResponse.signature),\n            });\n            return signedMsg;\n        });\n    }\n    cancelAction() {\n        return this.startBgrMsgChannel(\"cancelAction\", {});\n    }\n    startBgrMsgChannel(operation, connectData) {\n        return new Promise((resolve) => {\n            window.postMessage({\n                target: \"erdw-inpage\",\n                type: operation,\n                data: connectData,\n            }, window.origin);\n            const eventHandler = (event) => {\n                if (event.isTrusted && event.data.target === \"erdw-contentScript\") {\n                    if (event.data.type === \"connectResponse\") {\n                        this.account = event.data.data;\n                        window.removeEventListener(\"message\", eventHandler);\n                        resolve(event.data.data);\n                    }\n                    else {\n                        window.removeEventListener(\"message\", eventHandler);\n                        resolve(event.data.data);\n                    }\n                }\n            };\n            window.addEventListener(\"message\", eventHandler, false);\n        });\n    }\n}\nexports.ExtensionProvider = ExtensionProvider;\nExtensionProvider._instance = new ExtensionProvider();\n//# sourceMappingURL=extensionProvider.js.map"]},"metadata":{},"sourceType":"script"}