{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar bls = require('@elrondnetwork/bls-wasm');\n\nvar init = /*#__PURE__*/function () {\n  var _ref = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee() {\n    return _regenerator[\"default\"].wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return bls.init(bls.BLS12_381);\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function init() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar generatePairFromSeed = function generatePairFromSeed(privateKey) {\n  var sec = new bls.SecretKey();\n  sec.setLittleEndian(Uint8Array.from(Buffer.from(privateKey, 'hex')));\n  var pub = sec.getPublicKey();\n  return {\n    publicKey: Buffer.from(pub.serialize()).toString('hex'),\n    privateKey: Buffer.from(sec.serialize()).toString('hex')\n  };\n};\n\nvar sign = function sign(message, privateKey) {\n  var sec = new bls.SecretKey();\n  sec.setLittleEndian(Uint8Array.from(Buffer.from(privateKey, 'hex')));\n  var msg = Uint8Array.from(Buffer.from(message, 'hex'));\n  return Buffer.from(sec.sign(msg).serialize()).toString('hex');\n};\n\nmodule.exports = {\n  generatePairFromSeed: generatePairFromSeed,\n  sign: sign,\n  init: init\n};","map":{"version":3,"sources":["/home/robert/Final Project/dApp-OnlineVote/node_modules/@elrondnetwork/elrond-core-js/dist/crypto/browser/blsKeypair.js"],"names":["_interopRequireDefault","require","_regenerator","_asyncToGenerator2","bls","init","_ref","mark","_callee","wrap","_callee$","_context","prev","next","BLS12_381","stop","apply","arguments","generatePairFromSeed","privateKey","sec","SecretKey","setLittleEndian","Uint8Array","from","Buffer","pub","getPublicKey","publicKey","serialize","toString","sign","message","msg","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEA,IAAIC,YAAY,GAAGF,sBAAsB,CAACC,OAAO,CAAC,4BAAD,CAAR,CAAzC;;AAEA,IAAIE,kBAAkB,GAAGH,sBAAsB,CAACC,OAAO,CAAC,yCAAD,CAAR,CAA/C;;AAEA,IAAIG,GAAG,GAAGH,OAAO,CAAC,yBAAD,CAAjB;;AAEA,IAAII,IAAI,GACR,aACA,YAAY;AACV,MAAIC,IAAI,GAAG,CAAC,GAAGH,kBAAkB,CAAC,SAAD,CAAtB,GACX,aACAD,YAAY,CAAC,SAAD,CAAZ,CAAwBK,IAAxB,CAA6B,SAASC,OAAT,GAAmB;AAC9C,WAAON,YAAY,CAAC,SAAD,CAAZ,CAAwBO,IAAxB,CAA6B,SAASC,QAAT,CAAkBC,QAAlB,EAA4B;AAC9D,aAAO,CAAP,EAAU;AACR,gBAAQA,QAAQ,CAACC,IAAT,GAAgBD,QAAQ,CAACE,IAAjC;AACE,eAAK,CAAL;AACEF,YAAAA,QAAQ,CAACE,IAAT,GAAgB,CAAhB;AACA,mBAAOT,GAAG,CAACC,IAAJ,CAASD,GAAG,CAACU,SAAb,CAAP;;AAEF,eAAK,CAAL;AACA,eAAK,KAAL;AACE,mBAAOH,QAAQ,CAACI,IAAT,EAAP;AAPJ;AASD;AACF,KAZM,EAYJP,OAZI,CAAP;AAaD,GAdD,CAFW,CAAX;;AAkBA,SAAO,SAASH,IAAT,GAAgB;AACrB,WAAOC,IAAI,CAACU,KAAL,CAAW,IAAX,EAAiBC,SAAjB,CAAP;AACD,GAFD;AAGD,CAtBD,EAFA;;AA0BA,IAAIC,oBAAoB,GAAG,SAASA,oBAAT,CAA8BC,UAA9B,EAA0C;AACnE,MAAIC,GAAG,GAAG,IAAIhB,GAAG,CAACiB,SAAR,EAAV;AACAD,EAAAA,GAAG,CAACE,eAAJ,CAAoBC,UAAU,CAACC,IAAX,CAAgBC,MAAM,CAACD,IAAP,CAAYL,UAAZ,EAAwB,KAAxB,CAAhB,CAApB;AACA,MAAIO,GAAG,GAAGN,GAAG,CAACO,YAAJ,EAAV;AACA,SAAO;AACLC,IAAAA,SAAS,EAAEH,MAAM,CAACD,IAAP,CAAYE,GAAG,CAACG,SAAJ,EAAZ,EAA6BC,QAA7B,CAAsC,KAAtC,CADN;AAELX,IAAAA,UAAU,EAAEM,MAAM,CAACD,IAAP,CAAYJ,GAAG,CAACS,SAAJ,EAAZ,EAA6BC,QAA7B,CAAsC,KAAtC;AAFP,GAAP;AAID,CARD;;AAUA,IAAIC,IAAI,GAAG,SAASA,IAAT,CAAcC,OAAd,EAAuBb,UAAvB,EAAmC;AAC5C,MAAIC,GAAG,GAAG,IAAIhB,GAAG,CAACiB,SAAR,EAAV;AACAD,EAAAA,GAAG,CAACE,eAAJ,CAAoBC,UAAU,CAACC,IAAX,CAAgBC,MAAM,CAACD,IAAP,CAAYL,UAAZ,EAAwB,KAAxB,CAAhB,CAApB;AACA,MAAIc,GAAG,GAAGV,UAAU,CAACC,IAAX,CAAgBC,MAAM,CAACD,IAAP,CAAYQ,OAAZ,EAAqB,KAArB,CAAhB,CAAV;AACA,SAAOP,MAAM,CAACD,IAAP,CAAYJ,GAAG,CAACW,IAAJ,CAASE,GAAT,EAAcJ,SAAd,EAAZ,EAAuCC,QAAvC,CAAgD,KAAhD,CAAP;AACD,CALD;;AAOAI,MAAM,CAACC,OAAP,GAAiB;AACfjB,EAAAA,oBAAoB,EAAEA,oBADP;AAEfa,EAAAA,IAAI,EAAEA,IAFS;AAGf1B,EAAAA,IAAI,EAAEA;AAHS,CAAjB","sourcesContent":["'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar bls = require('@elrondnetwork/bls-wasm');\n\nvar init =\n/*#__PURE__*/\nfunction () {\n  var _ref = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee() {\n    return _regenerator[\"default\"].wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return bls.init(bls.BLS12_381);\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function init() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar generatePairFromSeed = function generatePairFromSeed(privateKey) {\n  var sec = new bls.SecretKey();\n  sec.setLittleEndian(Uint8Array.from(Buffer.from(privateKey, 'hex')));\n  var pub = sec.getPublicKey();\n  return {\n    publicKey: Buffer.from(pub.serialize()).toString('hex'),\n    privateKey: Buffer.from(sec.serialize()).toString('hex')\n  };\n};\n\nvar sign = function sign(message, privateKey) {\n  var sec = new bls.SecretKey();\n  sec.setLittleEndian(Uint8Array.from(Buffer.from(privateKey, 'hex')));\n  var msg = Uint8Array.from(Buffer.from(message, 'hex'));\n  return Buffer.from(sec.sign(msg).serialize()).toString('hex');\n};\n\nmodule.exports = {\n  generatePairFromSeed: generatePairFromSeed,\n  sign: sign,\n  init: init\n};"]},"metadata":{},"sourceType":"script"}