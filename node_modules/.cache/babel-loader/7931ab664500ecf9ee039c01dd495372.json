{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AddressValue = exports.AddressType = void 0;\n\nconst types_1 = require(\"./types\");\n\nclass AddressType extends types_1.PrimitiveType {\n  constructor() {\n    super(\"Address\");\n  }\n\n}\n\nexports.AddressType = AddressType;\n/**\n * An address fed to or fetched from a Smart Contract contract, as an immutable abstraction.\n */\n\nclass AddressValue extends types_1.PrimitiveValue {\n  constructor(value) {\n    super(new AddressType());\n    this.value = value;\n  }\n  /**\n   * Returns whether two objects have the same value.\n   *\n   * @param other another AddressValue\n   */\n\n\n  equals(other) {\n    return this.value.equals(other.value);\n  }\n\n  valueOf() {\n    return this.value;\n  }\n\n}\n\nexports.AddressValue = AddressValue;","map":{"version":3,"sources":["../../../src/smartcontracts/typesystem/address.ts"],"names":[],"mappings":";;;;;;;AAEA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAEA,MAAa,WAAb,SAAiC,OAAA,CAAA,aAAjC,CAA8C;AAC1C,EAAA,WAAA,GAAA;AACI,UAAM,SAAN;AACH;;AAHyC;;AAA9C,OAAA,CAAA,WAAA,GAAA,WAAA;AAMA;;AAEG;;AACH,MAAa,YAAb,SAAkC,OAAA,CAAA,cAAlC,CAAgD;AAG5C,EAAA,WAAA,CAAY,KAAZ,EAA0B;AACtB,UAAM,IAAI,WAAJ,EAAN;AACA,SAAK,KAAL,GAAa,KAAb;AACH;AAED;;;;AAIG;;;AACH,EAAA,MAAM,CAAC,KAAD,EAAoB;AACtB,WAAO,KAAK,KAAL,CAAW,MAAX,CAAkB,KAAK,CAAC,KAAxB,CAAP;AACH;;AAED,EAAA,OAAO,GAAA;AACH,WAAO,KAAK,KAAZ;AACH;;AAnB2C;;AAAhD,OAAA,CAAA,YAAA,GAAA,YAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AddressValue = exports.AddressType = void 0;\nconst types_1 = require(\"./types\");\nclass AddressType extends types_1.PrimitiveType {\n    constructor() {\n        super(\"Address\");\n    }\n}\nexports.AddressType = AddressType;\n/**\n * An address fed to or fetched from a Smart Contract contract, as an immutable abstraction.\n */\nclass AddressValue extends types_1.PrimitiveValue {\n    constructor(value) {\n        super(new AddressType());\n        this.value = value;\n    }\n    /**\n     * Returns whether two objects have the same value.\n     *\n     * @param other another AddressValue\n     */\n    equals(other) {\n        return this.value.equals(other.value);\n    }\n    valueOf() {\n        return this.value;\n    }\n}\nexports.AddressValue = AddressValue;\n//# sourceMappingURL=address.js.map"]},"metadata":{},"sourceType":"script"}