{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SendContext = void 0;\n\nconst networkParams_1 = require(\"../../networkParams\");\n\nconst strictChecker_1 = require(\"../strictChecker\");\n\nconst errors_1 = require(\"../../errors\");\n\nconst systemWrapper_1 = require(\"./systemWrapper\");\n/**\n * Stores contextual information which is needed when preparing a transaction.\n */\n\n\nclass SendContext {\n  constructor(provider) {\n    this.sender_ = null;\n    this.provider_ = provider;\n    this.gas_ = null;\n    this.logger_ = null;\n    this.value_ = null;\n    this.checker = new strictChecker_1.StrictChecker();\n  }\n\n  provider(provider) {\n    this.provider_ = provider;\n    return this;\n  }\n\n  sender(sender) {\n    this.sender_ = sender;\n    return this;\n  }\n\n  gas(gas) {\n    this.gas_ = new networkParams_1.GasLimit(gas);\n    return this;\n  }\n\n  autoGas(baseGas) {\n    return this.gas(systemWrapper_1.getGasFromValue(baseGas, this.value_));\n  }\n\n  logger(logger) {\n    this.logger_ = logger;\n    return this;\n  }\n\n  value(value) {\n    this.value_ = value;\n    return this;\n  }\n\n  getAndResetValue() {\n    let value = this.value_;\n    this.value_ = null;\n    return value;\n  }\n\n  getSender() {\n    if (this.sender_) {\n      return this.sender_;\n    }\n\n    throw new errors_1.Err(\"sender not set\");\n  }\n\n  getSenderOptional() {\n    return this.sender_;\n  }\n\n  getProvider() {\n    return this.provider_;\n  }\n\n  getGasLimit() {\n    if (this.gas_) {\n      return this.gas_;\n    }\n\n    throw new errors_1.Err(\"gas limit not set\");\n  }\n\n  getLogger() {\n    return this.logger_;\n  }\n\n}\n\nexports.SendContext = SendContext;","map":{"version":3,"sources":["../../../src/smartcontracts/wrapper/sendContext.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,eAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AAGA,MAAA,eAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AAIA,MAAA,QAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,MAAA,eAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;AAEA;;AAEG;;;AACH,MAAa,WAAb,CAAwB;AAQpB,EAAA,WAAA,CAAY,QAAZ,EAA+B;AAC3B,SAAK,OAAL,GAAe,IAAf;AACA,SAAK,SAAL,GAAiB,QAAjB;AACA,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,OAAL,GAAe,IAAf;AACA,SAAK,MAAL,GAAc,IAAd;AACA,SAAK,OAAL,GAAe,IAAI,eAAA,CAAA,aAAJ,EAAf;AACH;;AAED,EAAA,QAAQ,CAAC,QAAD,EAAoB;AACxB,SAAK,SAAL,GAAiB,QAAjB;AACA,WAAO,IAAP;AACH;;AAED,EAAA,MAAM,CAAC,MAAD,EAAmB;AACrB,SAAK,OAAL,GAAe,MAAf;AACA,WAAO,IAAP;AACH;;AAED,EAAA,GAAG,CAAC,GAAD,EAAY;AACX,SAAK,IAAL,GAAY,IAAI,eAAA,CAAA,QAAJ,CAAa,GAAb,CAAZ;AACA,WAAO,IAAP;AACH;;AAED,EAAA,OAAO,CAAC,OAAD,EAAgB;AACnB,WAAO,KAAK,GAAL,CAAS,eAAA,CAAA,eAAA,CAAgB,OAAhB,EAAyB,KAAK,MAA9B,CAAT,CAAP;AACH;;AAED,EAAA,MAAM,CAAC,MAAD,EAA8B;AAChC,SAAK,OAAL,GAAe,MAAf;AACA,WAAO,IAAP;AACH;;AAED,EAAA,KAAK,CAAC,KAAD,EAAe;AAChB,SAAK,MAAL,GAAc,KAAd;AACA,WAAO,IAAP;AACH;;AAED,EAAA,gBAAgB,GAAA;AACZ,QAAI,KAAK,GAAG,KAAK,MAAjB;AACA,SAAK,MAAL,GAAc,IAAd;AACA,WAAO,KAAP;AACH;;AAED,EAAA,SAAS,GAAA;AACL,QAAI,KAAK,OAAT,EAAkB;AACd,aAAO,KAAK,OAAZ;AACH;;AACD,UAAM,IAAI,QAAA,CAAA,GAAJ,CAAQ,gBAAR,CAAN;AACH;;AAED,EAAA,iBAAiB,GAAA;AACb,WAAO,KAAK,OAAZ;AACH;;AAED,EAAA,WAAW,GAAA;AACP,WAAO,KAAK,SAAZ;AACH;;AAED,EAAA,WAAW,GAAA;AACP,QAAI,KAAK,IAAT,EAAe;AACX,aAAO,KAAK,IAAZ;AACH;;AACD,UAAM,IAAI,QAAA,CAAA,GAAJ,CAAQ,mBAAR,CAAN;AACH;;AAED,EAAA,SAAS,GAAA;AACL,WAAO,KAAK,OAAZ;AACH;;AA5EmB;;AAAxB,OAAA,CAAA,WAAA,GAAA,WAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SendContext = void 0;\nconst networkParams_1 = require(\"../../networkParams\");\nconst strictChecker_1 = require(\"../strictChecker\");\nconst errors_1 = require(\"../../errors\");\nconst systemWrapper_1 = require(\"./systemWrapper\");\n/**\n * Stores contextual information which is needed when preparing a transaction.\n */\nclass SendContext {\n    constructor(provider) {\n        this.sender_ = null;\n        this.provider_ = provider;\n        this.gas_ = null;\n        this.logger_ = null;\n        this.value_ = null;\n        this.checker = new strictChecker_1.StrictChecker();\n    }\n    provider(provider) {\n        this.provider_ = provider;\n        return this;\n    }\n    sender(sender) {\n        this.sender_ = sender;\n        return this;\n    }\n    gas(gas) {\n        this.gas_ = new networkParams_1.GasLimit(gas);\n        return this;\n    }\n    autoGas(baseGas) {\n        return this.gas(systemWrapper_1.getGasFromValue(baseGas, this.value_));\n    }\n    logger(logger) {\n        this.logger_ = logger;\n        return this;\n    }\n    value(value) {\n        this.value_ = value;\n        return this;\n    }\n    getAndResetValue() {\n        let value = this.value_;\n        this.value_ = null;\n        return value;\n    }\n    getSender() {\n        if (this.sender_) {\n            return this.sender_;\n        }\n        throw new errors_1.Err(\"sender not set\");\n    }\n    getSenderOptional() {\n        return this.sender_;\n    }\n    getProvider() {\n        return this.provider_;\n    }\n    getGasLimit() {\n        if (this.gas_) {\n            return this.gas_;\n        }\n        throw new errors_1.Err(\"gas limit not set\");\n    }\n    getLogger() {\n        return this.logger_;\n    }\n}\nexports.SendContext = SendContext;\n//# sourceMappingURL=sendContext.js.map"]},"metadata":{},"sourceType":"script"}