{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Interaction = void 0;\n\nconst balance_1 = require(\"../balance\");\n\nconst networkParams_1 = require(\"../networkParams\");\n\nconst query_1 = require(\"./query\");\n\nconst address_1 = require(\"../address\");\n\nconst nonce_1 = require(\"../nonce\");\n/**\n * Interactions can be seen as mutable transaction & query builders.\n *\n * Aside from building transactions and queries, the interactors are also responsible for interpreting\n * the execution outcome for the objects they've built.\n */\n\n\nclass Interaction {\n  constructor(contract, executingFunction, interpretingFunction, args, receiver) {\n    this.nonce = new nonce_1.Nonce(0);\n    this.value = balance_1.Balance.Zero();\n    this.gasLimit = networkParams_1.GasLimit.min();\n    this.contract = contract;\n    this.executingFunction = executingFunction;\n    this.interpretingFunction = interpretingFunction;\n    this.args = args;\n    this.receiver = receiver;\n  }\n\n  getContract() {\n    return this.contract;\n  }\n\n  getInterpretingFunction() {\n    return this.interpretingFunction;\n  }\n\n  getExecutingFunction() {\n    return this.executingFunction;\n  }\n\n  getArguments() {\n    return this.args;\n  }\n\n  getValue() {\n    return this.value;\n  }\n\n  getGasLimit() {\n    return this.gasLimit;\n  }\n\n  buildTransaction() {\n    // TODO: create as \"deploy\" transaction if the function is \"init\" (or find a better pattern for deployments).\n    let transaction = this.contract.call({\n      func: this.executingFunction,\n      // GasLimit will be set using \"withGasLimit()\".\n      gasLimit: this.gasLimit,\n      args: this.args,\n      // Value will be set using \"withValue()\".\n      value: this.value,\n      receiver: this.receiver\n    });\n    transaction.setNonce(this.nonce);\n    return transaction;\n  }\n\n  buildQuery() {\n    return new query_1.Query({\n      address: this.contract.getAddress(),\n      func: this.executingFunction,\n      args: this.args,\n      // Value will be set using \"withValue()\".\n      value: this.value,\n      // Caller will be set by the InteractionRunner.\n      caller: new address_1.Address()\n    });\n  }\n  /**\n   * Interprets the results of a previously broadcasted (and fully executed) smart contract transaction.\n   * The outcome is structured such that it allows quick access to each level of detail.\n   */\n\n\n  interpretExecutionResults(transactionOnNetwork) {\n    return interpretExecutionResults(this.getEndpoint(), transactionOnNetwork);\n  }\n  /**\n   * Interprets the raw outcome of a Smart Contract query.\n   * The outcome is structured such that it allows quick access to each level of detail.\n   */\n\n\n  interpretQueryResponse(queryResponse) {\n    let endpoint = this.getEndpoint();\n    queryResponse.setEndpointDefinition(endpoint);\n    let values = queryResponse.outputTyped();\n    let returnCode = queryResponse.returnCode;\n    return {\n      queryResponse: queryResponse,\n      values: values,\n      firstValue: values[0],\n      returnCode: returnCode\n    };\n  }\n\n  withValue(value) {\n    this.value = value;\n    return this;\n  }\n\n  withGasLimit(gasLimit) {\n    this.gasLimit = gasLimit;\n    return this;\n  }\n\n  withNonce(nonce) {\n    this.nonce = nonce;\n    return this;\n  }\n\n  getEndpoint() {\n    return this.getContract().getAbi().getEndpoint(this.getInterpretingFunction());\n  }\n\n}\n\nexports.Interaction = Interaction;\n\nfunction interpretExecutionResults(endpoint, transactionOnNetwork) {\n  let smartContractResults = transactionOnNetwork.getSmartContractResults();\n  let immediateResult = smartContractResults.getImmediate();\n  let resultingCalls = smartContractResults.getResultingCalls();\n  immediateResult.setEndpointDefinition(endpoint);\n  let values = immediateResult.outputTyped();\n  let returnCode = immediateResult.getReturnCode();\n  return {\n    transactionOnNetwork: transactionOnNetwork,\n    smartContractResults: smartContractResults,\n    immediateResult,\n    resultingCalls,\n    values,\n    firstValue: values[0],\n    returnCode: returnCode\n  };\n}","map":{"version":3,"sources":["../../src/smartcontracts/interaction.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Interaction = void 0;\nconst balance_1 = require(\"../balance\");\nconst networkParams_1 = require(\"../networkParams\");\nconst query_1 = require(\"./query\");\nconst address_1 = require(\"../address\");\nconst nonce_1 = require(\"../nonce\");\n/**\n * Interactions can be seen as mutable transaction & query builders.\n *\n * Aside from building transactions and queries, the interactors are also responsible for interpreting\n * the execution outcome for the objects they've built.\n */\nclass Interaction {\n    constructor(contract, executingFunction, interpretingFunction, args, receiver) {\n        this.nonce = new nonce_1.Nonce(0);\n        this.value = balance_1.Balance.Zero();\n        this.gasLimit = networkParams_1.GasLimit.min();\n        this.contract = contract;\n        this.executingFunction = executingFunction;\n        this.interpretingFunction = interpretingFunction;\n        this.args = args;\n        this.receiver = receiver;\n    }\n    getContract() {\n        return this.contract;\n    }\n    getInterpretingFunction() {\n        return this.interpretingFunction;\n    }\n    getExecutingFunction() {\n        return this.executingFunction;\n    }\n    getArguments() {\n        return this.args;\n    }\n    getValue() {\n        return this.value;\n    }\n    getGasLimit() {\n        return this.gasLimit;\n    }\n    buildTransaction() {\n        // TODO: create as \"deploy\" transaction if the function is \"init\" (or find a better pattern for deployments).\n        let transaction = this.contract.call({\n            func: this.executingFunction,\n            // GasLimit will be set using \"withGasLimit()\".\n            gasLimit: this.gasLimit,\n            args: this.args,\n            // Value will be set using \"withValue()\".\n            value: this.value,\n            receiver: this.receiver,\n        });\n        transaction.setNonce(this.nonce);\n        return transaction;\n    }\n    buildQuery() {\n        return new query_1.Query({\n            address: this.contract.getAddress(),\n            func: this.executingFunction,\n            args: this.args,\n            // Value will be set using \"withValue()\".\n            value: this.value,\n            // Caller will be set by the InteractionRunner.\n            caller: new address_1.Address()\n        });\n    }\n    /**\n     * Interprets the results of a previously broadcasted (and fully executed) smart contract transaction.\n     * The outcome is structured such that it allows quick access to each level of detail.\n     */\n    interpretExecutionResults(transactionOnNetwork) {\n        return interpretExecutionResults(this.getEndpoint(), transactionOnNetwork);\n    }\n    /**\n     * Interprets the raw outcome of a Smart Contract query.\n     * The outcome is structured such that it allows quick access to each level of detail.\n     */\n    interpretQueryResponse(queryResponse) {\n        let endpoint = this.getEndpoint();\n        queryResponse.setEndpointDefinition(endpoint);\n        let values = queryResponse.outputTyped();\n        let returnCode = queryResponse.returnCode;\n        return {\n            queryResponse: queryResponse,\n            values: values,\n            firstValue: values[0],\n            returnCode: returnCode\n        };\n    }\n    withValue(value) {\n        this.value = value;\n        return this;\n    }\n    withGasLimit(gasLimit) {\n        this.gasLimit = gasLimit;\n        return this;\n    }\n    withNonce(nonce) {\n        this.nonce = nonce;\n        return this;\n    }\n    getEndpoint() {\n        return this.getContract().getAbi().getEndpoint(this.getInterpretingFunction());\n    }\n}\nexports.Interaction = Interaction;\nfunction interpretExecutionResults(endpoint, transactionOnNetwork) {\n    let smartContractResults = transactionOnNetwork.getSmartContractResults();\n    let immediateResult = smartContractResults.getImmediate();\n    let resultingCalls = smartContractResults.getResultingCalls();\n    immediateResult.setEndpointDefinition(endpoint);\n    let values = immediateResult.outputTyped();\n    let returnCode = immediateResult.getReturnCode();\n    return {\n        transactionOnNetwork: transactionOnNetwork,\n        smartContractResults: smartContractResults,\n        immediateResult,\n        resultingCalls,\n        values,\n        firstValue: values[0],\n        returnCode: returnCode\n    };\n}\n//# sourceMappingURL=interaction.js.map"]},"metadata":{},"sourceType":"script"}