{"ast":null,"code":"import React__default, { useState, useEffect, useRef, createElement, Fragment } from 'react';\nimport { Transaction, Nonce, Balance, Address, GasPrice, GasLimit, TransactionPayload, ChainID, TransactionVersion, NetworkConfig, GasPriceModifier } from '@elrondnetwork/erdjs';\n\nvar useDebounce = function useDebounce(value, timeout) {\n  var _useState = useState(value),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var effect = function effect() {\n    var handler = setTimeout(function () {\n      return setState(value);\n    }, timeout);\n    return function () {\n      return clearTimeout(handler);\n    };\n  };\n\n  useEffect(effect, [value]);\n  return state;\n};\n\nvar Trim = function Trim(_ref) {\n  var text = _ref.text,\n      dataTestId = _ref[\"data-testid\"],\n      _ref$className = _ref.className,\n      className = _ref$className === void 0 ? \"\" : _ref$className;\n\n  var _React$useState = useState(0),\n      debounce = _React$useState[0],\n      setDebounce = _React$useState[1];\n\n  var _React$useState2 = useState(false),\n      overflow = _React$useState2[0],\n      setOverflow = _React$useState2[1];\n\n  var trimRef = useRef(document.createElement(\"span\"));\n  var hiddenTextRef = useRef(document.createElement(\"span\"));\n  var debounceTracker = useDebounce(debounce, 100);\n\n  var listener = function listener() {\n    setDebounce(debounce + 1);\n  };\n\n  var effect = function effect() {\n    window.addEventListener(\"resize\", listener);\n    return function () {\n      window.removeEventListener(\"resize\", listener);\n    };\n  };\n\n  useEffect(effect, [debounce]);\n  useEffect(function () {\n    if (trimRef.current && hiddenTextRef.current) {\n      var diff = hiddenTextRef.current.offsetWidth - trimRef.current.offsetWidth;\n      setOverflow(diff > 1);\n    }\n  }, [debounceTracker]);\n  return createElement(\"span\", {\n    ref: trimRef,\n    className: \"trim \" + (overflow ? \"overflow\" : \"\"),\n    \"data-testid\": dataTestId\n  }, createElement(\"span\", {\n    ref: hiddenTextRef,\n    className: \"hidden-text-ref\"\n  }, text), overflow ? createElement(Fragment, null, createElement(\"span\", {\n    className: \"left\"\n  }, createElement(\"span\", {\n    className: className\n  }, String(text).substring(0, Math.floor(text.length / 2)))), createElement(\"span\", {\n    className: \"ellipsis \" + className\n  }, \"...\"), createElement(\"span\", {\n    className: \"right\"\n  }, createElement(\"span\", {\n    className: className\n  }, String(text).substring(Math.ceil(text.length / 2))))) : createElement(\"span\", {\n    className: className\n  }, text));\n};\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction createCommonjsModule(fn, module) {\n  return module = {\n    exports: {}\n  }, fn(module, module.exports), module.exports;\n}\n\nvar bignumber = createCommonjsModule(function (module) {\n  (function (globalObject) {\n    /*\r\n     *      bignumber.js v9.0.1\r\n     *      A JavaScript library for arbitrary-precision arithmetic.\r\n     *      https://github.com/MikeMcl/bignumber.js\r\n     *      Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n     *      MIT Licensed.\r\n     *\r\n     *      BigNumber.prototype methods     |  BigNumber methods\r\n     *                                      |\r\n     *      absoluteValue            abs    |  clone\r\n     *      comparedTo                      |  config               set\r\n     *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n     *      dividedBy                div    |      ROUNDING_MODE\r\n     *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n     *      exponentiatedBy          pow    |      RANGE\r\n     *      integerValue                    |      CRYPTO\r\n     *      isEqualTo                eq     |      MODULO_MODE\r\n     *      isFinite                        |      POW_PRECISION\r\n     *      isGreaterThan            gt     |      FORMAT\r\n     *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n     *      isInteger                       |  isBigNumber\r\n     *      isLessThan               lt     |  maximum              max\r\n     *      isLessThanOrEqualTo      lte    |  minimum              min\r\n     *      isNaN                           |  random\r\n     *      isNegative                      |  sum\r\n     *      isPositive                      |\r\n     *      isZero                          |\r\n     *      minus                           |\r\n     *      modulo                   mod    |\r\n     *      multipliedBy             times  |\r\n     *      negated                         |\r\n     *      plus                            |\r\n     *      precision                sd     |\r\n     *      shiftedBy                       |\r\n     *      squareRoot               sqrt   |\r\n     *      toExponential                   |\r\n     *      toFixed                         |\r\n     *      toFormat                        |\r\n     *      toFraction                      |\r\n     *      toJSON                          |\r\n     *      toNumber                        |\r\n     *      toPrecision                     |\r\n     *      toString                        |\r\n     *      valueOf                         |\r\n     *\r\n     */\n    var BigNumber,\n        isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\n        mathceil = Math.ceil,\n        mathfloor = Math.floor,\n        bignumberError = '[BigNumber Error] ',\n        tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\n        BASE = 1e14,\n        LOG_BASE = 14,\n        MAX_SAFE_INTEGER = 0x1fffffffffffff,\n        // 2^53 - 1\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\n        SQRT_BASE = 1e7,\n        // EDITABLE\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\n    MAX = 1E9; // 0 to MAX_INT32\n\n    /*\r\n     * Create and return a BigNumber constructor.\r\n     */\n\n    function clone(configObject) {\n      var div,\n          convertBase,\n          parseNumeric,\n          P = BigNumber.prototype = {\n        constructor: BigNumber,\n        toString: null,\n        valueOf: null\n      },\n          ONE = new BigNumber(1),\n          //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\n      // The default values below must be integers within the inclusive ranges stated.\n      // The values can also be changed at run-time using BigNumber.set.\n      // The maximum number of decimal places for operations involving division.\n      DECIMAL_PLACES = 20,\n          // 0 to MAX\n      // The rounding mode used when rounding to the above decimal places, and when using\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\n      // UP         0 Away from zero.\n      // DOWN       1 Towards zero.\n      // CEIL       2 Towards +Infinity.\n      // FLOOR      3 Towards -Infinity.\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n      ROUNDING_MODE = 4,\n          // 0 to 8\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\n      // The exponent value at and beneath which toString returns exponential notation.\n      // Number type: -7\n      TO_EXP_NEG = -7,\n          // 0 to -MAX\n      // The exponent value at and above which toString returns exponential notation.\n      // Number type: 21\n      TO_EXP_POS = 21,\n          // 0 to MAX\n      // RANGE : [MIN_EXP, MAX_EXP]\n      // The minimum exponent value, beneath which underflow to zero occurs.\n      // Number type: -324  (5e-324)\n      MIN_EXP = -1e7,\n          // -1 to -MAX\n      // The maximum exponent value, above which overflow to Infinity occurs.\n      // Number type:  308  (1.7976931348623157e+308)\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\n      MAX_EXP = 1e7,\n          // 1 to MAX\n      // Whether to use cryptographically-secure random number generation, if available.\n      CRYPTO = false,\n          // true or false\n      // The modulo mode used when calculating the modulus: a mod n.\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\n      // The remainder (r) is calculated as: r = a - n * q.\n      //\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\n      // DOWN      1 The remainder has the same sign as the dividend.\n      //             This modulo mode is commonly known as 'truncated division' and is\n      //             equivalent to (a % n) in JavaScript.\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\n      //             The remainder is always positive.\n      //\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\n      // modes are commonly used for the modulus operation.\n      // Although the other rounding modes can also be used, they may not give useful results.\n      MODULO_MODE = 1,\n          // 0 to 9\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\n      POW_PRECISION = 0,\n          // 0 to MAX\n      // The format specification used by the BigNumber.prototype.toFormat method.\n      FORMAT = {\n        prefix: '',\n        groupSize: 3,\n        secondaryGroupSize: 0,\n        groupSeparator: ',',\n        decimalSeparator: '.',\n        fractionGroupSize: 0,\n        fractionGroupSeparator: '\\xA0',\n        // non-breaking space\n        suffix: ''\n      },\n          // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\n      // '-', '.', whitespace, or repeated character.\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz'; //------------------------------------------------------------------------------------------\n      // CONSTRUCTOR\n\n      /*\r\n       * The BigNumber constructor and exported function.\r\n       * Create and return a new instance of a BigNumber object.\r\n       *\r\n       * v {number|string|BigNumber} A numeric value.\r\n       * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n       */\n\n      function BigNumber(v, b) {\n        var alphabet,\n            c,\n            caseChanged,\n            e,\n            i,\n            isNum,\n            len,\n            str,\n            x = this; // Enable constructor call without `new`.\n\n        if (!(x instanceof BigNumber)) return new BigNumber(v, b);\n\n        if (b == null) {\n          if (v && v._isBigNumber === true) {\n            x.s = v.s;\n\n            if (!v.c || v.e > MAX_EXP) {\n              x.c = x.e = null;\n            } else if (v.e < MIN_EXP) {\n              x.c = [x.e = 0];\n            } else {\n              x.e = v.e;\n              x.c = v.c.slice();\n            }\n\n            return;\n          }\n\n          if ((isNum = typeof v == 'number') && v * 0 == 0) {\n            // Use `1 / n` to handle minus zero also.\n            x.s = 1 / v < 0 ? (v = -v, -1) : 1; // Fast path for integers, where n < 2147483648 (2**31).\n\n            if (v === ~~v) {\n              for (e = 0, i = v; i >= 10; i /= 10, e++);\n\n              if (e > MAX_EXP) {\n                x.c = x.e = null;\n              } else {\n                x.e = e;\n                x.c = [v];\n              }\n\n              return;\n            }\n\n            str = String(v);\n          } else {\n            if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\n            x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\n          } // Decimal point?\n\n\n          if ((e = str.indexOf('.')) > -1) str = str.replace('.', ''); // Exponential form?\n\n          if ((i = str.search(/e/i)) > 0) {\n            // Determine exponent.\n            if (e < 0) e = i;\n            e += +str.slice(i + 1);\n            str = str.substring(0, i);\n          } else if (e < 0) {\n            // Integer.\n            e = str.length;\n          }\n        } else {\n          // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\n          intCheck(b, 2, ALPHABET.length, 'Base'); // Allow exponential notation to be used with base 10 argument, while\n          // also rounding to DECIMAL_PLACES as with other bases.\n\n          if (b == 10) {\n            x = new BigNumber(v);\n            return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\n          }\n\n          str = String(v);\n\n          if (isNum = typeof v == 'number') {\n            // Avoid potential interpretation of Infinity and NaN as base 44+ values.\n            if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\n            x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1; // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n\n            if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\n              throw Error(tooManyDigits + v);\n            }\n          } else {\n            x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\n          }\n\n          alphabet = ALPHABET.slice(0, b);\n          e = i = 0; // Check that str is a valid base b number.\n          // Don't use RegExp, so alphabet can contain special characters.\n\n          for (len = str.length; i < len; i++) {\n            if (alphabet.indexOf(c = str.charAt(i)) < 0) {\n              if (c == '.') {\n                // If '.' is not the first character and it has not be found before.\n                if (i > e) {\n                  e = len;\n                  continue;\n                }\n              } else if (!caseChanged) {\n                // Allow e.g. hexadecimal 'FF' as well as 'ff'.\n                if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {\n                  caseChanged = true;\n                  i = -1;\n                  e = 0;\n                  continue;\n                }\n              }\n\n              return parseNumeric(x, String(v), isNum, b);\n            }\n          } // Prevent later check for length on converted number.\n\n\n          isNum = false;\n          str = convertBase(str, b, 10, x.s); // Decimal point?\n\n          if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');else e = str.length;\n        } // Determine leading zeros.\n\n\n        for (i = 0; str.charCodeAt(i) === 48; i++); // Determine trailing zeros.\n\n\n        for (len = str.length; str.charCodeAt(--len) === 48;);\n\n        if (str = str.slice(i, ++len)) {\n          len -= i; // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n\n          if (isNum && BigNumber.DEBUG && len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\n            throw Error(tooManyDigits + x.s * v);\n          } // Overflow?\n\n\n          if ((e = e - i - 1) > MAX_EXP) {\n            // Infinity.\n            x.c = x.e = null; // Underflow?\n          } else if (e < MIN_EXP) {\n            // Zero.\n            x.c = [x.e = 0];\n          } else {\n            x.e = e;\n            x.c = []; // Transform base\n            // e is the base 10 exponent.\n            // i is where to slice str to get the first element of the coefficient array.\n\n            i = (e + 1) % LOG_BASE;\n            if (e < 0) i += LOG_BASE; // i < 1\n\n            if (i < len) {\n              if (i) x.c.push(+str.slice(0, i));\n\n              for (len -= LOG_BASE; i < len;) {\n                x.c.push(+str.slice(i, i += LOG_BASE));\n              }\n\n              i = LOG_BASE - (str = str.slice(i)).length;\n            } else {\n              i -= len;\n            }\n\n            for (; i--; str += '0');\n\n            x.c.push(+str);\n          }\n        } else {\n          // Zero.\n          x.c = [x.e = 0];\n        }\n      } // CONSTRUCTOR PROPERTIES\n\n\n      BigNumber.clone = clone;\n      BigNumber.ROUND_UP = 0;\n      BigNumber.ROUND_DOWN = 1;\n      BigNumber.ROUND_CEIL = 2;\n      BigNumber.ROUND_FLOOR = 3;\n      BigNumber.ROUND_HALF_UP = 4;\n      BigNumber.ROUND_HALF_DOWN = 5;\n      BigNumber.ROUND_HALF_EVEN = 6;\n      BigNumber.ROUND_HALF_CEIL = 7;\n      BigNumber.ROUND_HALF_FLOOR = 8;\n      BigNumber.EUCLID = 9;\n      /*\r\n       * Configure infrequently-changing library-wide settings.\r\n       *\r\n       * Accept an object with the following optional properties (if the value of a property is\r\n       * a number, it must be an integer within the inclusive range stated):\r\n       *\r\n       *   DECIMAL_PLACES   {number}           0 to MAX\r\n       *   ROUNDING_MODE    {number}           0 to 8\r\n       *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n       *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n       *   CRYPTO           {boolean}          true or false\r\n       *   MODULO_MODE      {number}           0 to 9\r\n       *   POW_PRECISION       {number}           0 to MAX\r\n       *   ALPHABET         {string}           A string of two or more unique characters which does\r\n       *                                       not contain '.'.\r\n       *   FORMAT           {object}           An object with some of the following properties:\r\n       *     prefix                 {string}\r\n       *     groupSize              {number}\r\n       *     secondaryGroupSize     {number}\r\n       *     groupSeparator         {string}\r\n       *     decimalSeparator       {string}\r\n       *     fractionGroupSize      {number}\r\n       *     fractionGroupSeparator {string}\r\n       *     suffix                 {string}\r\n       *\r\n       * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n       *\r\n       * E.g.\r\n       * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n       *\r\n       * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n       *\r\n       * Return an object with the properties current values.\r\n       */\n\n      BigNumber.config = BigNumber.set = function (obj) {\n        var p, v;\n\n        if (obj != null) {\n          if (typeof obj == 'object') {\n            // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\n            // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\n            if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\n              v = obj[p];\n              intCheck(v, 0, MAX, p);\n              DECIMAL_PLACES = v;\n            } // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\n            // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\n\n\n            if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\n              v = obj[p];\n              intCheck(v, 0, 8, p);\n              ROUNDING_MODE = v;\n            } // EXPONENTIAL_AT {number|number[]}\n            // Integer, -MAX to MAX inclusive or\n            // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\n            // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\n\n\n            if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\n              v = obj[p];\n\n              if (v && v.pop) {\n                intCheck(v[0], -MAX, 0, p);\n                intCheck(v[1], 0, MAX, p);\n                TO_EXP_NEG = v[0];\n                TO_EXP_POS = v[1];\n              } else {\n                intCheck(v, -MAX, MAX, p);\n                TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\n              }\n            } // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\n            // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\n            // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\n\n\n            if (obj.hasOwnProperty(p = 'RANGE')) {\n              v = obj[p];\n\n              if (v && v.pop) {\n                intCheck(v[0], -MAX, -1, p);\n                intCheck(v[1], 1, MAX, p);\n                MIN_EXP = v[0];\n                MAX_EXP = v[1];\n              } else {\n                intCheck(v, -MAX, MAX, p);\n\n                if (v) {\n                  MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\n                } else {\n                  throw Error(bignumberError + p + ' cannot be zero: ' + v);\n                }\n              }\n            } // CRYPTO {boolean} true or false.\n            // '[BigNumber Error] CRYPTO not true or false: {v}'\n            // '[BigNumber Error] crypto unavailable'\n\n\n            if (obj.hasOwnProperty(p = 'CRYPTO')) {\n              v = obj[p];\n\n              if (v === !!v) {\n                if (v) {\n                  if (typeof crypto != 'undefined' && crypto && (crypto.getRandomValues || crypto.randomBytes)) {\n                    CRYPTO = v;\n                  } else {\n                    CRYPTO = !v;\n                    throw Error(bignumberError + 'crypto unavailable');\n                  }\n                } else {\n                  CRYPTO = v;\n                }\n              } else {\n                throw Error(bignumberError + p + ' not true or false: ' + v);\n              }\n            } // MODULO_MODE {number} Integer, 0 to 9 inclusive.\n            // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\n\n\n            if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\n              v = obj[p];\n              intCheck(v, 0, 9, p);\n              MODULO_MODE = v;\n            } // POW_PRECISION {number} Integer, 0 to MAX inclusive.\n            // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\n\n\n            if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\n              v = obj[p];\n              intCheck(v, 0, MAX, p);\n              POW_PRECISION = v;\n            } // FORMAT {object}\n            // '[BigNumber Error] FORMAT not an object: {v}'\n\n\n            if (obj.hasOwnProperty(p = 'FORMAT')) {\n              v = obj[p];\n              if (typeof v == 'object') FORMAT = v;else throw Error(bignumberError + p + ' not an object: ' + v);\n            } // ALPHABET {string}\n            // '[BigNumber Error] ALPHABET invalid: {v}'\n\n\n            if (obj.hasOwnProperty(p = 'ALPHABET')) {\n              v = obj[p]; // Disallow if less than two characters,\n              // or if it contains '+', '-', '.', whitespace, or a repeated character.\n\n              if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\n                ALPHABET = v;\n              } else {\n                throw Error(bignumberError + p + ' invalid: ' + v);\n              }\n            }\n          } else {\n            // '[BigNumber Error] Object expected: {v}'\n            throw Error(bignumberError + 'Object expected: ' + obj);\n          }\n        }\n\n        return {\n          DECIMAL_PLACES: DECIMAL_PLACES,\n          ROUNDING_MODE: ROUNDING_MODE,\n          EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\n          RANGE: [MIN_EXP, MAX_EXP],\n          CRYPTO: CRYPTO,\n          MODULO_MODE: MODULO_MODE,\n          POW_PRECISION: POW_PRECISION,\n          FORMAT: FORMAT,\n          ALPHABET: ALPHABET\n        };\n      };\n      /*\r\n       * Return true if v is a BigNumber instance, otherwise return false.\r\n       *\r\n       * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n       *\r\n       * v {any}\r\n       *\r\n       * '[BigNumber Error] Invalid BigNumber: {v}'\r\n       */\n\n\n      BigNumber.isBigNumber = function (v) {\n        if (!v || v._isBigNumber !== true) return false;\n        if (!BigNumber.DEBUG) return true;\n        var i,\n            n,\n            c = v.c,\n            e = v.e,\n            s = v.s;\n\n        out: if ({}.toString.call(c) == '[object Array]') {\n          if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\n            // If the first element is zero, the BigNumber value must be zero.\n            if (c[0] === 0) {\n              if (e === 0 && c.length === 1) return true;\n              break out;\n            } // Calculate number of digits that c[0] should have, based on the exponent.\n\n\n            i = (e + 1) % LOG_BASE;\n            if (i < 1) i += LOG_BASE; // Calculate number of digits of c[0].\n            //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\n\n            if (String(c[0]).length == i) {\n              for (i = 0; i < c.length; i++) {\n                n = c[i];\n                if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\n              } // Last element cannot be zero, unless it is the only element.\n\n\n              if (n !== 0) return true;\n            }\n          } // Infinity/NaN\n\n        } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\n          return true;\n        }\n\n        throw Error(bignumberError + 'Invalid BigNumber: ' + v);\n      };\n      /*\r\n       * Return a new BigNumber whose value is the maximum of the arguments.\r\n       *\r\n       * arguments {number|string|BigNumber}\r\n       */\n\n\n      BigNumber.maximum = BigNumber.max = function () {\n        return maxOrMin(arguments, P.lt);\n      };\n      /*\r\n       * Return a new BigNumber whose value is the minimum of the arguments.\r\n       *\r\n       * arguments {number|string|BigNumber}\r\n       */\n\n\n      BigNumber.minimum = BigNumber.min = function () {\n        return maxOrMin(arguments, P.gt);\n      };\n      /*\r\n       * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n       * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n       * zeros are produced).\r\n       *\r\n       * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n       *\r\n       * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n       * '[BigNumber Error] crypto unavailable'\r\n       */\n\n\n      BigNumber.random = function () {\n        var pow2_53 = 0x20000000000000; // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\n        // Check if Math.random() produces more than 32 bits of randomness.\n        // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\n        // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\n\n        var random53bitInt = Math.random() * pow2_53 & 0x1fffff ? function () {\n          return mathfloor(Math.random() * pow2_53);\n        } : function () {\n          return (Math.random() * 0x40000000 | 0) * 0x800000 + (Math.random() * 0x800000 | 0);\n        };\n        return function (dp) {\n          var a,\n              b,\n              e,\n              k,\n              v,\n              i = 0,\n              c = [],\n              rand = new BigNumber(ONE);\n          if (dp == null) dp = DECIMAL_PLACES;else intCheck(dp, 0, MAX);\n          k = mathceil(dp / LOG_BASE);\n\n          if (CRYPTO) {\n            // Browsers supporting crypto.getRandomValues.\n            if (crypto.getRandomValues) {\n              a = crypto.getRandomValues(new Uint32Array(k *= 2));\n\n              for (; i < k;) {\n                // 53 bits:\n                // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\n                // 11111 11111111 11111111 11111111 11100000 00000000 00000000\n                // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\n                //                                     11111 11111111 11111111\n                // 0x20000 is 2^21.\n                v = a[i] * 0x20000 + (a[i + 1] >>> 11); // Rejection sampling:\n                // 0 <= v < 9007199254740992\n                // Probability that v >= 9e15, is\n                // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\n\n                if (v >= 9e15) {\n                  b = crypto.getRandomValues(new Uint32Array(2));\n                  a[i] = b[0];\n                  a[i + 1] = b[1];\n                } else {\n                  // 0 <= v <= 8999999999999999\n                  // 0 <= (v % 1e14) <= 99999999999999\n                  c.push(v % 1e14);\n                  i += 2;\n                }\n              }\n\n              i = k / 2; // Node.js supporting crypto.randomBytes.\n            } else if (crypto.randomBytes) {\n              // buffer\n              a = crypto.randomBytes(k *= 7);\n\n              for (; i < k;) {\n                // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\n                // 0x100000000 is 2^32, 0x1000000 is 2^24\n                // 11111 11111111 11111111 11111111 11111111 11111111 11111111\n                // 0 <= v < 9007199254740992\n                v = (a[i] & 31) * 0x1000000000000 + a[i + 1] * 0x10000000000 + a[i + 2] * 0x100000000 + a[i + 3] * 0x1000000 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\n\n                if (v >= 9e15) {\n                  crypto.randomBytes(7).copy(a, i);\n                } else {\n                  // 0 <= (v % 1e14) <= 99999999999999\n                  c.push(v % 1e14);\n                  i += 7;\n                }\n              }\n\n              i = k / 7;\n            } else {\n              CRYPTO = false;\n              throw Error(bignumberError + 'crypto unavailable');\n            }\n          } // Use Math.random.\n\n\n          if (!CRYPTO) {\n            for (; i < k;) {\n              v = random53bitInt();\n              if (v < 9e15) c[i++] = v % 1e14;\n            }\n          }\n\n          k = c[--i];\n          dp %= LOG_BASE; // Convert trailing digits to zeros according to dp.\n\n          if (k && dp) {\n            v = POWS_TEN[LOG_BASE - dp];\n            c[i] = mathfloor(k / v) * v;\n          } // Remove trailing elements which are zero.\n\n\n          for (; c[i] === 0; c.pop(), i--); // Zero?\n\n\n          if (i < 0) {\n            c = [e = 0];\n          } else {\n            // Remove leading elements which are zero and adjust exponent accordingly.\n            for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE); // Count the digits of the first element of c to determine leading zeros, and...\n\n\n            for (i = 1, v = c[0]; v >= 10; v /= 10, i++); // adjust the exponent accordingly.\n\n\n            if (i < LOG_BASE) e -= LOG_BASE - i;\n          }\n\n          rand.e = e;\n          rand.c = c;\n          return rand;\n        };\n      }();\n      /*\r\n       * Return a BigNumber whose value is the sum of the arguments.\r\n       *\r\n       * arguments {number|string|BigNumber}\r\n       */\n\n\n      BigNumber.sum = function () {\n        var i = 1,\n            args = arguments,\n            sum = new BigNumber(args[0]);\n\n        for (; i < args.length;) sum = sum.plus(args[i++]);\n\n        return sum;\n      }; // PRIVATE FUNCTIONS\n      // Called by BigNumber and BigNumber.prototype.toString.\n\n\n      convertBase = function () {\n        var decimal = '0123456789';\n        /*\r\n         * Convert string of baseIn to an array of numbers of baseOut.\r\n         * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n         * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n         */\n\n        function toBaseOut(str, baseIn, baseOut, alphabet) {\n          var j,\n              arr = [0],\n              arrL,\n              i = 0,\n              len = str.length;\n\n          for (; i < len;) {\n            for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\n\n            arr[0] += alphabet.indexOf(str.charAt(i++));\n\n            for (j = 0; j < arr.length; j++) {\n              if (arr[j] > baseOut - 1) {\n                if (arr[j + 1] == null) arr[j + 1] = 0;\n                arr[j + 1] += arr[j] / baseOut | 0;\n                arr[j] %= baseOut;\n              }\n            }\n          }\n\n          return arr.reverse();\n        } // Convert a numeric string of baseIn to a numeric string of baseOut.\n        // If the caller is toString, we are converting from base 10 to baseOut.\n        // If the caller is BigNumber, we are converting from baseIn to base 10.\n\n\n        return function (str, baseIn, baseOut, sign, callerIsToString) {\n          var alphabet,\n              d,\n              e,\n              k,\n              r,\n              x,\n              xc,\n              y,\n              i = str.indexOf('.'),\n              dp = DECIMAL_PLACES,\n              rm = ROUNDING_MODE; // Non-integer.\n\n          if (i >= 0) {\n            k = POW_PRECISION; // Unlimited precision.\n\n            POW_PRECISION = 0;\n            str = str.replace('.', '');\n            y = new BigNumber(baseIn);\n            x = y.pow(str.length - i);\n            POW_PRECISION = k; // Convert str as if an integer, then restore the fraction part by dividing the\n            // result by its base raised to a power.\n\n            y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'), 10, baseOut, decimal);\n            y.e = y.c.length;\n          } // Convert the number as integer.\n\n\n          xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET)); // xc now represents str as an integer and converted to baseOut. e is the exponent.\n\n          e = k = xc.length; // Remove trailing zeros.\n\n          for (; xc[--k] == 0; xc.pop()); // Zero?\n\n\n          if (!xc[0]) return alphabet.charAt(0); // Does str represent an integer? If so, no need for the division.\n\n          if (i < 0) {\n            --e;\n          } else {\n            x.c = xc;\n            x.e = e; // The sign is needed for correct rounding.\n\n            x.s = sign;\n            x = div(x, y, dp, rm, baseOut);\n            xc = x.c;\n            r = x.r;\n            e = x.e;\n          } // xc now represents str converted to baseOut.\n          // THe index of the rounding digit.\n\n\n          d = e + dp + 1; // The rounding digit: the digit to the right of the digit that may be rounded up.\n\n          i = xc[d]; // Look at the rounding digits and mode to determine whether to round up.\n\n          k = baseOut / 2;\n          r = r || d < 0 || xc[d + 1] != null;\n          r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7)); // If the index of the rounding digit is not greater than zero, or xc represents\n          // zero, then the result of the base conversion is zero or, if rounding up, a value\n          // such as 0.00001.\n\n          if (d < 1 || !xc[0]) {\n            // 1^-dp or 0\n            str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\n          } else {\n            // Truncate xc to the required number of decimal places.\n            xc.length = d; // Round up?\n\n            if (r) {\n              // Rounding up may mean the previous digit has to be rounded up and so on.\n              for (--baseOut; ++xc[--d] > baseOut;) {\n                xc[d] = 0;\n\n                if (!d) {\n                  ++e;\n                  xc = [1].concat(xc);\n                }\n              }\n            } // Determine trailing zeros.\n\n\n            for (k = xc.length; !xc[--k];); // E.g. [4, 11, 15] becomes 4bf.\n\n\n            for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++])); // Add leading zeros, decimal point and trailing zeros as required.\n\n\n            str = toFixedPoint(str, e, alphabet.charAt(0));\n          } // The caller will add the sign.\n\n\n          return str;\n        };\n      }(); // Perform division in the specified base. Called by div and convertBase.\n\n\n      div = function () {\n        // Assume non-zero x and k.\n        function multiply(x, k, base) {\n          var m,\n              temp,\n              xlo,\n              xhi,\n              carry = 0,\n              i = x.length,\n              klo = k % SQRT_BASE,\n              khi = k / SQRT_BASE | 0;\n\n          for (x = x.slice(); i--;) {\n            xlo = x[i] % SQRT_BASE;\n            xhi = x[i] / SQRT_BASE | 0;\n            m = khi * xlo + xhi * klo;\n            temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;\n            carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\n            x[i] = temp % base;\n          }\n\n          if (carry) x = [carry].concat(x);\n          return x;\n        }\n\n        function compare(a, b, aL, bL) {\n          var i, cmp;\n\n          if (aL != bL) {\n            cmp = aL > bL ? 1 : -1;\n          } else {\n            for (i = cmp = 0; i < aL; i++) {\n              if (a[i] != b[i]) {\n                cmp = a[i] > b[i] ? 1 : -1;\n                break;\n              }\n            }\n          }\n\n          return cmp;\n        }\n\n        function subtract(a, b, aL, base) {\n          var i = 0; // Subtract b from a.\n\n          for (; aL--;) {\n            a[aL] -= i;\n            i = a[aL] < b[aL] ? 1 : 0;\n            a[aL] = i * base + a[aL] - b[aL];\n          } // Remove leading zeros.\n\n\n          for (; !a[0] && a.length > 1; a.splice(0, 1));\n        } // x: dividend, y: divisor.\n\n\n        return function (x, y, dp, rm, base) {\n          var cmp,\n              e,\n              i,\n              more,\n              n,\n              prod,\n              prodL,\n              q,\n              qc,\n              rem,\n              remL,\n              rem0,\n              xi,\n              xL,\n              yc0,\n              yL,\n              yz,\n              s = x.s == y.s ? 1 : -1,\n              xc = x.c,\n              yc = y.c; // Either NaN, Infinity or 0?\n\n          if (!xc || !xc[0] || !yc || !yc[0]) {\n            return new BigNumber( // Return NaN if either NaN, or both Infinity or 0.\n            !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0);\n          }\n\n          q = new BigNumber(s);\n          qc = q.c = [];\n          e = x.e - y.e;\n          s = dp + e + 1;\n\n          if (!base) {\n            base = BASE;\n            e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\n            s = s / LOG_BASE | 0;\n          } // Result exponent may be one less then the current value of e.\n          // The coefficients of the BigNumbers from convertBase may have trailing zeros.\n\n\n          for (i = 0; yc[i] == (xc[i] || 0); i++);\n\n          if (yc[i] > (xc[i] || 0)) e--;\n\n          if (s < 0) {\n            qc.push(1);\n            more = true;\n          } else {\n            xL = xc.length;\n            yL = yc.length;\n            i = 0;\n            s += 2; // Normalise xc and yc so highest order digit of yc is >= base / 2.\n\n            n = mathfloor(base / (yc[0] + 1)); // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\n            // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\n\n            if (n > 1) {\n              yc = multiply(yc, n, base);\n              xc = multiply(xc, n, base);\n              yL = yc.length;\n              xL = xc.length;\n            }\n\n            xi = yL;\n            rem = xc.slice(0, yL);\n            remL = rem.length; // Add zeros to make remainder as long as divisor.\n\n            for (; remL < yL; rem[remL++] = 0);\n\n            yz = yc.slice();\n            yz = [0].concat(yz);\n            yc0 = yc[0];\n            if (yc[1] >= base / 2) yc0++; // Not necessary, but to prevent trial digit n > base, when using base 3.\n            // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\n\n            do {\n              n = 0; // Compare divisor and remainder.\n\n              cmp = compare(yc, rem, yL, remL); // If divisor < remainder.\n\n              if (cmp < 0) {\n                // Calculate trial digit, n.\n                rem0 = rem[0];\n                if (yL != remL) rem0 = rem0 * base + (rem[1] || 0); // n is how many times the divisor goes into the current remainder.\n\n                n = mathfloor(rem0 / yc0); //  Algorithm:\n                //  product = divisor multiplied by trial digit (n).\n                //  Compare product and remainder.\n                //  If product is greater than remainder:\n                //    Subtract divisor from product, decrement trial digit.\n                //  Subtract product from remainder.\n                //  If product was less than remainder at the last compare:\n                //    Compare new remainder and divisor.\n                //    If remainder is greater than divisor:\n                //      Subtract divisor from remainder, increment trial digit.\n\n                if (n > 1) {\n                  // n may be > base only when base is 3.\n                  if (n >= base) n = base - 1; // product = divisor * trial digit.\n\n                  prod = multiply(yc, n, base);\n                  prodL = prod.length;\n                  remL = rem.length; // Compare product and remainder.\n                  // If product > remainder then trial digit n too high.\n                  // n is 1 too high about 5% of the time, and is not known to have\n                  // ever been more than 1 too high.\n\n                  while (compare(prod, rem, prodL, remL) == 1) {\n                    n--; // Subtract divisor from product.\n\n                    subtract(prod, yL < prodL ? yz : yc, prodL, base);\n                    prodL = prod.length;\n                    cmp = 1;\n                  }\n                } else {\n                  // n is 0 or 1, cmp is -1.\n                  // If n is 0, there is no need to compare yc and rem again below,\n                  // so change cmp to 1 to avoid it.\n                  // If n is 1, leave cmp as -1, so yc and rem are compared again.\n                  if (n == 0) {\n                    // divisor < remainder, so n must be at least 1.\n                    cmp = n = 1;\n                  } // product = divisor\n\n\n                  prod = yc.slice();\n                  prodL = prod.length;\n                }\n\n                if (prodL < remL) prod = [0].concat(prod); // Subtract product from remainder.\n\n                subtract(rem, prod, remL, base);\n                remL = rem.length; // If product was < remainder.\n\n                if (cmp == -1) {\n                  // Compare divisor and new remainder.\n                  // If divisor < new remainder, subtract divisor from remainder.\n                  // Trial digit n too low.\n                  // n is 1 too low about 5% of the time, and very rarely 2 too low.\n                  while (compare(yc, rem, yL, remL) < 1) {\n                    n++; // Subtract divisor from remainder.\n\n                    subtract(rem, yL < remL ? yz : yc, remL, base);\n                    remL = rem.length;\n                  }\n                }\n              } else if (cmp === 0) {\n                n++;\n                rem = [0];\n              } // else cmp === 1 and n will be 0\n              // Add the next digit, n, to the result array.\n\n\n              qc[i++] = n; // Update the remainder.\n\n              if (rem[0]) {\n                rem[remL++] = xc[xi] || 0;\n              } else {\n                rem = [xc[xi]];\n                remL = 1;\n              }\n            } while ((xi++ < xL || rem[0] != null) && s--);\n\n            more = rem[0] != null; // Leading zero?\n\n            if (!qc[0]) qc.splice(0, 1);\n          }\n\n          if (base == BASE) {\n            // To calculate q.e, first get the number of digits of qc[0].\n            for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\n\n            round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more); // Caller is convertBase.\n          } else {\n            q.e = e;\n            q.r = +more;\n          }\n\n          return q;\n        };\n      }();\n      /*\r\n       * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n       * notation rounded to the specified decimal places or significant digits.\r\n       *\r\n       * n: a BigNumber.\r\n       * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n       * rm: the rounding mode.\r\n       * id: 1 (toExponential) or 2 (toPrecision).\r\n       */\n\n\n      function format(n, i, rm, id) {\n        var c0, e, ne, len, str;\n        if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n        if (!n.c) return n.toString();\n        c0 = n.c[0];\n        ne = n.e;\n\n        if (i == null) {\n          str = coeffToString(n.c);\n          str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, '0');\n        } else {\n          n = round(new BigNumber(n), i, rm); // n.e may have changed if the value was rounded up.\n\n          e = n.e;\n          str = coeffToString(n.c);\n          len = str.length; // toPrecision returns exponential notation if the number of significant digits\n          // specified is less than the number of digits necessary to represent the integer\n          // part of the value in fixed-point notation.\n          // Exponential notation.\n\n          if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\n            // Append zeros?\n            for (; len < i; str += '0', len++);\n\n            str = toExponential(str, e); // Fixed-point notation.\n          } else {\n            i -= ne;\n            str = toFixedPoint(str, e, '0'); // Append zeros?\n\n            if (e + 1 > len) {\n              if (--i > 0) for (str += '.'; i--; str += '0');\n            } else {\n              i += e - len;\n\n              if (i > 0) {\n                if (e + 1 == len) str += '.';\n\n                for (; i--; str += '0');\n              }\n            }\n          }\n        }\n\n        return n.s < 0 && c0 ? '-' + str : str;\n      } // Handle BigNumber.max and BigNumber.min.\n\n\n      function maxOrMin(args, method) {\n        var n,\n            i = 1,\n            m = new BigNumber(args[0]);\n\n        for (; i < args.length; i++) {\n          n = new BigNumber(args[i]); // If any number is NaN, return NaN.\n\n          if (!n.s) {\n            m = n;\n            break;\n          } else if (method.call(m, n)) {\n            m = n;\n          }\n        }\n\n        return m;\n      }\n      /*\r\n       * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n       * Called by minus, plus and times.\r\n       */\n\n\n      function normalise(n, c, e) {\n        var i = 1,\n            j = c.length; // Remove trailing zeros.\n\n        for (; !c[--j]; c.pop()); // Calculate the base 10 exponent. First get the number of digits of c[0].\n\n\n        for (j = c[0]; j >= 10; j /= 10, i++); // Overflow?\n\n\n        if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\n          // Infinity.\n          n.c = n.e = null; // Underflow?\n        } else if (e < MIN_EXP) {\n          // Zero.\n          n.c = [n.e = 0];\n        } else {\n          n.e = e;\n          n.c = c;\n        }\n\n        return n;\n      } // Handle values that fail the validity test in BigNumber.\n\n\n      parseNumeric = function () {\n        var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\n            dotAfter = /^([^.]+)\\.$/,\n            dotBefore = /^\\.([^.]+)$/,\n            isInfinityOrNaN = /^-?(Infinity|NaN)$/,\n            whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\n        return function (x, str, isNum, b) {\n          var base,\n              s = isNum ? str : str.replace(whitespaceOrPlus, ''); // No exception on ±Infinity or NaN.\n\n          if (isInfinityOrNaN.test(s)) {\n            x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\n          } else {\n            if (!isNum) {\n              // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\n              s = s.replace(basePrefix, function (m, p1, p2) {\n                base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\n                return !b || b == base ? p1 : m;\n              });\n\n              if (b) {\n                base = b; // E.g. '1.' to '1', '.1' to '0.1'\n\n                s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\n              }\n\n              if (str != s) return new BigNumber(s, base);\n            } // '[BigNumber Error] Not a number: {n}'\n            // '[BigNumber Error] Not a base {b} number: {n}'\n\n\n            if (BigNumber.DEBUG) {\n              throw Error(bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\n            } // NaN\n\n\n            x.s = null;\n          }\n\n          x.c = x.e = null;\n        };\n      }();\n      /*\r\n       * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n       * If r is truthy, it is known that there are more digits after the rounding digit.\r\n       */\n\n\n      function round(x, sd, rm, r) {\n        var d,\n            i,\n            j,\n            k,\n            n,\n            ni,\n            rd,\n            xc = x.c,\n            pows10 = POWS_TEN; // if x is not Infinity or NaN...\n\n        if (xc) {\n          // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\n          // n is a base 1e14 number, the value of the element of array x.c containing rd.\n          // ni is the index of n within x.c.\n          // d is the number of digits of n.\n          // i is the index of rd within n including leading zeros.\n          // j is the actual index of rd within n (if < 0, rd is a leading zero).\n          out: {\n            // Get the number of digits of the first element of xc.\n            for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\n\n            i = sd - d; // If the rounding digit is in the first element of xc...\n\n            if (i < 0) {\n              i += LOG_BASE;\n              j = sd;\n              n = xc[ni = 0]; // Get the rounding digit at index j of n.\n\n              rd = n / pows10[d - j - 1] % 10 | 0;\n            } else {\n              ni = mathceil((i + 1) / LOG_BASE);\n\n              if (ni >= xc.length) {\n                if (r) {\n                  // Needed by sqrt.\n                  for (; xc.length <= ni; xc.push(0));\n\n                  n = rd = 0;\n                  d = 1;\n                  i %= LOG_BASE;\n                  j = i - LOG_BASE + 1;\n                } else {\n                  break out;\n                }\n              } else {\n                n = k = xc[ni]; // Get the number of digits of n.\n\n                for (d = 1; k >= 10; k /= 10, d++); // Get the index of rd within n.\n\n\n                i %= LOG_BASE; // Get the index of rd within n, adjusted for leading zeros.\n                // The number of leading zeros of n is given by LOG_BASE - d.\n\n                j = i - LOG_BASE + d; // Get the rounding digit at index j of n.\n\n                rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\n              }\n            }\n\n            r = r || sd < 0 || // Are there any non-zero digits after the rounding digit?\n            // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\n            // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\n            xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\n            r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.\n            (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));\n\n            if (sd < 1 || !xc[0]) {\n              xc.length = 0;\n\n              if (r) {\n                // Convert sd to decimal places.\n                sd -= x.e + 1; // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n\n                xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\n                x.e = -sd || 0;\n              } else {\n                // Zero.\n                xc[0] = x.e = 0;\n              }\n\n              return x;\n            } // Remove excess digits.\n\n\n            if (i == 0) {\n              xc.length = ni;\n              k = 1;\n              ni--;\n            } else {\n              xc.length = ni + 1;\n              k = pows10[LOG_BASE - i]; // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n              // j > 0 means i > number of leading zeros of n.\n\n              xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\n            } // Round up?\n\n\n            if (r) {\n              for (;;) {\n                // If the digit to be rounded up is in the first element of xc...\n                if (ni == 0) {\n                  // i will be the length of xc[0] before k is added.\n                  for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\n\n                  j = xc[0] += k;\n\n                  for (k = 1; j >= 10; j /= 10, k++); // if i != k the length has increased.\n\n\n                  if (i != k) {\n                    x.e++;\n                    if (xc[0] == BASE) xc[0] = 1;\n                  }\n\n                  break;\n                } else {\n                  xc[ni] += k;\n                  if (xc[ni] != BASE) break;\n                  xc[ni--] = 0;\n                  k = 1;\n                }\n              }\n            } // Remove trailing zeros.\n\n\n            for (i = xc.length; xc[--i] === 0; xc.pop());\n          } // Overflow? Infinity.\n\n\n          if (x.e > MAX_EXP) {\n            x.c = x.e = null; // Underflow? Zero.\n          } else if (x.e < MIN_EXP) {\n            x.c = [x.e = 0];\n          }\n        }\n\n        return x;\n      }\n\n      function valueOf(n) {\n        var str,\n            e = n.e;\n        if (e === null) return n.toString();\n        str = coeffToString(n.c);\n        str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, '0');\n        return n.s < 0 ? '-' + str : str;\n      } // PROTOTYPE/INSTANCE METHODS\n\n      /*\r\n       * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n       */\n\n\n      P.absoluteValue = P.abs = function () {\n        var x = new BigNumber(this);\n        if (x.s < 0) x.s = 1;\n        return x;\n      };\n      /*\r\n       * Return\r\n       *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n       *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n       *   0 if they have the same value,\r\n       *   or null if the value of either is NaN.\r\n       */\n\n\n      P.comparedTo = function (y, b) {\n        return compare(this, new BigNumber(y, b));\n      };\n      /*\r\n       * If dp is undefined or null or true or false, return the number of decimal places of the\r\n       * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n       *\r\n       * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n       * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n       * ROUNDING_MODE if rm is omitted.\r\n       *\r\n       * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n       *\r\n       * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n       */\n\n\n      P.decimalPlaces = P.dp = function (dp, rm) {\n        var c,\n            n,\n            v,\n            x = this;\n\n        if (dp != null) {\n          intCheck(dp, 0, MAX);\n          if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n          return round(new BigNumber(x), dp + x.e + 1, rm);\n        }\n\n        if (!(c = x.c)) return null;\n        n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE; // Subtract the number of trailing zeros of the last number.\n\n        if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\n        if (n < 0) n = 0;\n        return n;\n      };\n      /*\r\n       *  n / 0 = I\r\n       *  n / N = N\r\n       *  n / I = 0\r\n       *  0 / n = 0\r\n       *  0 / 0 = N\r\n       *  0 / N = N\r\n       *  0 / I = 0\r\n       *  N / n = N\r\n       *  N / 0 = N\r\n       *  N / N = N\r\n       *  N / I = N\r\n       *  I / n = I\r\n       *  I / 0 = I\r\n       *  I / N = N\r\n       *  I / I = N\r\n       *\r\n       * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n       * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n       */\n\n\n      P.dividedBy = P.div = function (y, b) {\n        return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\n      };\n      /*\r\n       * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n       * BigNumber by the value of BigNumber(y, b).\r\n       */\n\n\n      P.dividedToIntegerBy = P.idiv = function (y, b) {\n        return div(this, new BigNumber(y, b), 0, 1);\n      };\n      /*\r\n       * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n       *\r\n       * If m is present, return the result modulo m.\r\n       * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n       * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n       *\r\n       * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n       * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n       *\r\n       * n {number|string|BigNumber} The exponent. An integer.\r\n       * [m] {number|string|BigNumber} The modulus.\r\n       *\r\n       * '[BigNumber Error] Exponent not an integer: {n}'\r\n       */\n\n\n      P.exponentiatedBy = P.pow = function (n, m) {\n        var half,\n            isModExp,\n            i,\n            k,\n            more,\n            nIsBig,\n            nIsNeg,\n            nIsOdd,\n            y,\n            x = this;\n        n = new BigNumber(n); // Allow NaN and ±Infinity, but not other non-integers.\n\n        if (n.c && !n.isInteger()) {\n          throw Error(bignumberError + 'Exponent not an integer: ' + valueOf(n));\n        }\n\n        if (m != null) m = new BigNumber(m); // Exponent of MAX_SAFE_INTEGER is 15.\n\n        nIsBig = n.e > 14; // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\n\n        if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\n          // The sign of the result of pow when x is negative depends on the evenness of n.\n          // If +n overflows to ±Infinity, the evenness of n would be not be known.\n          y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\n          return m ? y.mod(m) : y;\n        }\n\n        nIsNeg = n.s < 0;\n\n        if (m) {\n          // x % m returns NaN if abs(m) is zero, or m is NaN.\n          if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\n          isModExp = !nIsNeg && x.isInteger() && m.isInteger();\n          if (isModExp) x = x.mod(m); // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\n          // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\n        } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0 // [1, 240000000]\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7 // [80000000000000]  [99999750000000]\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\n          // If x is negative and n is odd, k = -0, else k = 0.\n          k = x.s < 0 && isOdd(n) ? -0 : 0; // If x >= 1, k = ±Infinity.\n\n          if (x.e > -1) k = 1 / k; // If n is negative return ±0, else return ±Infinity.\n\n          return new BigNumber(nIsNeg ? 1 / k : k);\n        } else if (POW_PRECISION) {\n          // Truncating each coefficient array to a length of k after each multiplication\n          // equates to truncating significant digits to POW_PRECISION + [28, 41],\n          // i.e. there will be a minimum of 28 guard digits retained.\n          k = mathceil(POW_PRECISION / LOG_BASE + 2);\n        }\n\n        if (nIsBig) {\n          half = new BigNumber(0.5);\n          if (nIsNeg) n.s = 1;\n          nIsOdd = isOdd(n);\n        } else {\n          i = Math.abs(+valueOf(n));\n          nIsOdd = i % 2;\n        }\n\n        y = new BigNumber(ONE); // Performs 54 loop iterations for n of 9007199254740991.\n\n        for (;;) {\n          if (nIsOdd) {\n            y = y.times(x);\n            if (!y.c) break;\n\n            if (k) {\n              if (y.c.length > k) y.c.length = k;\n            } else if (isModExp) {\n              y = y.mod(m); //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\n            }\n          }\n\n          if (i) {\n            i = mathfloor(i / 2);\n            if (i === 0) break;\n            nIsOdd = i % 2;\n          } else {\n            n = n.times(half);\n            round(n, n.e + 1, 1);\n\n            if (n.e > 14) {\n              nIsOdd = isOdd(n);\n            } else {\n              i = +valueOf(n);\n              if (i === 0) break;\n              nIsOdd = i % 2;\n            }\n          }\n\n          x = x.times(x);\n\n          if (k) {\n            if (x.c && x.c.length > k) x.c.length = k;\n          } else if (isModExp) {\n            x = x.mod(m); //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\n          }\n        }\n\n        if (isModExp) return y;\n        if (nIsNeg) y = ONE.div(y);\n        return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\n      };\n      /*\r\n       * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n       * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n       *\r\n       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n       *\r\n       * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n       */\n\n\n      P.integerValue = function (rm) {\n        var n = new BigNumber(this);\n        if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n        return round(n, n.e + 1, rm);\n      };\n      /*\r\n       * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n       * otherwise return false.\r\n       */\n\n\n      P.isEqualTo = P.eq = function (y, b) {\n        return compare(this, new BigNumber(y, b)) === 0;\n      };\n      /*\r\n       * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n       */\n\n\n      P.isFinite = function () {\n        return !!this.c;\n      };\n      /*\r\n       * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n       * otherwise return false.\r\n       */\n\n\n      P.isGreaterThan = P.gt = function (y, b) {\n        return compare(this, new BigNumber(y, b)) > 0;\n      };\n      /*\r\n       * Return true if the value of this BigNumber is greater than or equal to the value of\r\n       * BigNumber(y, b), otherwise return false.\r\n       */\n\n\n      P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\n        return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\n      };\n      /*\r\n       * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n       */\n\n\n      P.isInteger = function () {\n        return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\n      };\n      /*\r\n       * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n       * otherwise return false.\r\n       */\n\n\n      P.isLessThan = P.lt = function (y, b) {\n        return compare(this, new BigNumber(y, b)) < 0;\n      };\n      /*\r\n       * Return true if the value of this BigNumber is less than or equal to the value of\r\n       * BigNumber(y, b), otherwise return false.\r\n       */\n\n\n      P.isLessThanOrEqualTo = P.lte = function (y, b) {\n        return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\n      };\n      /*\r\n       * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n       */\n\n\n      P.isNaN = function () {\n        return !this.s;\n      };\n      /*\r\n       * Return true if the value of this BigNumber is negative, otherwise return false.\r\n       */\n\n\n      P.isNegative = function () {\n        return this.s < 0;\n      };\n      /*\r\n       * Return true if the value of this BigNumber is positive, otherwise return false.\r\n       */\n\n\n      P.isPositive = function () {\n        return this.s > 0;\n      };\n      /*\r\n       * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n       */\n\n\n      P.isZero = function () {\n        return !!this.c && this.c[0] == 0;\n      };\n      /*\r\n       *  n - 0 = n\r\n       *  n - N = N\r\n       *  n - I = -I\r\n       *  0 - n = -n\r\n       *  0 - 0 = 0\r\n       *  0 - N = N\r\n       *  0 - I = -I\r\n       *  N - n = N\r\n       *  N - 0 = N\r\n       *  N - N = N\r\n       *  N - I = N\r\n       *  I - n = I\r\n       *  I - 0 = I\r\n       *  I - N = N\r\n       *  I - I = N\r\n       *\r\n       * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n       * BigNumber(y, b).\r\n       */\n\n\n      P.minus = function (y, b) {\n        var i,\n            j,\n            t,\n            xLTy,\n            x = this,\n            a = x.s;\n        y = new BigNumber(y, b);\n        b = y.s; // Either NaN?\n\n        if (!a || !b) return new BigNumber(NaN); // Signs differ?\n\n        if (a != b) {\n          y.s = -b;\n          return x.plus(y);\n        }\n\n        var xe = x.e / LOG_BASE,\n            ye = y.e / LOG_BASE,\n            xc = x.c,\n            yc = y.c;\n\n        if (!xe || !ye) {\n          // Either Infinity?\n          if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN); // Either zero?\n\n          if (!xc[0] || !yc[0]) {\n            // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n            return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x : // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\n            ROUNDING_MODE == 3 ? -0 : 0);\n          }\n        }\n\n        xe = bitFloor(xe);\n        ye = bitFloor(ye);\n        xc = xc.slice(); // Determine which is the bigger number.\n\n        if (a = xe - ye) {\n          if (xLTy = a < 0) {\n            a = -a;\n            t = xc;\n          } else {\n            ye = xe;\n            t = yc;\n          }\n\n          t.reverse(); // Prepend zeros to equalise exponents.\n\n          for (b = a; b--; t.push(0));\n\n          t.reverse();\n        } else {\n          // Exponents equal. Check digit by digit.\n          j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\n\n          for (a = b = 0; b < j; b++) {\n            if (xc[b] != yc[b]) {\n              xLTy = xc[b] < yc[b];\n              break;\n            }\n          }\n        } // x < y? Point xc to the array of the bigger number.\n\n\n        if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\n        b = (j = yc.length) - (i = xc.length); // Append zeros to xc if shorter.\n        // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\n\n        if (b > 0) for (; b--; xc[i++] = 0);\n        b = BASE - 1; // Subtract yc from xc.\n\n        for (; j > a;) {\n          if (xc[--j] < yc[j]) {\n            for (i = j; i && !xc[--i]; xc[i] = b);\n\n            --xc[i];\n            xc[j] += BASE;\n          }\n\n          xc[j] -= yc[j];\n        } // Remove leading zeros and adjust exponent accordingly.\n\n\n        for (; xc[0] == 0; xc.splice(0, 1), --ye); // Zero?\n\n\n        if (!xc[0]) {\n          // Following IEEE 754 (2008) 6.3,\n          // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\n          y.s = ROUNDING_MODE == 3 ? -1 : 1;\n          y.c = [y.e = 0];\n          return y;\n        } // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\n        // for finite x and y.\n\n\n        return normalise(y, xc, ye);\n      };\n      /*\r\n       *   n % 0 =  N\r\n       *   n % N =  N\r\n       *   n % I =  n\r\n       *   0 % n =  0\r\n       *  -0 % n = -0\r\n       *   0 % 0 =  N\r\n       *   0 % N =  N\r\n       *   0 % I =  0\r\n       *   N % n =  N\r\n       *   N % 0 =  N\r\n       *   N % N =  N\r\n       *   N % I =  N\r\n       *   I % n =  N\r\n       *   I % 0 =  N\r\n       *   I % N =  N\r\n       *   I % I =  N\r\n       *\r\n       * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n       * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n       */\n\n\n      P.modulo = P.mod = function (y, b) {\n        var q,\n            s,\n            x = this;\n        y = new BigNumber(y, b); // Return NaN if x is Infinity or NaN, or y is NaN or zero.\n\n        if (!x.c || !y.s || y.c && !y.c[0]) {\n          return new BigNumber(NaN); // Return x if y is Infinity or x is zero.\n        } else if (!y.c || x.c && !x.c[0]) {\n          return new BigNumber(x);\n        }\n\n        if (MODULO_MODE == 9) {\n          // Euclidian division: q = sign(y) * floor(x / abs(y))\n          // r = x - qy    where  0 <= r < abs(y)\n          s = y.s;\n          y.s = 1;\n          q = div(x, y, 0, 3);\n          y.s = s;\n          q.s *= s;\n        } else {\n          q = div(x, y, 0, MODULO_MODE);\n        }\n\n        y = x.minus(q.times(y)); // To match JavaScript %, ensure sign of zero is sign of dividend.\n\n        if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\n        return y;\n      };\n      /*\r\n       *  n * 0 = 0\r\n       *  n * N = N\r\n       *  n * I = I\r\n       *  0 * n = 0\r\n       *  0 * 0 = 0\r\n       *  0 * N = N\r\n       *  0 * I = N\r\n       *  N * n = N\r\n       *  N * 0 = N\r\n       *  N * N = N\r\n       *  N * I = N\r\n       *  I * n = I\r\n       *  I * 0 = N\r\n       *  I * N = N\r\n       *  I * I = I\r\n       *\r\n       * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n       * of BigNumber(y, b).\r\n       */\n\n\n      P.multipliedBy = P.times = function (y, b) {\n        var c,\n            e,\n            i,\n            j,\n            k,\n            m,\n            xcL,\n            xlo,\n            xhi,\n            ycL,\n            ylo,\n            yhi,\n            zc,\n            base,\n            sqrtBase,\n            x = this,\n            xc = x.c,\n            yc = (y = new BigNumber(y, b)).c; // Either NaN, ±Infinity or ±0?\n\n        if (!xc || !yc || !xc[0] || !yc[0]) {\n          // Return NaN if either is NaN, or one is 0 and the other is Infinity.\n          if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\n            y.c = y.e = y.s = null;\n          } else {\n            y.s *= x.s; // Return ±Infinity if either is ±Infinity.\n\n            if (!xc || !yc) {\n              y.c = y.e = null; // Return ±0 if either is ±0.\n            } else {\n              y.c = [0];\n              y.e = 0;\n            }\n          }\n\n          return y;\n        }\n\n        e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\n        y.s *= x.s;\n        xcL = xc.length;\n        ycL = yc.length; // Ensure xc points to longer array and xcL to its length.\n\n        if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i; // Initialise the result array with zeros.\n\n        for (i = xcL + ycL, zc = []; i--; zc.push(0));\n\n        base = BASE;\n        sqrtBase = SQRT_BASE;\n\n        for (i = ycL; --i >= 0;) {\n          c = 0;\n          ylo = yc[i] % sqrtBase;\n          yhi = yc[i] / sqrtBase | 0;\n\n          for (k = xcL, j = i + k; j > i;) {\n            xlo = xc[--k] % sqrtBase;\n            xhi = xc[k] / sqrtBase | 0;\n            m = yhi * xlo + xhi * ylo;\n            xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;\n            c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\n            zc[j--] = xlo % base;\n          }\n\n          zc[j] = c;\n        }\n\n        if (c) {\n          ++e;\n        } else {\n          zc.splice(0, 1);\n        }\n\n        return normalise(y, zc, e);\n      };\n      /*\r\n       * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n       * i.e. multiplied by -1.\r\n       */\n\n\n      P.negated = function () {\n        var x = new BigNumber(this);\n        x.s = -x.s || null;\n        return x;\n      };\n      /*\r\n       *  n + 0 = n\r\n       *  n + N = N\r\n       *  n + I = I\r\n       *  0 + n = n\r\n       *  0 + 0 = 0\r\n       *  0 + N = N\r\n       *  0 + I = I\r\n       *  N + n = N\r\n       *  N + 0 = N\r\n       *  N + N = N\r\n       *  N + I = N\r\n       *  I + n = I\r\n       *  I + 0 = I\r\n       *  I + N = N\r\n       *  I + I = I\r\n       *\r\n       * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n       * BigNumber(y, b).\r\n       */\n\n\n      P.plus = function (y, b) {\n        var t,\n            x = this,\n            a = x.s;\n        y = new BigNumber(y, b);\n        b = y.s; // Either NaN?\n\n        if (!a || !b) return new BigNumber(NaN); // Signs differ?\n\n        if (a != b) {\n          y.s = -b;\n          return x.minus(y);\n        }\n\n        var xe = x.e / LOG_BASE,\n            ye = y.e / LOG_BASE,\n            xc = x.c,\n            yc = y.c;\n\n        if (!xe || !ye) {\n          // Return ±Infinity if either ±Infinity.\n          if (!xc || !yc) return new BigNumber(a / 0); // Either zero?\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n\n          if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\n        }\n\n        xe = bitFloor(xe);\n        ye = bitFloor(ye);\n        xc = xc.slice(); // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\n\n        if (a = xe - ye) {\n          if (a > 0) {\n            ye = xe;\n            t = yc;\n          } else {\n            a = -a;\n            t = xc;\n          }\n\n          t.reverse();\n\n          for (; a--; t.push(0));\n\n          t.reverse();\n        }\n\n        a = xc.length;\n        b = yc.length; // Point xc to the longer array, and b to the shorter length.\n\n        if (a - b < 0) t = yc, yc = xc, xc = t, b = a; // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\n\n        for (a = 0; b;) {\n          a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\n          xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\n        }\n\n        if (a) {\n          xc = [a].concat(xc);\n          ++ye;\n        } // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n        // ye = MAX_EXP + 1 possible\n\n\n        return normalise(y, xc, ye);\n      };\n      /*\r\n       * If sd is undefined or null or true or false, return the number of significant digits of\r\n       * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n       * If sd is true include integer-part trailing zeros in the count.\r\n       *\r\n       * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n       * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n       * ROUNDING_MODE if rm is omitted.\r\n       *\r\n       * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n       *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n       *\r\n       * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n       */\n\n\n      P.precision = P.sd = function (sd, rm) {\n        var c,\n            n,\n            v,\n            x = this;\n\n        if (sd != null && sd !== !!sd) {\n          intCheck(sd, 1, MAX);\n          if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n          return round(new BigNumber(x), sd, rm);\n        }\n\n        if (!(c = x.c)) return null;\n        v = c.length - 1;\n        n = v * LOG_BASE + 1;\n\n        if (v = c[v]) {\n          // Subtract the number of trailing zeros of the last element.\n          for (; v % 10 == 0; v /= 10, n--); // Add the number of digits of the first element.\n\n\n          for (v = c[0]; v >= 10; v /= 10, n++);\n        }\n\n        if (sd && x.e + 1 > n) n = x.e + 1;\n        return n;\n      };\n      /*\r\n       * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n       * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n       *\r\n       * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n       *\r\n       * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n       */\n\n\n      P.shiftedBy = function (k) {\n        intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\n        return this.times('1e' + k);\n      };\n      /*\r\n       *  sqrt(-n) =  N\r\n       *  sqrt(N) =  N\r\n       *  sqrt(-I) =  N\r\n       *  sqrt(I) =  I\r\n       *  sqrt(0) =  0\r\n       *  sqrt(-0) = -0\r\n       *\r\n       * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n       * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n       */\n\n\n      P.squareRoot = P.sqrt = function () {\n        var m,\n            n,\n            r,\n            rep,\n            t,\n            x = this,\n            c = x.c,\n            s = x.s,\n            e = x.e,\n            dp = DECIMAL_PLACES + 4,\n            half = new BigNumber('0.5'); // Negative/NaN/Infinity/zero?\n\n        if (s !== 1 || !c || !c[0]) {\n          return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\n        } // Initial estimate.\n\n\n        s = Math.sqrt(+valueOf(x)); // Math.sqrt underflow/overflow?\n        // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n\n        if (s == 0 || s == 1 / 0) {\n          n = coeffToString(c);\n          if ((n.length + e) % 2 == 0) n += '0';\n          s = Math.sqrt(+n);\n          e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\n\n          if (s == 1 / 0) {\n            n = '5e' + e;\n          } else {\n            n = s.toExponential();\n            n = n.slice(0, n.indexOf('e') + 1) + e;\n          }\n\n          r = new BigNumber(n);\n        } else {\n          r = new BigNumber(s + '');\n        } // Check for zero.\n        // r could be zero if MIN_EXP is changed after the this value was created.\n        // This would cause a division by zero (x/t) and hence Infinity below, which would cause\n        // coeffToString to throw.\n\n\n        if (r.c[0]) {\n          e = r.e;\n          s = e + dp;\n          if (s < 3) s = 0; // Newton-Raphson iteration.\n\n          for (;;) {\n            t = r;\n            r = half.times(t.plus(div(x, t, dp, 1)));\n\n            if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\n              // The exponent of r may here be one less than the final result exponent,\n              // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\n              // are indexed correctly.\n              if (r.e < e) --s;\n              n = n.slice(s - 3, s + 1); // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\n              // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\n              // iteration.\n\n              if (n == '9999' || !rep && n == '4999') {\n                // On the first iteration only, check to see if rounding up gives the\n                // exact result as the nines may infinitely repeat.\n                if (!rep) {\n                  round(t, t.e + DECIMAL_PLACES + 2, 0);\n\n                  if (t.times(t).eq(x)) {\n                    r = t;\n                    break;\n                  }\n                }\n\n                dp += 4;\n                s += 4;\n                rep = 1;\n              } else {\n                // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\n                // result. If not, then there are further digits and m will be truthy.\n                if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n                  // Truncate to the first rounding digit.\n                  round(r, r.e + DECIMAL_PLACES + 2, 1);\n                  m = !r.times(r).eq(x);\n                }\n\n                break;\n              }\n            }\n          }\n        }\n\n        return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\n      };\n      /*\r\n       * Return a string representing the value of this BigNumber in exponential notation and\r\n       * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n       *\r\n       * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n       *\r\n       * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n       */\n\n\n      P.toExponential = function (dp, rm) {\n        if (dp != null) {\n          intCheck(dp, 0, MAX);\n          dp++;\n        }\n\n        return format(this, dp, rm, 1);\n      };\n      /*\r\n       * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n       * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n       *\r\n       * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n       * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n       *\r\n       * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n       *\r\n       * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n       */\n\n\n      P.toFixed = function (dp, rm) {\n        if (dp != null) {\n          intCheck(dp, 0, MAX);\n          dp = dp + this.e + 1;\n        }\n\n        return format(this, dp, rm);\n      };\n      /*\r\n       * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n       * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n       * of the format or FORMAT object (see BigNumber.set).\r\n       *\r\n       * The formatting object may contain some or all of the properties shown below.\r\n       *\r\n       * FORMAT = {\r\n       *   prefix: '',\r\n       *   groupSize: 3,\r\n       *   secondaryGroupSize: 0,\r\n       *   groupSeparator: ',',\r\n       *   decimalSeparator: '.',\r\n       *   fractionGroupSize: 0,\r\n       *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n       *   suffix: ''\r\n       * };\r\n       *\r\n       * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n       * [format] {object} Formatting options. See FORMAT pbject above.\r\n       *\r\n       * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n       * '[BigNumber Error] Argument not an object: {format}'\r\n       */\n\n\n      P.toFormat = function (dp, rm, format) {\n        var str,\n            x = this;\n\n        if (format == null) {\n          if (dp != null && rm && typeof rm == 'object') {\n            format = rm;\n            rm = null;\n          } else if (dp && typeof dp == 'object') {\n            format = dp;\n            dp = rm = null;\n          } else {\n            format = FORMAT;\n          }\n        } else if (typeof format != 'object') {\n          throw Error(bignumberError + 'Argument not an object: ' + format);\n        }\n\n        str = x.toFixed(dp, rm);\n\n        if (x.c) {\n          var i,\n              arr = str.split('.'),\n              g1 = +format.groupSize,\n              g2 = +format.secondaryGroupSize,\n              groupSeparator = format.groupSeparator || '',\n              intPart = arr[0],\n              fractionPart = arr[1],\n              isNeg = x.s < 0,\n              intDigits = isNeg ? intPart.slice(1) : intPart,\n              len = intDigits.length;\n          if (g2) i = g1, g1 = g2, g2 = i, len -= i;\n\n          if (g1 > 0 && len > 0) {\n            i = len % g1 || g1;\n            intPart = intDigits.substr(0, i);\n\n            for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\n\n            if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\n            if (isNeg) intPart = '-' + intPart;\n          }\n\n          str = fractionPart ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize) ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'), '$&' + (format.fractionGroupSeparator || '')) : fractionPart) : intPart;\n        }\n\n        return (format.prefix || '') + str + (format.suffix || '');\n      };\n      /*\r\n       * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n       * fraction with an integer numerator and an integer denominator.\r\n       * The denominator will be a positive non-zero value less than or equal to the specified\r\n       * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n       * the lowest value necessary to represent the number exactly.\r\n       *\r\n       * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n       *\r\n       * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n       */\n\n\n      P.toFraction = function (md) {\n        var d,\n            d0,\n            d1,\n            d2,\n            e,\n            exp,\n            n,\n            n0,\n            n1,\n            q,\n            r,\n            s,\n            x = this,\n            xc = x.c;\n\n        if (md != null) {\n          n = new BigNumber(md); // Throw if md is less than one or is not an integer, unless it is Infinity.\n\n          if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\n            throw Error(bignumberError + 'Argument ' + (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\n          }\n        }\n\n        if (!xc) return new BigNumber(x);\n        d = new BigNumber(ONE);\n        n1 = d0 = new BigNumber(ONE);\n        d1 = n0 = new BigNumber(ONE);\n        s = coeffToString(xc); // Determine initial denominator.\n        // d is a power of 10 and the minimum max denominator that specifies the value exactly.\n\n        e = d.e = s.length - x.e - 1;\n        d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\n        md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;\n        exp = MAX_EXP;\n        MAX_EXP = 1 / 0;\n        n = new BigNumber(s); // n0 = d1 = 0\n\n        n0.c[0] = 0;\n\n        for (;;) {\n          q = div(n, d, 0, 1);\n          d2 = d0.plus(q.times(d1));\n          if (d2.comparedTo(md) == 1) break;\n          d0 = d1;\n          d1 = d2;\n          n1 = n0.plus(q.times(d2 = n1));\n          n0 = d2;\n          d = n.minus(q.times(d2 = d));\n          n = d2;\n        }\n\n        d2 = div(md.minus(d0), d1, 0, 1);\n        n0 = n0.plus(d2.times(n1));\n        d0 = d0.plus(d2.times(d1));\n        n0.s = n1.s = x.s;\n        e = e * 2; // Determine which fraction is closer to x, n0/d0 or n1/d1\n\n        r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\n        MAX_EXP = exp;\n        return r;\n      };\n      /*\r\n       * Return the value of this BigNumber converted to a number primitive.\r\n       */\n\n\n      P.toNumber = function () {\n        return +valueOf(this);\n      };\n      /*\r\n       * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n       * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n       * necessary to represent the integer part of the value in fixed-point notation, then use\r\n       * exponential notation.\r\n       *\r\n       * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n       *\r\n       * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n       */\n\n\n      P.toPrecision = function (sd, rm) {\n        if (sd != null) intCheck(sd, 1, MAX);\n        return format(this, sd, rm, 2);\n      };\n      /*\r\n       * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n       * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n       * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n       * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n       * TO_EXP_NEG, return exponential notation.\r\n       *\r\n       * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n       *\r\n       * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n       */\n\n\n      P.toString = function (b) {\n        var str,\n            n = this,\n            s = n.s,\n            e = n.e; // Infinity or NaN?\n\n        if (e === null) {\n          if (s) {\n            str = 'Infinity';\n            if (s < 0) str = '-' + str;\n          } else {\n            str = 'NaN';\n          }\n        } else {\n          if (b == null) {\n            str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(coeffToString(n.c), e) : toFixedPoint(coeffToString(n.c), e, '0');\n          } else if (b === 10) {\n            n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\n            str = toFixedPoint(coeffToString(n.c), n.e, '0');\n          } else {\n            intCheck(b, 2, ALPHABET.length, 'Base');\n            str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\n          }\n\n          if (s < 0 && n.c[0]) str = '-' + str;\n        }\n\n        return str;\n      };\n      /*\r\n       * Return as toString, but do not accept a base argument, and include the minus sign for\r\n       * negative zero.\r\n       */\n\n\n      P.valueOf = P.toJSON = function () {\n        return valueOf(this);\n      };\n\n      P._isBigNumber = true;\n      if (configObject != null) BigNumber.set(configObject);\n      return BigNumber;\n    } // PRIVATE HELPER FUNCTIONS\n    // These functions don't need access to variables,\n    // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\n\n\n    function bitFloor(n) {\n      var i = n | 0;\n      return n > 0 || n === i ? i : i - 1;\n    } // Return a coefficient array as a string of base 10 digits.\n\n\n    function coeffToString(a) {\n      var s,\n          z,\n          i = 1,\n          j = a.length,\n          r = a[0] + '';\n\n      for (; i < j;) {\n        s = a[i++] + '';\n        z = LOG_BASE - s.length;\n\n        for (; z--; s = '0' + s);\n\n        r += s;\n      } // Determine trailing zeros.\n\n\n      for (j = r.length; r.charCodeAt(--j) === 48;);\n\n      return r.slice(0, j + 1 || 1);\n    } // Compare the value of BigNumbers x and y.\n\n\n    function compare(x, y) {\n      var a,\n          b,\n          xc = x.c,\n          yc = y.c,\n          i = x.s,\n          j = y.s,\n          k = x.e,\n          l = y.e; // Either NaN?\n\n      if (!i || !j) return null;\n      a = xc && !xc[0];\n      b = yc && !yc[0]; // Either zero?\n\n      if (a || b) return a ? b ? 0 : -j : i; // Signs differ?\n\n      if (i != j) return i;\n      a = i < 0;\n      b = k == l; // Either Infinity?\n\n      if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1; // Compare exponents.\n\n      if (!b) return k > l ^ a ? 1 : -1;\n      j = (k = xc.length) < (l = yc.length) ? k : l; // Compare digit by digit.\n\n      for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1; // Compare lengths.\n\n\n      return k == l ? 0 : k > l ^ a ? 1 : -1;\n    }\n    /*\r\n     * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n     */\n\n\n    function intCheck(n, min, max, name) {\n      if (n < min || n > max || n !== mathfloor(n)) {\n        throw Error(bignumberError + (name || 'Argument') + (typeof n == 'number' ? n < min || n > max ? ' out of range: ' : ' not an integer: ' : ' not a primitive number: ') + String(n));\n      }\n    } // Assumes finite n.\n\n\n    function isOdd(n) {\n      var k = n.c.length - 1;\n      return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\n    }\n\n    function toExponential(str, e) {\n      return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) + (e < 0 ? 'e' : 'e+') + e;\n    }\n\n    function toFixedPoint(str, e, z) {\n      var len, zs; // Negative exponent?\n\n      if (e < 0) {\n        // Prepend zeros.\n        for (zs = z + '.'; ++e; zs += z);\n\n        str = zs + str; // Positive exponent\n      } else {\n        len = str.length; // Append zeros.\n\n        if (++e > len) {\n          for (zs = z, e -= len; --e; zs += z);\n\n          str += zs;\n        } else if (e < len) {\n          str = str.slice(0, e) + '.' + str.slice(e);\n        }\n      }\n\n      return str;\n    } // EXPORT\n\n\n    BigNumber = clone();\n    BigNumber['default'] = BigNumber.BigNumber = BigNumber; // AMD.\n\n    if (module.exports) {\n      module.exports = BigNumber; // Browser.\n    } else {\n      if (!globalObject) {\n        globalObject = typeof self != 'undefined' && self ? self : window;\n      }\n\n      globalObject.BigNumber = BigNumber;\n    }\n  })(commonjsGlobal);\n});\n\nvar stringIsInteger = function stringIsInteger(integer, positiveNumbersOnly) {\n  if (positiveNumbersOnly === void 0) {\n    positiveNumbersOnly = true;\n  }\n\n  var stringInteger = String(integer);\n\n  if (!stringInteger.match(/^[-]?\\d+$/)) {\n    return false;\n  }\n\n  var bNparsed = new bignumber(stringInteger);\n  var limit = positiveNumbersOnly ? 0 : -1;\n  return bNparsed.toString(10) === stringInteger && bNparsed.comparedTo(0) >= limit;\n};\n\nfunction format(big, denomination, decimals, showLastNonZeroDecimal, addCommas) {\n  showLastNonZeroDecimal = typeof showLastNonZeroDecimal !== \"undefined\" ? showLastNonZeroDecimal : false;\n  var array = big.toString().split(\"\");\n  var negative = false;\n\n  if (array[0] === \"-\") {\n    array.shift();\n    negative = true;\n  }\n\n  if (denomination !== 0) {\n    while (array.length < denomination + 1) {\n      array.unshift(\"0\");\n    }\n\n    array.splice(array.length - denomination, 0, \".\");\n\n    while (array.length - array.indexOf(\".\") <= decimals) {\n      array.push(\"0\");\n    }\n\n    if (showLastNonZeroDecimal) {\n      var nonZeroDigitIndex = 0;\n\n      for (var i = array.length - 1; i > 0; i--) {\n        if (array[i] !== \"0\") {\n          nonZeroDigitIndex = i + 1;\n          break;\n        }\n      }\n\n      var decimalsIndex = array.indexOf(\".\") + decimals + 1;\n      var sliceIndex = Math.max(decimalsIndex, nonZeroDigitIndex);\n      array = array.slice(0, sliceIndex);\n    } else {\n      array = array.slice(0, array.indexOf(\".\") + decimals + 1);\n    }\n  }\n\n  if (addCommas) {\n    array = array.reverse();\n    var reference = denomination ? array.length - array.indexOf(\".\") - 1 : array.length;\n    var count = Math.floor(reference / 3);\n\n    for (var _i = 1; _i <= count; _i++) {\n      var position = array.indexOf(\".\") + 3 * _i + _i;\n\n      if (position !== array.length) {\n        array.splice(position, 0, \",\");\n      }\n    }\n\n    array = array.reverse();\n  }\n\n  var allDecimalsZero = array.slice(array.indexOf(\".\") + 1).every(function (digit) {\n    return digit.toString() === \"0\";\n  });\n  var string = array.join(\"\");\n  var output;\n\n  if (allDecimalsZero) {\n    output = string.split(\".\")[0];\n  } else {\n    output = decimals === 0 && !showLastNonZeroDecimal ? string.split(\".\").join(\"\") : string;\n  }\n\n  if (negative) {\n    output = \"-\" + output;\n  }\n\n  return output;\n}\n\nfunction denominate(_ref) {\n  var input = _ref.input,\n      denomination = _ref.denomination,\n      decimals = _ref.decimals,\n      _ref$showLastNonZeroD = _ref.showLastNonZeroDecimal,\n      showLastNonZeroDecimal = _ref$showLastNonZeroD === void 0 ? false : _ref$showLastNonZeroD,\n      _ref$addCommas = _ref.addCommas,\n      addCommas = _ref$addCommas === void 0 ? true : _ref$addCommas;\n\n  if (!stringIsInteger(input, false)) {\n    throw new Error(\"Invalid input\");\n  }\n\n  return format(input, denomination, decimals, showLastNonZeroDecimal, addCommas);\n}\n\nvar decimals = 4;\nvar denomination = 18;\nvar erdLabel = \"EGLD\";\n\nvar denominateInvalid = function denominateInvalid(props) {\n  return React__default.createElement(\"span\", {\n    \"data-testid\": props[\"data-testid\"] ? props[\"data-testid\"] : \"denominateComponent\"\n  }, React__default.createElement(\"span\", {\n    className: \"int-amount\"\n  }, \"...\"));\n};\n\nvar denominateValid = function denominateValid(props) {\n  var value = props.value,\n      _props$showLastNonZer = props.showLastNonZeroDecimal,\n      showLastNonZeroDecimal = _props$showLastNonZer === void 0 ? false : _props$showLastNonZer,\n      _props$showLabel = props.showLabel,\n      showLabel = _props$showLabel === void 0 ? true : _props$showLabel,\n      _props$erdLabel = props.erdLabel,\n      erdLabel$1 = _props$erdLabel === void 0 ? erdLabel : _props$erdLabel;\n  var decimals$1 = props.decimals !== undefined ? props.decimals : decimals;\n  var denomination$1 = props.denomination !== undefined ? props.denomination : denomination;\n  var denominatedValue = denominate({\n    input: value,\n    denomination: denomination$1,\n    decimals: decimals$1,\n    showLastNonZeroDecimal: showLastNonZeroDecimal\n  });\n  var valueParts = denominatedValue.split(\".\");\n  var hasNoDecimals = valueParts.length === 1;\n  var isNotZero = denominatedValue !== \"0\";\n\n  if (decimals$1 > 0 && hasNoDecimals && isNotZero) {\n    var zeros = \"\";\n\n    for (var i = 1; i <= decimals$1; i++) {\n      zeros = zeros + \"0\";\n    }\n\n    valueParts.push(zeros);\n  }\n\n  return React__default.createElement(\"span\", {\n    \"data-testid\": props[\"data-testid\"] ? props[\"data-testid\"] : \"denominateComponent\"\n  }, React__default.createElement(\"span\", {\n    className: \"int-amount\"\n  }, valueParts[0]), valueParts.length > 1 && React__default.createElement(\"span\", {\n    className: \"decimals\"\n  }, \".\", valueParts[1]), showLabel && React__default.createElement(\"span\", {\n    className: \"symbol \" + (props.token ? \"text-muted\" : \"\")\n  }, \"\\xA0\", props.token ? props.token : erdLabel$1));\n};\n\nvar Denominate = function Denominate(props) {\n  var value = props.value;\n  return !stringIsInteger(value) ? denominateInvalid(props) : denominateValid(props);\n};\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar usdValue = function usdValue(_ref) {\n  var amount = _ref.amount,\n      usd = _ref.usd,\n      _ref$decimals = _ref.decimals,\n      decimals = _ref$decimals === void 0 ? 2 : _ref$decimals;\n  var sum = (parseFloat(amount) * usd).toFixed(decimals);\n  return parseFloat(sum).toLocaleString('en', {\n    maximumFractionDigits: decimals,\n    minimumFractionDigits: decimals\n  });\n};\n\nvar _excluded = [\"amount\", \"usd\"];\n\nvar UsdValue = function UsdValue(props) {\n  var amount = props.amount,\n      usd = props.usd,\n      dataTestId = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var value = \"\\u2248 $\" + usdValue({\n    amount: amount,\n    usd: usd\n  });\n  return createElement(\"small\", Object.assign({\n    className: \"form-text text-secondary mt-0\"\n  }, dataTestId), \"\" + amount === \"0\" ? \"= $0\" : value);\n};\n\nfunction nominate(input, customDenomination) {\n  var parts = input.toString().split('.');\n  var denomination$1 = customDenomination !== undefined ? customDenomination : denomination;\n\n  if (parts[1]) {\n    while (parts[1].substring(parts[1].length - 1) === '0' && parts[1].length > 1) {\n      parts[1] = parts[1].substring(0, parts[1].length - 1);\n    }\n  }\n\n  var count = parts[1] ? denomination$1 - parts[1].length : denomination$1;\n  count = count < 0 ? 0 : count;\n  var transformed = parts.join('') + '0'.repeat(count);\n\n  while (transformed.substring(0, 1) === '0' && transformed.length > 1) {\n    transformed = transformed.substring(1);\n  }\n\n  return transformed;\n}\n\nfunction getTokenFromData(data) {\n  if (data && data.includes(\"ESDTTransfer\")) {\n    try {\n      var _data$split = data.split(\"@\"),\n          encodedToken = _data$split[1],\n          encodedAmount = _data$split[2],\n          rest = _data$split.slice(3);\n\n      var tokenId = Buffer.from(encodedToken, \"hex\").toString(\"ascii\");\n\n      if (tokenId) {\n        var nominatedTokenAmount = new bignumber(\"0x\" + encodedAmount.replace(\"0x\", \"\")).toString(10);\n        return {\n          tokenId: tokenId,\n          nominatedTokenAmount: nominatedTokenAmount\n        };\n      } else {\n        return {\n          tokenId: \"\",\n          nominatedTokenAmount: \"\"\n        };\n      }\n    } catch (e) {\n      return {\n        tokenId: \"\",\n        nominatedTokenAmount: \"\"\n      };\n    }\n  }\n\n  return {\n    tokenId: \"\",\n    nominatedTokenAmount: \"\"\n  };\n}\n\nvar stringIsFloat = function stringIsFloat(amount) {\n  var _amount$split = amount.split(\".\"),\n      wholes = _amount$split[0],\n      decimals = _amount$split[1];\n\n  if (decimals) {\n    while (decimals.charAt(decimals.length - 1) === \"0\") {\n      decimals = decimals.slice(0, -1);\n    }\n  }\n\n  var number = decimals ? [wholes, decimals].join(\".\") : wholes;\n  var bNparsed = new bignumber(number);\n  return bNparsed.toString(10) === number && bNparsed.comparedTo(0) >= 0;\n};\n\nvar placeholderData = {\n  from: \"erd12dnfhej64s6c56ka369gkyj3hwv5ms0y5rxgsk2k7hkd2vuk7rvqxkalsa\",\n  to: \"erd12dnfhej64s6c56ka369gkyj3hwv5ms0y5rxgsk2k7hkd2vuk7rvqxkalsa\"\n};\n\nfunction calculateFeeLimit(_ref) {\n  var _ref$minGasLimit = _ref.minGasLimit,\n      minGasLimit = _ref$minGasLimit === void 0 ? \"50000\" : _ref$minGasLimit,\n      gasLimit = _ref.gasLimit,\n      gasPrice = _ref.gasPrice,\n      inputData = _ref.data,\n      gasPerDataByte = _ref.gasPerDataByte,\n      gasPriceModifier = _ref.gasPriceModifier,\n      _ref$defaultGasPrice = _ref.defaultGasPrice,\n      defaultGasPrice = _ref$defaultGasPrice === void 0 ? \"1000000000\" : _ref$defaultGasPrice,\n      chainId = _ref.chainId;\n  var data = inputData || \"\";\n  var validGasLimit = stringIsInteger(gasLimit) ? gasLimit : minGasLimit;\n  var validGasPrice = stringIsFloat(gasPrice) ? gasPrice : defaultGasPrice;\n  var transaction = new Transaction({\n    nonce: new Nonce(0),\n    value: Balance.Zero(),\n    receiver: new Address(placeholderData.to),\n    gasPrice: new GasPrice(parseInt(validGasPrice)),\n    gasLimit: new GasLimit(parseInt(validGasLimit)),\n    data: new TransactionPayload(data.trim()),\n    chainID: new ChainID(chainId),\n    version: new TransactionVersion(1)\n  });\n  var networkConfig = new NetworkConfig();\n  networkConfig.MinGasLimit = new GasLimit(parseInt(minGasLimit));\n  networkConfig.GasPerDataByte = parseInt(gasPerDataByte);\n  networkConfig.GasPriceModifier = new GasPriceModifier(parseFloat(gasPriceModifier));\n\n  try {\n    var bNfee = transaction.computeFee(networkConfig);\n    var fee = bNfee.toString(10);\n    return fee;\n  } catch (err) {\n    console.error(\"Unable to calculate fee limit\", err);\n    return \"0\";\n  }\n}\n\nvar Ui = {\n  UsdValue: UsdValue,\n  Trim: Trim,\n  Denominate: Denominate\n};\nvar operations = {\n  denominate: denominate,\n  nominate: nominate,\n  getTokenFromData: getTokenFromData,\n  calculateFeeLimit: calculateFeeLimit\n};\nvar helpers = {\n  usdValue: usdValue\n};\nvar validation = {\n  stringIsInteger: stringIsInteger,\n  stringIsFloat: stringIsFloat\n};\nexport { Ui, helpers, operations, validation };","map":{"version":3,"mappings":"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","names":["useDebounce","value","timeout","useState","state","setState","effect","handler","setTimeout","clearTimeout","useEffect","Trim","text","dataTestId","className","_ref$className","React","debounce","setDebounce","overflow","setOverflow","trimRef","document","createElement","hiddenTextRef","debounceTracker","listener","window","addEventListener","removeEventListener","current","diff","offsetWidth","ref","String","substring","Math","floor","length","ceil","globalObject","BigNumber","isNumeric","mathceil","mathfloor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","clone","configObject","div","convertBase","parseNumeric","P","prototype","constructor","toString","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","v","b","alphabet","c","caseChanged","e","i","isNum","len","str","x","_isBigNumber","s","slice","test","charCodeAt","indexOf","replace","search","intCheck","round","DEBUG","Error","charAt","toUpperCase","toLowerCase","push","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","set","obj","p","hasOwnProperty","pop","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","n","out","call","maximum","max","maxOrMin","arguments","lt","minimum","min","gt","random","pow2_53","random53bitInt","dp","a","k","rand","Uint32Array","copy","splice","sum","args","plus","decimal","toBaseOut","baseIn","baseOut","j","arr","arrL","reverse","sign","callerIsToString","d","r","xc","y","rm","pow","toFixedPoint","coeffToString","concat","multiply","base","m","temp","xlo","xhi","carry","klo","khi","compare","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","yc","NaN","bitFloor","format","id","c0","ne","toExponential","method","normalise","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","isNaN","p1","p2","sd","ni","rd","pows10","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","isOdd","mod","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","t","xLTy","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","z","l","name","zs","module","exports","self","this","stringIsInteger","integer","positiveNumbersOnly","stringInteger","match","bNparsed","limit","big","denomination","decimals","showLastNonZeroDecimal","addCommas","array","negative","shift","unshift","nonZeroDigitIndex","decimalsIndex","sliceIndex","reference","count","position","allDecimalsZero","every","digit","string","join","output","denominate","input","_ref$showLastNonZeroD","_ref$addCommas","erdLabel","denominateInvalid","props","denominateValid","showLabel","configErdLabel","undefined","configDecimals","configDenomination","denominatedValue","valueParts","hasNoDecimals","isNotZero","zeros","token","Denominate","usdValue","amount","usd","_ref$decimals","parseFloat","toLocaleString","maximumFractionDigits","minimumFractionDigits","UsdValue","nominate","customDenomination","parts","transformed","repeat","getTokenFromData","data","includes","encodedToken","encodedAmount","rest","tokenId","Buffer","from","nominatedTokenAmount","stringIsFloat","wholes","number","placeholderData","to","calculateFeeLimit","minGasLimit","_ref$minGasLimit","gasLimit","gasPrice","inputData","gasPerDataByte","gasPriceModifier","defaultGasPrice","_ref$defaultGasPrice","chainId","validGasLimit","validGasPrice","transaction","Transaction","nonce","Nonce","Balance","Zero","receiver","Address","GasPrice","parseInt","GasLimit","TransactionPayload","trim","chainID","ChainID","version","TransactionVersion","networkConfig","NetworkConfig","MinGasLimit","GasPerDataByte","GasPriceModifier","bNfee","computeFee","fee","err","console","error","Ui","operations","helpers","validation"],"sources":["../src/helpers/useDebounce.ts","../src/components/Trim/index.tsx","../node_modules/bignumber.js/bignumber.js","../src/validation/stringIsInteger.ts","../src/operations/denominate.tsx","../src/config.ts","../src/components/Denominate/index.tsx","../src/helpers/usdValue.tsx","../src/components/UsdValue/index.tsx","../src/operations/nominate.ts","../src/operations/getTokenFromData.ts","../src/validation/stringIsFloat.ts","../src/operations/calculateFeeLimit.ts","../src/index.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst useDebounce = (value: any, timeout: number) => {\n  const [state, setState] = useState(value);\n\n  const effect = () => {\n    const handler = setTimeout(() => setState(value), timeout);\n\n    return () => clearTimeout(handler);\n  };\n\n  useEffect(effect, [value]);\n\n  return state;\n};\n\nexport default useDebounce;\n","import * as React from \"react\";\nimport useDebounce from \"helpers/useDebounce\";\n\nconst Trim = ({\n  text,\n  \"data-testid\": dataTestId,\n  className = \"\",\n}: {\n  text: string;\n  \"data-testid\"?: string;\n  className?: string;\n}) => {\n  const [debounce, setDebounce] = React.useState(0);\n\n  const [overflow, setOverflow] = React.useState(false);\n  const trimRef = React.useRef(document.createElement(\"span\"));\n  const hiddenTextRef = React.useRef(document.createElement(\"span\"));\n\n  const debounceTracker = useDebounce(debounce, 100);\n\n  const listener = () => {\n    setDebounce(debounce + 1);\n  };\n\n  const effect = () => {\n    window.addEventListener(\"resize\", listener);\n    return () => {\n      window.removeEventListener(\"resize\", listener);\n    };\n  };\n\n  React.useEffect(effect, [debounce]);\n\n  React.useEffect(() => {\n    if (trimRef.current && hiddenTextRef.current) {\n      const diff =\n        hiddenTextRef.current.offsetWidth - trimRef.current.offsetWidth;\n      setOverflow(diff > 1);\n    }\n  }, [debounceTracker]);\n\n  return (\n    <span\n      ref={trimRef}\n      className={`trim ${overflow ? \"overflow\" : \"\"}`}\n      data-testid={dataTestId}\n    >\n      <span ref={hiddenTextRef} className=\"hidden-text-ref\">\n        {text}\n      </span>\n\n      {overflow ? (\n        <React.Fragment>\n          <span className=\"left\">\n            <span className={className}>\n              {String(text).substring(0, Math.floor(text.length / 2))}\n            </span>\n          </span>\n          <span className={`ellipsis ${className}`}>...</span>\n          <span className=\"right\">\n            <span className={className}>\n              {String(text).substring(Math.ceil(text.length / 2))}\n            </span>\n          </span>\n        </React.Fragment>\n      ) : (\n        <span className={className}>{text}</span>\n      )}\n    </span>\n  );\n};\n\nexport default Trim;\n",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v9.0.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if less than two characters,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '5e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","import BigNumber from 'bignumber.js';\n\nconst stringIsInteger = (integer: string, positiveNumbersOnly = true) => {\n  const stringInteger = String(integer);\n  if (!stringInteger.match(/^[-]?\\d+$/)) {\n    return false;\n  }\n  const bNparsed = new BigNumber(stringInteger);\n  const limit = positiveNumbersOnly ? 0 : -1;\n  return bNparsed.toString(10) === stringInteger && bNparsed.comparedTo(0) >= limit;\n};\n\nexport default stringIsInteger;\n","import stringIsInteger from \"validation/stringIsInteger\";\n\nfunction format(\n  big: string,\n  denomination: number,\n  decimals: number,\n  showLastNonZeroDecimal: boolean,\n  addCommas: boolean\n) {\n  showLastNonZeroDecimal =\n    typeof showLastNonZeroDecimal !== \"undefined\"\n      ? showLastNonZeroDecimal\n      : false;\n\n  let array = big.toString().split(\"\");\n\n  let negative = false;\n  if (array[0] === \"-\") {\n    array.shift();\n    negative = true;\n  }\n\n  if (denomination !== 0) {\n    // make sure we have enough characters\n    while (array.length < denomination + 1) {\n      array.unshift(\"0\");\n    }\n\n    // add our dot\n    array.splice(array.length - denomination, 0, \".\");\n\n    // make sure there are enough decimals after the dot\n    while (array.length - array.indexOf(\".\") <= decimals) {\n      array.push(\"0\");\n    }\n\n    if (showLastNonZeroDecimal) {\n      let nonZeroDigitIndex = 0;\n      for (let i = array.length - 1; i > 0; i--) {\n        if (array[i] !== \"0\") {\n          nonZeroDigitIndex = i + 1;\n          break;\n        }\n      }\n      const decimalsIndex = array.indexOf(\".\") + decimals + 1;\n      const sliceIndex = Math.max(decimalsIndex, nonZeroDigitIndex);\n      array = array.slice(0, sliceIndex);\n    } else {\n      // trim unnecessary characters after the dot\n      array = array.slice(0, array.indexOf(\".\") + decimals + 1);\n    }\n  }\n\n  if (addCommas) {\n    // add comas every 3 characters\n    array = array.reverse();\n    const reference = denomination\n      ? array.length - array.indexOf(\".\") - 1\n      : array.length;\n    const count = Math.floor(reference / 3);\n    for (let i = 1; i <= count; i++) {\n      const position = array.indexOf(\".\") + 3 * i + i;\n      if (position !== array.length) {\n        array.splice(position, 0, \",\");\n      }\n    }\n    array = array.reverse();\n  }\n\n  const allDecimalsZero = array\n    .slice(array.indexOf(\".\") + 1)\n    .every((digit) => digit.toString() === \"0\");\n\n  const string = array.join(\"\");\n\n  let output;\n  if (allDecimalsZero) {\n    output = string.split(\".\")[0];\n  } else {\n    output =\n      decimals === 0 && !showLastNonZeroDecimal\n        ? string.split(\".\").join(\"\")\n        : string;\n  }\n\n  if (negative) {\n    output = \"-\" + output;\n  }\n\n  return output;\n}\n\ninterface DenominateType {\n  input: string;\n  denomination: number;\n  decimals: number;\n  showLastNonZeroDecimal: boolean;\n  addCommas?: boolean;\n}\n\nexport default function denominate({\n  input,\n  denomination,\n  decimals,\n  showLastNonZeroDecimal = false,\n  addCommas = true,\n}: DenominateType): string {\n  if (!stringIsInteger(input, false)) {\n    throw new Error(\"Invalid input\");\n  }\n\n  return format(\n    input,\n    denomination,\n    decimals,\n    showLastNonZeroDecimal,\n    addCommas\n  );\n}\n","export const decimals: number = 4;\nexport const denomination: number = 18;\nexport const erdLabel = \"EGLD\";\n","import React from \"react\";\nimport stringIsInteger from \"validation/stringIsInteger\";\nimport denominate from \"../../operations/denominate\";\nimport {\n  denomination as configDenomination,\n  decimals as configDecimals,\n  erdLabel as configErdLabel,\n} from \"config\";\n\nexport interface DenominateType {\n  value: string;\n  showLastNonZeroDecimal?: boolean;\n  showLabel?: boolean;\n  token?: string;\n  decimals?: number;\n  denomination?: number;\n  erdLabel?: string;\n  \"data-testid\"?: string;\n}\n\nconst denominateInvalid = (props: DenominateType) => {\n  return (\n    <span\n      data-testid={\n        props[\"data-testid\"] ? props[\"data-testid\"] : \"denominateComponent\"\n      }\n    >\n      <span className=\"int-amount\">...</span>\n    </span>\n  );\n};\n\nconst denominateValid = (props: DenominateType) => {\n  const {\n    value,\n    showLastNonZeroDecimal = false,\n    showLabel = true,\n    erdLabel = configErdLabel,\n  } = props;\n  const decimals =\n    props.decimals !== undefined ? props.decimals : configDecimals;\n  const denomination =\n    props.denomination !== undefined ? props.denomination : configDenomination;\n\n  const denominatedValue = denominate({\n    input: value,\n    denomination,\n    decimals,\n    showLastNonZeroDecimal,\n  });\n\n  const valueParts = denominatedValue.split(\".\");\n  const hasNoDecimals = valueParts.length === 1;\n  const isNotZero = denominatedValue !== \"0\";\n\n  if (decimals > 0 && hasNoDecimals && isNotZero) {\n    let zeros = \"\";\n\n    for (let i = 1; i <= decimals; i++) {\n      zeros = zeros + \"0\";\n    }\n\n    valueParts.push(zeros);\n  }\n\n  return (\n    <span\n      data-testid={\n        props[\"data-testid\"] ? props[\"data-testid\"] : \"denominateComponent\"\n      }\n    >\n      <span className=\"int-amount\">{valueParts[0]}</span>\n      {valueParts.length > 1 && (\n        <span className=\"decimals\">.{valueParts[1]}</span>\n      )}\n      {showLabel && (\n        <span className={`symbol ${props.token ? \"text-muted\" : \"\"}`}>\n          &nbsp;{props.token ? props.token : erdLabel}\n        </span>\n      )}\n    </span>\n  );\n};\n\nconst Denominate = (props: {\n  value: string;\n  showLastNonZeroDecimal?: boolean;\n  showLabel?: boolean;\n  token?: string;\n  decimals?: number;\n  denomination?: number;\n  erdLabel?: string;\n  \"data-testid\"?: string;\n}) => {\n  const { value } = props;\n\n  return !stringIsInteger(value)\n    ? denominateInvalid(props)\n    : denominateValid(props);\n};\n\nexport default Denominate;\n","const usdValue = ({\n  amount,\n  usd,\n  decimals = 2,\n}: {\n  amount: string;\n  usd: number;\n  decimals?: number;\n}) => {\n  const sum = (parseFloat(amount) * usd).toFixed(decimals);\n  return parseFloat(sum).toLocaleString('en', {\n    maximumFractionDigits: decimals,\n    minimumFractionDigits: decimals,\n  });\n};\n\nexport default usdValue;\n","import * as React from \"react\";\nimport usdValue from \"helpers/usdValue\";\n\nconst UsdValue = (props: {\n  amount: string;\n  usd: number;\n  \"data-testid\"?: string;\n}) => {\n  const { amount, usd, ...dataTestId } = props;\n  const value = `≈ $${usdValue({ amount, usd })}`;\n  return (\n    <small className=\"form-text text-secondary mt-0\" {...dataTestId}>\n      {`${amount}` === \"0\" ? \"= $0\" : value}\n    </small>\n  );\n};\n\nexport default UsdValue;\n","import { denomination as configDenomination } from 'config';\n\nexport default function nominate(input: string, customDenomination?: number) {\n  const parts = input.toString().split('.');\n  const denomination = customDenomination !== undefined ? customDenomination : configDenomination;\n\n  if (parts[1]) {\n    // remove trailing zeros\n    while (parts[1].substring(parts[1].length - 1) === '0' && parts[1].length > 1) {\n      parts[1] = parts[1].substring(0, parts[1].length - 1);\n    }\n  }\n\n  let count = parts[1] ? denomination - parts[1].length : denomination;\n\n  count = count < 0 ? 0 : count;\n\n  let transformed = parts.join('') + '0'.repeat(count);\n\n  // remove beginning zeros\n  while (transformed.substring(0, 1) === '0' && transformed.length > 1) {\n    transformed = transformed.substring(1);\n  }\n\n  return transformed;\n}\n","import BigNumber from \"bignumber.js\";\r\nexport default function getTokenFromData(\r\n  data?: string\r\n): { tokenId: string; nominatedTokenAmount: string } {\r\n  if (data && data.includes(\"ESDTTransfer\")) {\r\n    try {\r\n      const [, encodedToken, encodedAmount, ...rest] = data.split(\"@\");\r\n      const tokenId = Buffer.from(encodedToken, \"hex\").toString(\"ascii\");\r\n      if (tokenId) {\r\n        const nominatedTokenAmount = new BigNumber(\r\n          \"0x\" + encodedAmount.replace(\"0x\", \"\")\r\n        ).toString(10);\r\n        return {\r\n          tokenId,\r\n          nominatedTokenAmount,\r\n        };\r\n      } else {\r\n        return {\r\n          tokenId: \"\",\r\n          nominatedTokenAmount: \"\",\r\n        };\r\n      }\r\n    } catch (e) {\r\n      return {\r\n        tokenId: \"\",\r\n        nominatedTokenAmount: \"\",\r\n      };\r\n    }\r\n  }\r\n  return {\r\n    tokenId: \"\",\r\n    nominatedTokenAmount: \"\",\r\n  };\r\n}\r\n","import BigNumber from \"bignumber.js\";\r\nconst stringIsFloat = (amount: string) => {\r\n  // tslint:disable-next-line\r\n  let [wholes, decimals] = amount.split(\".\");\r\n  if (decimals) {\r\n    while (decimals.charAt(decimals.length - 1) === \"0\") {\r\n      decimals = decimals.slice(0, -1);\r\n    }\r\n  }\r\n  const number = decimals ? [wholes, decimals].join(\".\") : wholes;\r\n  const bNparsed = new BigNumber(number);\r\n  return bNparsed.toString(10) === number && bNparsed.comparedTo(0) >= 0;\r\n};\r\nexport default stringIsFloat;\r\n","import {\r\n  Transaction,\r\n  Nonce,\r\n  Balance,\r\n  GasPrice,\r\n  GasLimit,\r\n  TransactionPayload,\r\n  ChainID,\r\n  TransactionVersion,\r\n  Address,\r\n  NetworkConfig,\r\n  GasPriceModifier,\r\n} from \"@elrondnetwork/erdjs\";\r\n\r\nimport stringIsInteger from \"validation/stringIsInteger\";\r\nimport stringIsFloat from \"validation/stringIsFloat\";\r\ninterface CalculateFeeLimitType {\r\n  gasLimit: string;\r\n  gasPrice: string;\r\n  data: string;\r\n  gasPerDataByte: string;\r\n  gasPriceModifier: string;\r\n  chainId: string;\r\n  minGasLimit?: string;\r\n  defaultGasPrice?: string;\r\n}\r\nconst placeholderData = {\r\n  from: \"erd12dnfhej64s6c56ka369gkyj3hwv5ms0y5rxgsk2k7hkd2vuk7rvqxkalsa\",\r\n  to: \"erd12dnfhej64s6c56ka369gkyj3hwv5ms0y5rxgsk2k7hkd2vuk7rvqxkalsa\",\r\n};\r\nexport default function calculateFeeLimit({\r\n  minGasLimit = \"50000\",\r\n  gasLimit,\r\n  gasPrice,\r\n  data: inputData,\r\n  gasPerDataByte,\r\n  gasPriceModifier,\r\n  defaultGasPrice = \"1000000000\",\r\n  chainId,\r\n}: CalculateFeeLimitType) {\r\n  const data = inputData || \"\";\r\n  const validGasLimit = stringIsInteger(gasLimit) ? gasLimit : minGasLimit;\r\n  const validGasPrice = stringIsFloat(gasPrice) ? gasPrice : defaultGasPrice;\r\n  const transaction = new Transaction({\r\n    nonce: new Nonce(0),\r\n    value: Balance.Zero(),\r\n    receiver: new Address(placeholderData.to),\r\n    gasPrice: new GasPrice(parseInt(validGasPrice)),\r\n    gasLimit: new GasLimit(parseInt(validGasLimit)),\r\n    data: new TransactionPayload(data.trim()),\r\n    chainID: new ChainID(chainId),\r\n    version: new TransactionVersion(1),\r\n  });\r\n\r\n  const networkConfig = new NetworkConfig();\r\n  networkConfig.MinGasLimit = new GasLimit(parseInt(minGasLimit));\r\n  networkConfig.GasPerDataByte = parseInt(gasPerDataByte);\r\n  networkConfig.GasPriceModifier = new GasPriceModifier(\r\n    parseFloat(gasPriceModifier)\r\n  );\r\n  try {\r\n    const bNfee = transaction.computeFee(networkConfig);\r\n    const fee = bNfee.toString(10);\r\n    return fee;\r\n  } catch (err) {\r\n    console.error(\"Unable to calculate fee limit\", err);\r\n    return \"0\";\r\n  }\r\n}\r\n","//#region comopnents\nimport Trim from \"components/Trim\";\nimport Denominate from \"components/Denominate\";\nimport UsdValue from \"components/UsdValue\";\nexport const Ui = { UsdValue, Trim, Denominate };\n//#endregion\n\n//#region operations\nimport denominate from \"./operations/denominate\";\nimport nominate from \"./operations/nominate\";\nimport getTokenFromData from \"./operations/getTokenFromData\";\nimport calculateFeeLimit from \"./operations/calculateFeeLimit\";\nexport const operations = {\n  denominate,\n  nominate,\n  getTokenFromData,\n  calculateFeeLimit,\n};\n//#endregion\n\n//#region helpers\nimport usdValue from \"./helpers/usdValue\";\nexport const helpers = {\n  usdValue,\n};\n//#endregion\n\n//#region validation\nimport stringIsInteger from \"./validation/stringIsInteger\";\nimport stringIsFloat from \"./validation/stringIsFloat\";\nexport const validation = { stringIsInteger, stringIsFloat };\n//#endregion\n"]},"metadata":{},"sourceType":"module"}