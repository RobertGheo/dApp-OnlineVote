{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EnumBinaryCodec = void 0;\n\nconst typesystem_1 = require(\"../typesystem\");\n\nconst fields_1 = require(\"./fields\");\n\nclass EnumBinaryCodec {\n  constructor(binaryCodec) {\n    this.binaryCodec = binaryCodec;\n    this.fieldsCodec = new fields_1.FieldsBinaryCodec(binaryCodec);\n  }\n\n  decodeTopLevel(buffer, type) {\n    // This handles enums without fields, with discriminant = 0, as well.\n    let [enumValue] = this.decodeNested(buffer, type);\n    return enumValue;\n  }\n\n  decodeNested(buffer, type) {\n    let [discriminant, lengthOfDiscriminant] = this.readDiscriminant(buffer);\n    buffer = buffer.slice(lengthOfDiscriminant);\n    let variant = type.getVariantByDiscriminant(discriminant);\n    let fieldDefinitions = variant.getFieldsDefinitions();\n    let [fields, lengthOfFields] = this.fieldsCodec.decodeNested(buffer, fieldDefinitions);\n    let enumValue = new typesystem_1.EnumValue(type, variant, fields);\n    return [enumValue, lengthOfDiscriminant + lengthOfFields];\n  }\n\n  readDiscriminant(buffer) {\n    let [value, length] = this.binaryCodec.decodeNested(buffer, new typesystem_1.U8Type());\n    let discriminant = value.valueOf();\n    return [discriminant, length];\n  }\n\n  encodeNested(enumValue) {\n    let discriminant = new typesystem_1.U8Value(enumValue.discriminant);\n    let discriminantBuffer = this.binaryCodec.encodeNested(discriminant);\n    let fields = enumValue.getFields();\n    let fieldsBuffer = this.fieldsCodec.encodeNested(fields);\n    return Buffer.concat([discriminantBuffer, fieldsBuffer]);\n  }\n\n  encodeTopLevel(enumValue) {\n    let fields = enumValue.getFields();\n    let hasFields = fields.length > 0;\n    let fieldsBuffer = this.fieldsCodec.encodeNested(fields);\n    let discriminant = new typesystem_1.U8Value(enumValue.discriminant);\n    let discriminantBuffer = hasFields ? this.binaryCodec.encodeNested(discriminant) : this.binaryCodec.encodeTopLevel(discriminant);\n    return Buffer.concat([discriminantBuffer, fieldsBuffer]);\n  }\n\n}\n\nexports.EnumBinaryCodec = EnumBinaryCodec;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAEA;;AAEA,MAAaA,eAAb,CAA4B;AAIxBC,cAAYC,WAAZ,EAAoC;AAChC,SAAKA,WAAL,GAAmBA,WAAnB;AACA,SAAKC,WAAL,GAAmB,IAAIC,0BAAJ,CAAsBF,WAAtB,CAAnB;AACH;;AAEDG,gBAAc,CAACC,MAAD,EAAiBC,IAAjB,EAA+B;AACzC;AACA,QAAI,CAACC,SAAD,IAAc,KAAKC,YAAL,CAAkBH,MAAlB,EAA0BC,IAA1B,CAAlB;AACA,WAAOC,SAAP;AACH;;AAEDC,cAAY,CAACH,MAAD,EAAiBC,IAAjB,EAA+B;AACvC,QAAI,CAACG,YAAD,EAAeC,oBAAf,IAAuC,KAAKC,gBAAL,CAAsBN,MAAtB,CAA3C;AACAA,UAAM,GAAGA,MAAM,CAACO,KAAP,CAAaF,oBAAb,CAAT;AAEA,QAAIG,OAAO,GAAGP,IAAI,CAACQ,wBAAL,CAA8BL,YAA9B,CAAd;AACA,QAAIM,gBAAgB,GAAGF,OAAO,CAACG,oBAAR,EAAvB;AAEA,QAAI,CAACC,MAAD,EAASC,cAAT,IAA8C,KAAKhB,WAAL,CAAiBM,YAAjB,CAA8BH,MAA9B,EAAsCU,gBAAtC,CAAlD;AACA,QAAIR,SAAS,GAAG,IAAIY,sBAAJ,CAAcb,IAAd,EAAoBO,OAApB,EAA6BI,MAA7B,CAAhB;AAEA,WAAO,CAACV,SAAD,EAAYG,oBAAoB,GAAGQ,cAAnC,CAAP;AACH;;AAEOP,kBAAgB,CAACN,MAAD,EAAe;AACnC,QAAI,CAACe,KAAD,EAAQC,MAAR,IAAkB,KAAKpB,WAAL,CAAiBO,YAAjB,CAA8BH,MAA9B,EAAsC,IAAIc,mBAAJ,EAAtC,CAAtB;AACA,QAAIV,YAAY,GAAGW,KAAK,CAACE,OAAN,EAAnB;AAEA,WAAO,CAACb,YAAD,EAAeY,MAAf,CAAP;AACH;;AAEDE,cAAY,CAAChB,SAAD,EAAqB;AAC7B,QAAIE,YAAY,GAAG,IAAIU,oBAAJ,CAAYZ,SAAS,CAACE,YAAtB,CAAnB;AACA,QAAIe,kBAAkB,GAAG,KAAKvB,WAAL,CAAiBsB,YAAjB,CAA8Bd,YAA9B,CAAzB;AAEA,QAAIQ,MAAM,GAAGV,SAAS,CAACkB,SAAV,EAAb;AACA,QAAIC,YAAY,GAAG,KAAKxB,WAAL,CAAiBqB,YAAjB,CAA8BN,MAA9B,CAAnB;AAEA,WAAOU,MAAM,CAACC,MAAP,CAAc,CAACJ,kBAAD,EAAqBE,YAArB,CAAd,CAAP;AACH;;AAEDG,gBAAc,CAACtB,SAAD,EAAqB;AAC/B,QAAIU,MAAM,GAAGV,SAAS,CAACkB,SAAV,EAAb;AACA,QAAIK,SAAS,GAAGb,MAAM,CAACI,MAAP,GAAgB,CAAhC;AACA,QAAIK,YAAY,GAAG,KAAKxB,WAAL,CAAiBqB,YAAjB,CAA8BN,MAA9B,CAAnB;AAEA,QAAIR,YAAY,GAAG,IAAIU,oBAAJ,CAAYZ,SAAS,CAACE,YAAtB,CAAnB;AACA,QAAIe,kBAAkB,GAAGM,SAAS,GAAG,KAAK7B,WAAL,CAAiBsB,YAAjB,CAA8Bd,YAA9B,CAAH,GAAiD,KAAKR,WAAL,CAAiB4B,cAAjB,CAAgCpB,YAAhC,CAAnF;AAEA,WAAOkB,MAAM,CAACC,MAAP,CAAc,CAACJ,kBAAD,EAAqBE,YAArB,CAAd,CAAP;AACH;;AAtDuB;;AAA5BK","names":["EnumBinaryCodec","constructor","binaryCodec","fieldsCodec","fields_1","decodeTopLevel","buffer","type","enumValue","decodeNested","discriminant","lengthOfDiscriminant","readDiscriminant","slice","variant","getVariantByDiscriminant","fieldDefinitions","getFieldsDefinitions","fields","lengthOfFields","typesystem_1","value","length","valueOf","encodeNested","discriminantBuffer","getFields","fieldsBuffer","Buffer","concat","encodeTopLevel","hasFields","exports"],"sourceRoot":"","sources":["../../../src/smartcontracts/codec/enum.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}