{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BooleanValue = exports.BooleanType = void 0;\n\nconst types_1 = require(\"./types\");\n\nclass BooleanType extends types_1.PrimitiveType {\n  constructor() {\n    super(\"bool\");\n  }\n\n}\n\nexports.BooleanType = BooleanType;\n/**\n * A boolean value fed to or fetched from a Smart Contract contract, as an immutable abstraction.\n */\n\nclass BooleanValue extends types_1.PrimitiveValue {\n  constructor(value) {\n    super(new BooleanType());\n    this.value = value;\n  }\n  /**\n   * Returns whether two objects have the same value.\n   *\n   * @param other another BooleanValue\n   */\n\n\n  equals(other) {\n    return this.value === other.value;\n  }\n\n  isTrue() {\n    return this.value === true;\n  }\n\n  isFalse() {\n    return !this.isTrue();\n  }\n\n  valueOf() {\n    return this.value;\n  }\n\n}\n\nexports.BooleanValue = BooleanValue;","map":{"version":3,"sources":["../../../src/smartcontracts/typesystem/boolean.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAEA,MAAa,WAAb,SAAiC,OAAA,CAAA,aAAjC,CAA8C;AAC1C,EAAA,WAAA,GAAA;AACI,UAAM,MAAN;AACH;;AAHyC;;AAA9C,OAAA,CAAA,WAAA,GAAA,WAAA;AAMA;;AAEG;;AACH,MAAa,YAAb,SAAkC,OAAA,CAAA,cAAlC,CAAgD;AAG5C,EAAA,WAAA,CAAY,KAAZ,EAA0B;AACtB,UAAM,IAAI,WAAJ,EAAN;AACA,SAAK,KAAL,GAAa,KAAb;AACH;AAED;;;;AAIG;;;AACH,EAAA,MAAM,CAAC,KAAD,EAAoB;AACtB,WAAO,KAAK,KAAL,KAAe,KAAK,CAAC,KAA5B;AACH;;AAED,EAAA,MAAM,GAAA;AACF,WAAO,KAAK,KAAL,KAAe,IAAtB;AACH;;AAED,EAAA,OAAO,GAAA;AACH,WAAO,CAAC,KAAK,MAAL,EAAR;AACH;;AAED,EAAA,OAAO,GAAA;AACH,WAAO,KAAK,KAAZ;AACH;;AA3B2C;;AAAhD,OAAA,CAAA,YAAA,GAAA,YAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BooleanValue = exports.BooleanType = void 0;\nconst types_1 = require(\"./types\");\nclass BooleanType extends types_1.PrimitiveType {\n    constructor() {\n        super(\"bool\");\n    }\n}\nexports.BooleanType = BooleanType;\n/**\n * A boolean value fed to or fetched from a Smart Contract contract, as an immutable abstraction.\n */\nclass BooleanValue extends types_1.PrimitiveValue {\n    constructor(value) {\n        super(new BooleanType());\n        this.value = value;\n    }\n    /**\n     * Returns whether two objects have the same value.\n     *\n     * @param other another BooleanValue\n     */\n    equals(other) {\n        return this.value === other.value;\n    }\n    isTrue() {\n        return this.value === true;\n    }\n    isFalse() {\n        return !this.isTrue();\n    }\n    valueOf() {\n        return this.value;\n    }\n}\nexports.BooleanValue = BooleanValue;\n//# sourceMappingURL=boolean.js.map"]},"metadata":{},"sourceType":"script"}