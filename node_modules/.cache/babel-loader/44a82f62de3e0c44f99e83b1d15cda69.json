{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionPayload = void 0;\n\nconst transactionPayloadBuilders_1 = require(\"./smartcontracts/transactionPayloadBuilders\");\n/**\n * The \"data\" field of a {@link Transaction}, as an immutable object.\n */\n\n\nclass TransactionPayload {\n  /**\n   * Creates a TransactionPayload from a utf-8 string or from a buffer.\n   */\n  constructor(data) {\n    this.data = Buffer.from(data || []);\n  }\n  /**\n   * Creates a TransactionPayload from a base-64 encoded string.\n   */\n\n\n  static fromEncoded(encoded) {\n    if (!encoded) {\n      return new TransactionPayload(\"\");\n    }\n\n    let decoded = Buffer.from(encoded, \"base64\").toString();\n    return new TransactionPayload(decoded);\n  }\n  /**\n   * Returns whether the \"data\" is void.\n   */\n\n\n  isEmpty() {\n    return this.data.length == 0;\n  }\n  /**\n   * Returns the base-64 representation of the data.\n   */\n\n\n  encoded() {\n    return this.data.toString(\"base64\");\n  }\n  /**\n   * Returns the data as a buffer.\n   */\n\n\n  valueOf() {\n    return this.data;\n  }\n\n  toString() {\n    return this.data.toString();\n  }\n\n  getEncodedArguments() {\n    return this.toString().split(\"@\");\n  }\n\n  getRawArguments() {\n    return this.getEncodedArguments().map(argument => Buffer.from(argument, \"hex\"));\n  }\n  /**\n   * Returns the length of the data.\n   */\n\n\n  length() {\n    return Buffer.from(this.data).length;\n  }\n  /**\n   * Returns a new builder, to be used for contract deploy transactions.\n   */\n\n\n  static contractDeploy() {\n    return new transactionPayloadBuilders_1.ContractDeployPayloadBuilder();\n  }\n  /**\n   * Returns a new builder, to be used for contract upgrade transactions.\n   */\n\n\n  static contractUpgrade() {\n    return new transactionPayloadBuilders_1.ContractUpgradePayloadBuilder();\n  }\n  /**\n   * Returns a new builder, to be used for contract call transactions.\n   */\n\n\n  static contractCall() {\n    return new transactionPayloadBuilders_1.ContractCallPayloadBuilder();\n  }\n\n}\n\nexports.TransactionPayload = TransactionPayload;","map":{"version":3,"sources":["../src/transactionPayload.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,4BAAA,GAAA,OAAA,CAAA,6CAAA,CAAA;AAEA;;AAEG;;;AACH,MAAa,kBAAb,CAA+B;AAG3B;;AAEG;AACH,EAAA,WAAA,CAAY,IAAZ,EAAkC;AAC9B,SAAK,IAAL,GAAY,MAAM,CAAC,IAAP,CAAY,IAAI,IAAI,EAApB,CAAZ;AACH;AAED;;AAEG;;;AACe,SAAX,WAAW,CAAC,OAAD,EAAiB;AAC/B,QAAI,CAAC,OAAL,EAAc;AACV,aAAO,IAAI,kBAAJ,CAAuB,EAAvB,CAAP;AACH;;AAED,QAAI,OAAO,GAAG,MAAM,CAAC,IAAP,CAAY,OAAZ,EAAqB,QAArB,EAA+B,QAA/B,EAAd;AACA,WAAO,IAAI,kBAAJ,CAAuB,OAAvB,CAAP;AACH;AAED;;AAEG;;;AACH,EAAA,OAAO,GAAA;AACH,WAAO,KAAK,IAAL,CAAU,MAAV,IAAoB,CAA3B;AACH;AAED;;AAEG;;;AACH,EAAA,OAAO,GAAA;AACH,WAAO,KAAK,IAAL,CAAU,QAAV,CAAmB,QAAnB,CAAP;AACH;AAED;;AAEG;;;AACH,EAAA,OAAO,GAAA;AACH,WAAO,KAAK,IAAZ;AACH;;AAED,EAAA,QAAQ,GAAA;AACJ,WAAO,KAAK,IAAL,CAAU,QAAV,EAAP;AACH;;AAED,EAAA,mBAAmB,GAAA;AACf,WAAO,KAAK,QAAL,GAAgB,KAAhB,CAAsB,GAAtB,CAAP;AACH;;AAED,EAAA,eAAe,GAAA;AACX,WAAO,KAAK,mBAAL,GAA2B,GAA3B,CAA+B,QAAQ,IAAI,MAAM,CAAC,IAAP,CAAY,QAAZ,EAAsB,KAAtB,CAA3C,CAAP;AACH;AAED;;AAEG;;;AACH,EAAA,MAAM,GAAA;AACF,WAAO,MAAM,CAAC,IAAP,CAAY,KAAK,IAAjB,EAAuB,MAA9B;AACH;AAED;;AAEG;;;AACkB,SAAd,cAAc,GAAA;AACjB,WAAO,IAAI,4BAAA,CAAA,4BAAJ,EAAP;AACH;AAED;;AAEG;;;AACmB,SAAf,eAAe,GAAA;AAClB,WAAO,IAAI,4BAAA,CAAA,6BAAJ,EAAP;AACH;AAED;;AAEG;;;AACgB,SAAZ,YAAY,GAAA;AACf,WAAO,IAAI,4BAAA,CAAA,0BAAJ,EAAP;AACH;;AAjF0B;;AAA/B,OAAA,CAAA,kBAAA,GAAA,kBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransactionPayload = void 0;\nconst transactionPayloadBuilders_1 = require(\"./smartcontracts/transactionPayloadBuilders\");\n/**\n * The \"data\" field of a {@link Transaction}, as an immutable object.\n */\nclass TransactionPayload {\n    /**\n     * Creates a TransactionPayload from a utf-8 string or from a buffer.\n     */\n    constructor(data) {\n        this.data = Buffer.from(data || []);\n    }\n    /**\n     * Creates a TransactionPayload from a base-64 encoded string.\n     */\n    static fromEncoded(encoded) {\n        if (!encoded) {\n            return new TransactionPayload(\"\");\n        }\n        let decoded = Buffer.from(encoded, \"base64\").toString();\n        return new TransactionPayload(decoded);\n    }\n    /**\n     * Returns whether the \"data\" is void.\n     */\n    isEmpty() {\n        return this.data.length == 0;\n    }\n    /**\n     * Returns the base-64 representation of the data.\n     */\n    encoded() {\n        return this.data.toString(\"base64\");\n    }\n    /**\n     * Returns the data as a buffer.\n     */\n    valueOf() {\n        return this.data;\n    }\n    toString() {\n        return this.data.toString();\n    }\n    getEncodedArguments() {\n        return this.toString().split(\"@\");\n    }\n    getRawArguments() {\n        return this.getEncodedArguments().map(argument => Buffer.from(argument, \"hex\"));\n    }\n    /**\n     * Returns the length of the data.\n     */\n    length() {\n        return Buffer.from(this.data).length;\n    }\n    /**\n     * Returns a new builder, to be used for contract deploy transactions.\n     */\n    static contractDeploy() {\n        return new transactionPayloadBuilders_1.ContractDeployPayloadBuilder();\n    }\n    /**\n     * Returns a new builder, to be used for contract upgrade transactions.\n     */\n    static contractUpgrade() {\n        return new transactionPayloadBuilders_1.ContractUpgradePayloadBuilder();\n    }\n    /**\n     * Returns a new builder, to be used for contract call transactions.\n     */\n    static contractCall() {\n        return new transactionPayloadBuilders_1.ContractCallPayloadBuilder();\n    }\n}\nexports.TransactionPayload = TransactionPayload;\n//# sourceMappingURL=transactionPayload.js.map"]},"metadata":{},"sourceType":"script"}