{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CompositeValue = exports.CompositeType = void 0;\n\nconst utils_1 = require(\"../../utils\");\n\nconst types_1 = require(\"./types\");\n\nclass CompositeType extends types_1.Type {\n  constructor() {\n    for (var _len = arguments.length, typeParameters = new Array(_len), _key = 0; _key < _len; _key++) {\n      typeParameters[_key] = arguments[_key];\n    }\n\n    super(\"Composite\", typeParameters, types_1.TypeCardinality.variable(typeParameters.length));\n  }\n\n}\n\nexports.CompositeType = CompositeType;\n\nclass CompositeValue extends types_1.TypedValue {\n  constructor(type, items) {\n    super(type);\n    utils_1.guardLength(items, type.getTypeParameters().length); // TODO: assert type of each item (wrt. type.getTypeParameters()).\n\n    this.items = items;\n  }\n\n  static fromItems() {\n    for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      items[_key2] = arguments[_key2];\n    }\n\n    let typeParameters = items.map(value => value.getType());\n    let type = new CompositeType(...typeParameters);\n    return new CompositeValue(type, items);\n  }\n\n  getItems() {\n    return this.items;\n  }\n\n  valueOf() {\n    return this.items.map(item => item.valueOf());\n  }\n\n  equals(other) {\n    if (this.getType().differs(other.getType())) {\n      return false;\n    }\n\n    for (let i = 0; i < this.items.length; i++) {\n      let selfItem = this.items[i];\n      let otherItem = other.items[i];\n\n      if (!selfItem.equals(otherItem)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n}\n\nexports.CompositeValue = CompositeValue;","map":{"version":3,"sources":["../../../src/smartcontracts/typesystem/composite.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,OAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAEA,MAAa,aAAb,SAAmC,OAAA,CAAA,IAAnC,CAAuC;AACnC,EAAA,WAAA,GAAqC;AAAA,sCAAtB,cAAsB;AAAtB,MAAA,cAAsB;AAAA;;AACjC,UAAM,WAAN,EAAmB,cAAnB,EAAmC,OAAA,CAAA,eAAA,CAAgB,QAAhB,CAAyB,cAAc,CAAC,MAAxC,CAAnC;AACH;;AAHkC;;AAAvC,OAAA,CAAA,aAAA,GAAA,aAAA;;AAMA,MAAa,cAAb,SAAoC,OAAA,CAAA,UAApC,CAA8C;AAG1C,EAAA,WAAA,CAAY,IAAZ,EAAiC,KAAjC,EAAoD;AAChD,UAAM,IAAN;AAEA,IAAA,OAAA,CAAA,WAAA,CAAY,KAAZ,EAAmB,IAAI,CAAC,iBAAL,GAAyB,MAA5C,EAHgD,CAKhD;;AAEA,SAAK,KAAL,GAAa,KAAb;AACH;;AAEe,SAAT,SAAS,GAAuB;AAAA,uCAAnB,KAAmB;AAAnB,MAAA,KAAmB;AAAA;;AACnC,QAAI,cAAc,GAAG,KAAK,CAAC,GAAN,CAAU,KAAK,IAAI,KAAK,CAAC,OAAN,EAAnB,CAArB;AACA,QAAI,IAAI,GAAG,IAAI,aAAJ,CAAkB,GAAG,cAArB,CAAX;AACA,WAAO,IAAI,cAAJ,CAAmB,IAAnB,EAAyB,KAAzB,CAAP;AACH;;AAED,EAAA,QAAQ,GAAA;AACJ,WAAO,KAAK,KAAZ;AACH;;AAED,EAAA,OAAO,GAAA;AACH,WAAO,KAAK,KAAL,CAAW,GAAX,CAAe,IAAI,IAAI,IAAI,CAAC,OAAL,EAAvB,CAAP;AACH;;AAED,EAAA,MAAM,CAAC,KAAD,EAAsB;AACxB,QAAI,KAAK,OAAL,GAAe,OAAf,CAAuB,KAAK,CAAC,OAAN,EAAvB,CAAJ,EAA6C;AACzC,aAAO,KAAP;AACH;;AAED,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,KAAL,CAAW,MAA/B,EAAuC,CAAC,EAAxC,EAA4C;AACxC,UAAI,QAAQ,GAAG,KAAK,KAAL,CAAW,CAAX,CAAf;AACA,UAAI,SAAS,GAAG,KAAK,CAAC,KAAN,CAAY,CAAZ,CAAhB;;AAEA,UAAI,CAAC,QAAQ,CAAC,MAAT,CAAgB,SAAhB,CAAL,EAAiC;AAC7B,eAAO,KAAP;AACH;AACJ;;AAED,WAAO,IAAP;AACH;;AA1CyC;;AAA9C,OAAA,CAAA,cAAA,GAAA,cAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CompositeValue = exports.CompositeType = void 0;\nconst utils_1 = require(\"../../utils\");\nconst types_1 = require(\"./types\");\nclass CompositeType extends types_1.Type {\n    constructor(...typeParameters) {\n        super(\"Composite\", typeParameters, types_1.TypeCardinality.variable(typeParameters.length));\n    }\n}\nexports.CompositeType = CompositeType;\nclass CompositeValue extends types_1.TypedValue {\n    constructor(type, items) {\n        super(type);\n        utils_1.guardLength(items, type.getTypeParameters().length);\n        // TODO: assert type of each item (wrt. type.getTypeParameters()).\n        this.items = items;\n    }\n    static fromItems(...items) {\n        let typeParameters = items.map(value => value.getType());\n        let type = new CompositeType(...typeParameters);\n        return new CompositeValue(type, items);\n    }\n    getItems() {\n        return this.items;\n    }\n    valueOf() {\n        return this.items.map(item => item.valueOf());\n    }\n    equals(other) {\n        if (this.getType().differs(other.getType())) {\n            return false;\n        }\n        for (let i = 0; i < this.items.length; i++) {\n            let selfItem = this.items[i];\n            let otherItem = other.items[i];\n            if (!selfItem.equals(otherItem)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nexports.CompositeValue = CompositeValue;\n//# sourceMappingURL=composite.js.map"]},"metadata":{},"sourceType":"script"}