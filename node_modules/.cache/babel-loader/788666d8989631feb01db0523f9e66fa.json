{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { fs } from 'fs';\nimport * as React from 'react';\nimport { useGetAccountInfo, DappUI } from '@elrondnetwork/dapp-core';\nimport { core, ElrondProxy } from '@elrondnetwork/elrond-core-js';\nimport { sendWallet } from 'config';\nimport './myWallet.json';\nimport './passMyWallet';\nimport { ProxyProvider } from '@elrondnetwork/erdjs/out';\n\nconst SendToken = () => {\n  _s();\n\n  const {\n    address,\n    account\n  } = useGetAccountInfo();\n  const [faddress, setAddress] = React.useState(address === null ? '' : address);\n\n  function handleAddressChange(e) {\n    setAddress(e.target.value);\n  }\n\n  let keyFileJson = fs.readFileSync('myWallet.json', {\n    encoding: 'utf8'\n  }).trim();\n  let keyFileObject = JSON.parse(keyFileJson);\n  let accountSend = new core.accountSend();\n  accountSend.loadFromKeyFile(keyFileObject, 'passMyWallet');\n  let reciveAdress = faddress;\n  let sendNonce = sendWallet.nonce;\n  let transaction = new core.transaction({\n    sendNonce\n  }, {\n    sendWallet\n  }, {\n    reciveAdress\n  }, '10000000000000000', 1000000000, 70000, 'ESDTTransfer', 'D', 1);\n  let serializedTransaction = transaction.prepareForSigning();\n  transaction.signature = accountSend.sign(serializedTransaction);\n  let signedTransaction = transaction.prepareForNode();\n  let signedTransactionJson = JSON.stringify(signedTransaction, null, 4);\n  signedTransactionJson(ElrondProxy);\n};\n\n_s(SendToken, \"MPxPpkv/Rfpsah3wSQ8Z+yahHSA=\", false, function () {\n  return [useGetAccountInfo];\n});\n\n_c = SendToken;\nexport default SendToken;\n\nvar _c;\n\n$RefreshReg$(_c, \"SendToken\");","map":{"version":3,"sources":["/home/robert/Final Project/dApp-OnlineVote/src/pages/Dashboard/SendToken.js"],"names":["fs","React","useGetAccountInfo","DappUI","core","ElrondProxy","sendWallet","ProxyProvider","SendToken","address","account","faddress","setAddress","useState","handleAddressChange","e","target","value","keyFileJson","readFileSync","encoding","trim","keyFileObject","JSON","parse","accountSend","loadFromKeyFile","reciveAdress","sendNonce","nonce","transaction","serializedTransaction","prepareForSigning","signature","sign","signedTransaction","prepareForNode","signedTransactionJson","stringify"],"mappings":";;AAAA,SAASA,EAAT,QAAmB,IAAnB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,iBAAT,EAA4BC,MAA5B,QAA0C,0BAA1C;AACA,SAASC,IAAT,EAAeC,WAAf,QAAkC,+BAAlC;AACA,SAASC,UAAT,QAA2B,QAA3B;AACA,OAAO,iBAAP;AACA,OAAO,gBAAP;AACA,SAASC,aAAT,QAA8B,0BAA9B;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACtB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBR,iBAAiB,EAA9C;AACA,QAAM,CAACS,QAAD,EAAWC,UAAX,IAAyBX,KAAK,CAACY,QAAN,CAC7BJ,OAAO,KAAK,IAAZ,GAAmB,EAAnB,GAAwBA,OADK,CAA/B;;AAIA,WAASK,mBAAT,CAA6BC,CAA7B,EAAgC;AAC9BH,IAAAA,UAAU,CAACG,CAAC,CAACC,MAAF,CAASC,KAAV,CAAV;AACD;;AAED,MAAIC,WAAW,GAAGlB,EAAE,CACjBmB,YADe,CACF,eADE,EACe;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GADf,EAEfC,IAFe,EAAlB;AAGA,MAAIC,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWN,WAAX,CAApB;AAEA,MAAIO,WAAW,GAAG,IAAIrB,IAAI,CAACqB,WAAT,EAAlB;AACAA,EAAAA,WAAW,CAACC,eAAZ,CAA4BJ,aAA5B,EAA2C,cAA3C;AACA,MAAIK,YAAY,GAAGhB,QAAnB;AACA,MAAIiB,SAAS,GAAGtB,UAAU,CAACuB,KAA3B;AAEA,MAAIC,WAAW,GAAG,IAAI1B,IAAI,CAAC0B,WAAT,CAChB;AAAEF,IAAAA;AAAF,GADgB,EAEhB;AAAEtB,IAAAA;AAAF,GAFgB,EAGhB;AAAEqB,IAAAA;AAAF,GAHgB,EAIhB,mBAJgB,EAKhB,UALgB,EAMhB,KANgB,EAOhB,cAPgB,EAQhB,GARgB,EAShB,CATgB,CAAlB;AAYA,MAAII,qBAAqB,GAAGD,WAAW,CAACE,iBAAZ,EAA5B;AACAF,EAAAA,WAAW,CAACG,SAAZ,GAAwBR,WAAW,CAACS,IAAZ,CAAiBH,qBAAjB,CAAxB;AACA,MAAII,iBAAiB,GAAGL,WAAW,CAACM,cAAZ,EAAxB;AACA,MAAIC,qBAAqB,GAAGd,IAAI,CAACe,SAAL,CAAeH,iBAAf,EAAkC,IAAlC,EAAwC,CAAxC,CAA5B;AACAE,EAAAA,qBAAqB,CAAChC,WAAD,CAArB;AACD,CArCD;;GAAMG,S;UACyBN,iB;;;KADzBM,S;AAuCN,eAAeA,SAAf","sourcesContent":["import { fs } from 'fs';\nimport * as React from 'react';\nimport { useGetAccountInfo, DappUI } from '@elrondnetwork/dapp-core';\nimport { core, ElrondProxy } from '@elrondnetwork/elrond-core-js';\nimport { sendWallet } from 'config';\nimport './myWallet.json';\nimport './passMyWallet';\nimport { ProxyProvider } from '@elrondnetwork/erdjs/out';\n\nconst SendToken = () => {\n  const { address, account } = useGetAccountInfo();\n  const [faddress, setAddress] = React.useState(\n    address === null ? '' : address\n  );\n\n  function handleAddressChange(e) {\n    setAddress(e.target.value);\n  }\n\n  let keyFileJson = fs\n    .readFileSync('myWallet.json', { encoding: 'utf8' })\n    .trim();\n  let keyFileObject = JSON.parse(keyFileJson);\n\n  let accountSend = new core.accountSend();\n  accountSend.loadFromKeyFile(keyFileObject, 'passMyWallet');\n  let reciveAdress = faddress;\n  let sendNonce = sendWallet.nonce;\n\n  let transaction = new core.transaction(\n    { sendNonce },\n    { sendWallet },\n    { reciveAdress },\n    '10000000000000000',\n    1000000000,\n    70000,\n    'ESDTTransfer',\n    'D',\n    1\n  );\n\n  let serializedTransaction = transaction.prepareForSigning();\n  transaction.signature = accountSend.sign(serializedTransaction);\n  let signedTransaction = transaction.prepareForNode();\n  let signedTransactionJson = JSON.stringify(signedTransaction, null, 4);\n  signedTransactionJson(ElrondProxy);\n};\n\nexport default SendToken;\n"]},"metadata":{},"sourceType":"module"}