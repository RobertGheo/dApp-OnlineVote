{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport fs from 'fs';\nimport path, { dirname } from 'path';\nimport { fileURLToPath } from 'url';\nimport { useGetAccountInfo } from '@elrondnetwork/dapp-core';\nimport { ProxyProvider, UserSigner, Account, Transaction, Address, Balance, TransactionPayload, GasLimit, NetworkConfig, ContractFunction, BytesValue } from '@elrondnetwork/erdjs';\n\nconst SendEsdt = () => {\n  _s();\n\n  const RewardTokenIdentifier = '@564f5445554b323032342d353534646362@01@70696e67';\n  const PemFile = './wallets/dApp-wallet1.pem';\n  const IsDevnet = true;\n  const ProxyUrl = IsDevnet ? 'https://devnet-gateway.elrond.com' : 'https://gateway.elrond.com';\n  const ApiUrl = IsDevnet ? 'https://devnet-api.elrond.com' : 'https://api.elrond.com';\n\n  const __dirname = dirname(fileURLToPath(import.meta.url));\n\n  const {\n    address\n  } = useGetAccountInfo();\n\n  const main = async () => {\n    const provider = new ProxyProvider(ProxyUrl, {\n      timeout: 5000\n    });\n    const signer = await getSigner();\n    const account = new Account(signer.getAddress());\n    console.log('sending first tx in 10s ...');\n    await new Promise(resolve => setTimeout(resolve, 10000));\n    await NetworkConfig.getDefault().sync(provider);\n    await account.sync(provider);\n    let count = 0;\n    count += 1;\n    const tx = await buildRewardTransactionFor(address);\n    tx.setNonce(account.nonce);\n    await signer.sign(tx);\n    account.incrementNonce();\n    await tx.send(provider);\n\n    if (count === 1) {\n      await new Promise(r => setTimeout(r, 10000));\n    }\n\n    await new Promise(r => setTimeout(r, 300)); // ~ 3 txs / s = 18 txs / block, in a 6 second block\n\n    console.log('guess what? we are done!');\n  };\n\n  const getSigner = async () => {\n    const pemWalletPath = path.join(PemFile);\n    const pemWalletContents = await fs.promises.readFile(pemWalletPath, {\n      encoding: 'utf8'\n    });\n    return UserSigner.fromPem(pemWalletContents);\n  };\n\n  const buildRewardTransactionFor = async receiverAddress => new Transaction({\n    data: TransactionPayload.contractCall().setFunction(new ContractFunction('ESDTTransfer')).addArg(BytesValue.fromUTF8(RewardTokenIdentifier)).build(),\n    gasLimit: new GasLimit(500000),\n    receiver: new Address(receiverAddress),\n    value: Balance.Zero()\n  });\n\n  main();\n};\n\n_s(SendEsdt, \"7qrQ0ctvcTJVxIevjF36DsgkyDw=\", false, function () {\n  return [useGetAccountInfo];\n});\n\n_c = SendEsdt;\nexport default SendEsdt;\n\nvar _c;\n\n$RefreshReg$(_c, \"SendEsdt\");","map":{"version":3,"sources":["/home/robert/Final Project/dApp-OnlineVote/src/pages/Dashboard/Actions/sendEsdt.tsx"],"names":["fs","path","dirname","fileURLToPath","useGetAccountInfo","ProxyProvider","UserSigner","Account","Transaction","Address","Balance","TransactionPayload","GasLimit","NetworkConfig","ContractFunction","BytesValue","SendEsdt","RewardTokenIdentifier","PemFile","IsDevnet","ProxyUrl","ApiUrl","__dirname","import","meta","url","address","main","provider","timeout","signer","getSigner","account","getAddress","console","log","Promise","resolve","setTimeout","getDefault","sync","count","tx","buildRewardTransactionFor","setNonce","nonce","sign","incrementNonce","send","r","pemWalletPath","join","pemWalletContents","promises","readFile","encoding","fromPem","receiverAddress","data","contractCall","setFunction","addArg","fromUTF8","build","gasLimit","receiver","value","Zero"],"mappings":";;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,IAAeC,OAAf,QAA8B,MAA9B;AACA,SAASC,aAAT,QAA8B,KAA9B;AACA,SAGEC,iBAHF,QAIO,0BAJP;AAKA,SACEC,aADF,EAEEC,UAFF,EAGEC,OAHF,EAIEC,WAJF,EAKEC,OALF,EAMEC,OANF,EAOEC,kBAPF,EAQEC,QARF,EASEC,aATF,EAUEC,gBAVF,EAYEC,UAZF,QAaO,sBAbP;;AAkBA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACrB,QAAMC,qBAAqB,GACzB,iDADF;AAEA,QAAMC,OAAO,GAAG,4BAAhB;AACA,QAAMC,QAAQ,GAAG,IAAjB;AAEA,QAAMC,QAAQ,GAAGD,QAAQ,GACrB,mCADqB,GAErB,4BAFJ;AAGA,QAAME,MAAM,GAAGF,QAAQ,GACnB,+BADmB,GAEnB,wBAFJ;;AAIA,QAAMG,SAAS,GAAGpB,OAAO,CAACC,aAAa,CAACoB,MAAM,CAACC,IAAP,CAAYC,GAAb,CAAd,CAAzB;;AACA,QAAM;AAAEC,IAAAA;AAAF,MAActB,iBAAiB,EAArC;;AAEA,QAAMuB,IAAI,GAAG,YAAY;AACvB,UAAMC,QAAQ,GAAG,IAAIvB,aAAJ,CAAkBe,QAAlB,EAA4B;AAAES,MAAAA,OAAO,EAAE;AAAX,KAA5B,CAAjB;AACA,UAAMC,MAAM,GAAG,MAAMC,SAAS,EAA9B;AACA,UAAMC,OAAO,GAAG,IAAIzB,OAAJ,CAAYuB,MAAM,CAACG,UAAP,EAAZ,CAAhB;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACA,UAAM,IAAIC,OAAJ,CAAaC,OAAD,IAAaC,UAAU,CAACD,OAAD,EAAU,KAAV,CAAnC,CAAN;AAEA,UAAMxB,aAAa,CAAC0B,UAAd,GAA2BC,IAA3B,CAAgCZ,QAAhC,CAAN;AACA,UAAMI,OAAO,CAACQ,IAAR,CAAaZ,QAAb,CAAN;AAEA,QAAIa,KAAK,GAAG,CAAZ;AAEAA,IAAAA,KAAK,IAAI,CAAT;AAEA,UAAMC,EAAE,GAAG,MAAMC,yBAAyB,CAACjB,OAAD,CAA1C;AACAgB,IAAAA,EAAE,CAACE,QAAH,CAAYZ,OAAO,CAACa,KAApB;AACA,UAAMf,MAAM,CAACgB,IAAP,CAAYJ,EAAZ,CAAN;AACAV,IAAAA,OAAO,CAACe,cAAR;AACA,UAAML,EAAE,CAACM,IAAH,CAAQpB,QAAR,CAAN;;AAEA,QAAIa,KAAK,KAAK,CAAd,EAAiB;AACf,YAAM,IAAIL,OAAJ,CAAaa,CAAD,IAAOX,UAAU,CAACW,CAAD,EAAI,KAAJ,CAA7B,CAAN;AACD;;AAED,UAAM,IAAIb,OAAJ,CAAaa,CAAD,IAAOX,UAAU,CAACW,CAAD,EAAI,GAAJ,CAA7B,CAAN,CAzBuB,CAyBuB;;AAE9Cf,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACD,GA5BD;;AA8BA,QAAMJ,SAAS,GAAG,YAAY;AAC5B,UAAMmB,aAAa,GAAGjD,IAAI,CAACkD,IAAL,CAAUjC,OAAV,CAAtB;AACA,UAAMkC,iBAAiB,GAAG,MAAMpD,EAAE,CAACqD,QAAH,CAAYC,QAAZ,CAAqBJ,aAArB,EAAoC;AAClEK,MAAAA,QAAQ,EAAE;AADwD,KAApC,CAAhC;AAGA,WAAOjD,UAAU,CAACkD,OAAX,CAAmBJ,iBAAnB,CAAP;AACD,GAND;;AAQA,QAAMT,yBAAyB,GAAG,MAAOc,eAAP,IAChC,IAAIjD,WAAJ,CAAgB;AACdkD,IAAAA,IAAI,EAAE/C,kBAAkB,CAACgD,YAAnB,GACHC,WADG,CACS,IAAI9C,gBAAJ,CAAqB,cAArB,CADT,EAEH+C,MAFG,CAEI9C,UAAU,CAAC+C,QAAX,CAAoB7C,qBAApB,CAFJ,EAGH8C,KAHG,EADQ;AAKdC,IAAAA,QAAQ,EAAE,IAAIpD,QAAJ,CAAa,MAAb,CALI;AAMdqD,IAAAA,QAAQ,EAAE,IAAIxD,OAAJ,CAAYgD,eAAZ,CANI;AAOdS,IAAAA,KAAK,EAAExD,OAAO,CAACyD,IAAR;AAPO,GAAhB,CADF;;AAWAxC,EAAAA,IAAI;AACL,CAlED;;GAAMX,Q;UAcgBZ,iB;;;KAdhBY,Q;AAoEN,eAAeA,QAAf","sourcesContent":["import fs from 'fs';\nimport path, { dirname } from 'path';\nimport { fileURLToPath } from 'url';\nimport {\n  refreshAccount,\n  transactionServices,\n  useGetAccountInfo\n} from '@elrondnetwork/dapp-core';\nimport {\n  ProxyProvider,\n  UserSigner,\n  Account,\n  Transaction,\n  Address,\n  Balance,\n  TransactionPayload,\n  GasLimit,\n  NetworkConfig,\n  ContractFunction,\n  BigUIntValue,\n  BytesValue\n} from '@elrondnetwork/erdjs';\nimport BigNumber from 'bignumber.js';\nimport fetch from 'node-fetch';\nimport React from 'react';\n\nconst SendEsdt = () => {\n  const RewardTokenIdentifier =\n    '@564f5445554b323032342d353534646362@01@70696e67';\n  const PemFile = './wallets/dApp-wallet1.pem';\n  const IsDevnet = true;\n\n  const ProxyUrl = IsDevnet\n    ? 'https://devnet-gateway.elrond.com'\n    : 'https://gateway.elrond.com';\n  const ApiUrl = IsDevnet\n    ? 'https://devnet-api.elrond.com'\n    : 'https://api.elrond.com';\n\n  const __dirname = dirname(fileURLToPath(import.meta.url));\n  const { address } = useGetAccountInfo();\n\n  const main = async () => {\n    const provider = new ProxyProvider(ProxyUrl, { timeout: 5000 });\n    const signer = await getSigner();\n    const account = new Account(signer.getAddress());\n\n    console.log('sending first tx in 10s ...');\n    await new Promise((resolve) => setTimeout(resolve, 10000));\n\n    await NetworkConfig.getDefault().sync(provider);\n    await account.sync(provider);\n\n    let count = 0;\n\n    count += 1;\n\n    const tx = await buildRewardTransactionFor(address);\n    tx.setNonce(account.nonce);\n    await signer.sign(tx);\n    account.incrementNonce();\n    await tx.send(provider);\n\n    if (count === 1) {\n      await new Promise((r) => setTimeout(r, 10000));\n    }\n\n    await new Promise((r) => setTimeout(r, 300)); // ~ 3 txs / s = 18 txs / block, in a 6 second block\n\n    console.log('guess what? we are done!');\n  };\n\n  const getSigner = async () => {\n    const pemWalletPath = path.join(PemFile);\n    const pemWalletContents = await fs.promises.readFile(pemWalletPath, {\n      encoding: 'utf8'\n    });\n    return UserSigner.fromPem(pemWalletContents);\n  };\n\n  const buildRewardTransactionFor = async (receiverAddress: string) =>\n    new Transaction({\n      data: TransactionPayload.contractCall()\n        .setFunction(new ContractFunction('ESDTTransfer'))\n        .addArg(BytesValue.fromUTF8(RewardTokenIdentifier))\n        .build(),\n      gasLimit: new GasLimit(500000),\n      receiver: new Address(receiverAddress),\n      value: Balance.Zero()\n    });\n\n  main();\n};\n\nexport default SendEsdt;\n"]},"metadata":{},"sourceType":"module"}