{"ast":null,"code":"var _jsxFileName = \"/home/robert/Final Project/dApp-OnlineVote/src/pages/Home/ballotbox1.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useGetNetworkConfig } from '@elrondnetwork/dapp-core';\nimport { Address, ContractFunction, ProxyProvider, Query } from '@elrondnetwork/erdjs';\nimport { contractClaim } from 'config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst BallotBox1 = () => {\n  _s();\n\n  //const { address } = useGetAccountInfo();\n  const {\n    network\n  } = useGetNetworkConfig();\n  const TokenIdentifier = 'VOTEUK2024-ecc0dc';\n  const ApiUrl = 'https://devnet-api.elrond.com';\n  const [stateTokenVote, setStateTokenVote] = React.useState(Boolean);\n  const [voteCounting, setVoteCounted] = React.useState();\n\n  const searchToken = async () => {\n    const candidateVote = await getCandidateVote(); //const accountBalance = new BigNumber(candidateVote.balance);\n\n    if (!candidateVote) return []; //const accountBalance = new BigNumber(candidateVote.balance);\n  };\n\n  const getCandidateVote = async () => {\n    const res = await fetch(`${ApiUrl}/accounts/${contractClaim}/tokens/${TokenIdentifier}`);\n    if (!res.ok) return null;\n    const body = await res.json();\n    return body || [];\n  };\n\n  React.useEffect(() => {\n    const query = new Query({\n      address: new Address(contractClaim),\n      func: new ContractFunction('getCurrentFunds')\n    });\n    const proxy = new ProxyProvider(network.apiAddress);\n    proxy.queryContract(query).then(_ref => {\n      let {\n        returnData\n      } = _ref;\n      const [encoded] = returnData;\n\n      switch (encoded) {\n        default:\n          {\n            const decoded = Buffer.from(encoded, 'base64').toString('hex');\n            setVoteCounted(parseInt(decoded, 16));\n            break;\n          }\n      }\n    }).catch(err => {\n      console.error('Unable to call VM query', err);\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-black\",\n      children: voteCounting\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(BallotBox1, \"Z90ZPnqfDf+8ZIfBo4PBcKxfF3Q=\", false, function () {\n  return [useGetNetworkConfig];\n});\n\n_c = BallotBox1;\nexport default BallotBox1;\n\nvar _c;\n\n$RefreshReg$(_c, \"BallotBox1\");","map":{"version":3,"sources":["/home/robert/Final Project/dApp-OnlineVote/src/pages/Home/ballotbox1.tsx"],"names":["React","useGetNetworkConfig","Address","ContractFunction","ProxyProvider","Query","contractClaim","BallotBox1","network","TokenIdentifier","ApiUrl","stateTokenVote","setStateTokenVote","useState","Boolean","voteCounting","setVoteCounted","searchToken","candidateVote","getCandidateVote","res","fetch","ok","body","json","useEffect","query","address","func","proxy","apiAddress","queryContract","then","returnData","encoded","decoded","Buffer","from","toString","parseInt","catch","err","console","error"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAEEC,mBAFF,QAGO,0BAHP;AAIA,SACEC,OADF,EAGEC,gBAHF,EAKEC,aALF,EAMEC,KANF,QAOO,sBAPP;AAQA,SAAkDC,aAAlD,QAAuE,QAAvE;;;;AAGA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACvB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAcP,mBAAmB,EAAvC;AACA,QAAMQ,eAAe,GAAG,mBAAxB;AACA,QAAMC,MAAM,GAAG,+BAAf;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCZ,KAAK,CAACa,QAAN,CAAeC,OAAf,CAA5C;AACA,QAAM,CAACC,YAAD,EAAeC,cAAf,IAAiChB,KAAK,CAACa,QAAN,EAAvC;;AAOA,QAAMI,WAAW,GAAG,YAAY;AAC9B,UAAMC,aAAa,GAAG,MAAMC,gBAAgB,EAA5C,CAD8B,CAE9B;;AAEA,QAAI,CAACD,aAAL,EAAoB,OAAO,EAAP,CAJU,CAM9B;AACD,GAPD;;AASA,QAAMC,gBAAgB,GAAG,YAAY;AACnC,UAAMC,GAAG,GAAG,MAAMC,KAAK,CACpB,GAAEX,MAAO,aAAYJ,aAAc,WAAUG,eAAgB,EADzC,CAAvB;AAGA,QAAI,CAACW,GAAG,CAACE,EAAT,EAAa,OAAO,IAAP;AACb,UAAMC,IAAI,GAAI,MAAMH,GAAG,CAACI,IAAJ,EAApB;AACA,WAAOD,IAAI,IAAI,EAAf;AACD,GAPD;;AASAvB,EAAAA,KAAK,CAACyB,SAAN,CAAgB,MAAM;AACpB,UAAMC,KAAK,GAAG,IAAIrB,KAAJ,CAAU;AACtBsB,MAAAA,OAAO,EAAE,IAAIzB,OAAJ,CAAYI,aAAZ,CADa;AAEtBsB,MAAAA,IAAI,EAAE,IAAIzB,gBAAJ,CAAqB,iBAArB;AAFgB,KAAV,CAAd;AAIA,UAAM0B,KAAK,GAAG,IAAIzB,aAAJ,CAAkBI,OAAO,CAACsB,UAA1B,CAAd;AACAD,IAAAA,KAAK,CACFE,aADH,CACiBL,KADjB,EAEGM,IAFH,CAEQ,QAAoB;AAAA,UAAnB;AAAEC,QAAAA;AAAF,OAAmB;AACxB,YAAM,CAACC,OAAD,IAAYD,UAAlB;;AACA,cAAQC,OAAR;AACE;AAAS;AACP,kBAAMC,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYH,OAAZ,EAAqB,QAArB,EAA+BI,QAA/B,CAAwC,KAAxC,CAAhB;AACAtB,YAAAA,cAAc,CAACuB,QAAQ,CAACJ,OAAD,EAAU,EAAV,CAAT,CAAd;AACA;AACD;AALH;AAOD,KAXH,EAYGK,KAZH,CAYUC,GAAD,IAAS;AACdC,MAAAA,OAAO,CAACC,KAAR,CAAc,yBAAd,EAAyCF,GAAzC;AACD,KAdH;AAeD,GArBD;AAuBA,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,gBAA6B1B;AAA7B;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAMD,CA5DD;;GAAMR,U;UAEgBN,mB;;;KAFhBM,U;AA6DN,eAAeA,UAAf","sourcesContent":["import React from 'react';\nimport {\n  useGetAccountInfo,\n  useGetNetworkConfig\n} from '@elrondnetwork/dapp-core';\nimport {\n  Address,\n  AddressValue,\n  ContractFunction,\n  GasLimit,\n  ProxyProvider,\n  Query\n} from '@elrondnetwork/erdjs';\nimport { contractAddressHex, contractAddressHex1, contractClaim } from 'config';\nimport BigNumber from 'bignumber.js';\n\nconst BallotBox1 = () => {\n  //const { address } = useGetAccountInfo();\n  const { network } = useGetNetworkConfig();\n  const TokenIdentifier = 'VOTEUK2024-ecc0dc';\n  const ApiUrl = 'https://devnet-api.elrond.com';\n  const [stateTokenVote, setStateTokenVote] = React.useState(Boolean);\n  const [voteCounting, setVoteCounted] = React.useState<number>();\n\n  type ApiTokenAccount = {\n    address: string;\n    balance: string;\n  };\n\n  const searchToken = async () => {\n    const candidateVote = await getCandidateVote();\n    //const accountBalance = new BigNumber(candidateVote.balance);\n\n    if (!candidateVote) return [];\n\n    //const accountBalance = new BigNumber(candidateVote.balance);\n  };\n\n  const getCandidateVote = async () => {\n    const res = await fetch(\n      `${ApiUrl}/accounts/${contractClaim}/tokens/${TokenIdentifier}`\n    );\n    if (!res.ok) return null;\n    const body = (await res.json()) as ApiTokenAccount[];\n    return body || [];\n  };\n\n  React.useEffect(() => {\n    const query = new Query({\n      address: new Address(contractClaim),\n      func: new ContractFunction('getCurrentFunds')\n    });\n    const proxy = new ProxyProvider(network.apiAddress);\n    proxy\n      .queryContract(query)\n      .then(({ returnData }) => {\n        const [encoded] = returnData;\n        switch (encoded) {\n          default: {\n            const decoded = Buffer.from(encoded, 'base64').toString('hex');\n            setVoteCounted(parseInt(decoded, 16));\n            break;\n          }\n        }\n      })\n      .catch((err) => {\n        console.error('Unable to call VM query', err);\n      });\n  });\n\n  return (\n    <>\n      <div className='text-black'>{voteCounting}</div>\n      {}\n    </>\n  );\n};\nexport default BallotBox1;\n"]},"metadata":{},"sourceType":"module"}