{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ArrayVec = exports.ArrayVecType = void 0;\n\nconst __1 = require(\"../..\");\n\nconst collections_1 = require(\"./collections\");\n\nconst types_1 = require(\"./types\"); // A type for known-length arrays. E.g. \"array20\", \"array32\", \"array64\" etc.\n\n\nclass ArrayVecType extends types_1.Type {\n  constructor(length, typeParameter) {\n    super(\"Array\", [typeParameter]);\n\n    __1.guardTrue(length > 0, \"array length > 0\");\n\n    this.length = length;\n  }\n\n}\n\nexports.ArrayVecType = ArrayVecType;\n\nclass ArrayVec extends types_1.TypedValue {\n  constructor(type, items) {\n    super(type);\n\n    __1.guardLength(items, type.length);\n\n    this.backingCollection = new collections_1.CollectionOfTypedValues(items);\n  }\n\n  getLength() {\n    return this.backingCollection.getLength();\n  }\n\n  getItems() {\n    return this.backingCollection.getItems();\n  }\n\n  valueOf() {\n    return this.backingCollection.valueOf();\n  }\n\n  equals(other) {\n    return this.backingCollection.equals(other.backingCollection);\n  }\n\n}\n\nexports.ArrayVec = ArrayVec;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA,mC,CAEA;;;AACA,MAAaA,YAAb,SAAkCC,YAAlC,CAAsC;AAGlCC,cAAYC,MAAZ,EAA4BC,aAA5B,EAA+C;AAC3C,UAAM,OAAN,EAAe,CAACA,aAAD,CAAf;;AAEAC,kBAAUF,MAAM,GAAG,CAAnB,EAAsB,kBAAtB;;AACA,SAAKA,MAAL,GAAcA,MAAd;AACH;;AARiC;;AAAtCG;;AAWA,MAAaC,QAAb,SAA8BN,kBAA9B,CAAwC;AAGpCC,cAAYM,IAAZ,EAAgCC,KAAhC,EAAmD;AAC/C,UAAMD,IAAN;;AACAH,oBAAYI,KAAZ,EAAmBD,IAAI,CAACL,MAAxB;;AACA,SAAKO,iBAAL,GAAyB,IAAIC,qCAAJ,CAA4BF,KAA5B,CAAzB;AACH;;AAEDG,WAAS;AACL,WAAO,KAAKF,iBAAL,CAAuBE,SAAvB,EAAP;AACH;;AAEDC,UAAQ;AACJ,WAAO,KAAKH,iBAAL,CAAuBG,QAAvB,EAAP;AACH;;AAEDC,SAAO;AACH,WAAO,KAAKJ,iBAAL,CAAuBI,OAAvB,EAAP;AACH;;AAEDC,QAAM,CAACC,KAAD,EAAgB;AAClB,WAAO,KAAKN,iBAAL,CAAuBK,MAAvB,CAA8BC,KAAK,CAACN,iBAApC,CAAP;AACH;;AAvBmC;;AAAxCJ","names":["ArrayVecType","types_1","constructor","length","typeParameter","__1","exports","ArrayVec","type","items","backingCollection","collections_1","getLength","getItems","valueOf","equals","other"],"sourceRoot":"","sources":["../../../src/smartcontracts/typesystem/genericArray.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}