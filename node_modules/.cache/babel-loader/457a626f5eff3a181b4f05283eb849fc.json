{"ast":null,"code":"var _jsxFileName = \"/home/robert/Final Project/dApp-OnlineVote/src/pages/Dashboard/Actions/index.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport { transactionServices, useGetAccountInfo, useGetPendingTransactions, refreshAccount, useGetNetworkConfig } from '@elrondnetwork/dapp-core';\nimport { Address, AddressValue, ContractFunction, ProxyProvider, Query } from '@elrondnetwork/erdjs';\nimport { faArrowUp, faArrowDown } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport moment from 'moment';\nimport { contractAddress } from 'config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Actions = () => {\n  _s();\n\n  const account = useGetAccountInfo();\n  const {\n    hasPendingTransactions\n  } = useGetPendingTransactions();\n  const {\n    network\n  } = useGetNetworkConfig();\n  const {\n    address\n  } = account;\n  const [secondsLeft, setSecondsLeft] = React.useState();\n  const [hasPing, setHasPing] = React.useState();\n  const\n  /*transactionSessionId*/\n  [, setTransactionSessionId] = React.useState(null);\n\n  const mount = () => {\n    if (secondsLeft) {\n      const interval = setInterval(() => {\n        setSecondsLeft(existing => {\n          if (existing) {\n            return existing - 1;\n          } else {\n            clearInterval(interval);\n            return 0;\n          }\n        });\n      }, 1000);\n      return () => {\n        clearInterval(interval);\n      };\n    }\n  }; // eslint-disable-next-line react-hooks/exhaustive-deps\n\n\n  React.useEffect(mount, [hasPing]);\n  React.useEffect(() => {\n    const query = new Query({\n      address: new Address(contractAddress),\n      func: new ContractFunction('getTimeToPong'),\n      args: [new AddressValue(new Address(address))]\n    });\n    const proxy = new ProxyProvider(network.apiAddress);\n    proxy.queryContract(query).then(_ref => {\n      let {\n        returnData\n      } = _ref;\n      const [encoded] = returnData;\n\n      switch (encoded) {\n        case undefined:\n          setHasPing(true);\n          break;\n\n        case '':\n          setSecondsLeft(0);\n          setHasPing(false);\n          break;\n\n        default:\n          {\n            const decoded = Buffer.from(encoded, 'base64').toString('hex');\n            setSecondsLeft(parseInt(decoded, 16));\n            setHasPing(false);\n            break;\n          }\n      }\n    }).catch(err => {\n      console.error('Unable to call VM query', err);\n    }); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [hasPendingTransactions]);\n  const {\n    sendTransactions\n  } = transactionServices;\n\n  const sendPingTransaction = async () => {\n    const pingTransaction = {\n      value: '1000000000000000000',\n      data: 'ping',\n      receiver: contractAddress\n    };\n    await refreshAccount();\n    const {\n      sessionId\n      /*, error*/\n\n    } = await sendTransactions({\n      transactions: pingTransaction,\n      transactionsDisplayInfo: {\n        processingMessage: 'Processing Ping transaction',\n        errorMessage: 'An error has occured during Ping',\n        successMessage: 'Ping transaction successful'\n      },\n      redirectAfterSign: false\n    });\n\n    if (sessionId != null) {\n      setTransactionSessionId(sessionId);\n    }\n  };\n\n  const sendPongTransaction = async () => {\n    const pongTransaction = {\n      value: '0',\n      data: 'pong',\n      receiver: contractAddress\n    };\n    await refreshAccount();\n    const {\n      sessionId\n      /*, error*/\n\n    } = await sendTransactions({\n      transactions: pongTransaction,\n      transactionsDisplayInfo: {\n        processingMessage: 'Processing Pong transaction',\n        errorMessage: 'An error has occured during Pong',\n        successMessage: 'Pong transaction successful'\n      },\n      redirectAfterSign: false\n    });\n\n    if (sessionId != null) {\n      setTransactionSessionId(sessionId);\n    }\n  };\n\n  const pongAllowed = secondsLeft === 0 && !hasPendingTransactions;\n  const notAllowedClass = pongAllowed ? '' : 'not-allowed disabled';\n  const timeRemaining = moment().startOf('day').seconds(secondsLeft || 0).format('mm:ss');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"d-flex mt-4 justify-content-center\",\n    children: hasPing !== undefined && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: hasPing && !hasPendingTransactions ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"action-btn\",\n        onClick: sendPingTransaction,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faArrowUp,\n            className: \"text-primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-white text-decoration-none\",\n          children: \"Ping\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex flex-column\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `action-btn ${notAllowedClass}`,\n            ...(pongAllowed ? {\n              onClick: sendPongTransaction\n            } : {}),\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: `btn ${notAllowedClass}`,\n              children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                icon: faArrowDown,\n                className: \"text-primary\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-white\",\n              children: pongAllowed ? /*#__PURE__*/_jsxDEV(\"a\", {\n                href: \"/\",\n                className: \"text-white text-decoration-none\",\n                children: \"Pong\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: \"Pong\"\n              }, void 0, false)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 17\n          }, this), !pongAllowed && !hasPendingTransactions && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"opacity-6 text-white\",\n            children: [timeRemaining, \" until able to Pong\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 15\n        }, this)\n      }, void 0, false)\n    }, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Actions, \"AWppVBqyx279k0D4/5EwWVhfpN4=\", false, function () {\n  return [useGetAccountInfo, useGetPendingTransactions, useGetNetworkConfig];\n});\n\n_c = Actions;\nexport default Actions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Actions\");","map":{"version":3,"sources":["/home/robert/Final Project/dApp-OnlineVote/src/pages/Dashboard/Actions/index.tsx"],"names":["React","transactionServices","useGetAccountInfo","useGetPendingTransactions","refreshAccount","useGetNetworkConfig","Address","AddressValue","ContractFunction","ProxyProvider","Query","faArrowUp","faArrowDown","FontAwesomeIcon","moment","contractAddress","Actions","account","hasPendingTransactions","network","address","secondsLeft","setSecondsLeft","useState","hasPing","setHasPing","setTransactionSessionId","mount","interval","setInterval","existing","clearInterval","useEffect","query","func","args","proxy","apiAddress","queryContract","then","returnData","encoded","undefined","decoded","Buffer","from","toString","parseInt","catch","err","console","error","sendTransactions","sendPingTransaction","pingTransaction","value","data","receiver","sessionId","transactions","transactionsDisplayInfo","processingMessage","errorMessage","successMessage","redirectAfterSign","sendPongTransaction","pongTransaction","pongAllowed","notAllowedClass","timeRemaining","startOf","seconds","format","className","onClick"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  transactionServices,\n  useGetAccountInfo,\n  useGetPendingTransactions,\n  refreshAccount,\n  useGetNetworkConfig\n} from '@elrondnetwork/dapp-core';\nimport {\n  Address,\n  AddressValue,\n  ContractFunction,\n  ProxyProvider,\n  Query\n} from '@elrondnetwork/erdjs';\nimport { faArrowUp, faArrowDown } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport moment from 'moment';\nimport { contractAddress } from 'config';\n\nconst Actions = () => {\n  const account = useGetAccountInfo();\n  const { hasPendingTransactions } = useGetPendingTransactions();\n  const { network } = useGetNetworkConfig();\n  const { address } = account;\n\n  const [secondsLeft, setSecondsLeft] = React.useState<number>();\n  const [hasPing, setHasPing] = React.useState<boolean>();\n  const /*transactionSessionId*/ [, setTransactionSessionId] = React.useState<\n      string | null\n    >(null);\n\n  const mount = () => {\n    if (secondsLeft) {\n      const interval = setInterval(() => {\n        setSecondsLeft((existing) => {\n          if (existing) {\n            return existing - 1;\n          } else {\n            clearInterval(interval);\n            return 0;\n          }\n        });\n      }, 1000);\n      return () => {\n        clearInterval(interval);\n      };\n    }\n  };\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  React.useEffect(mount, [hasPing]);\n\n  React.useEffect(() => {\n    const query = new Query({\n      address: new Address(contractAddress),\n      func: new ContractFunction('getTimeToPong'),\n      args: [new AddressValue(new Address(address))]\n    });\n    const proxy = new ProxyProvider(network.apiAddress);\n    proxy\n      .queryContract(query)\n      .then(({ returnData }) => {\n        const [encoded] = returnData;\n        switch (encoded) {\n          case undefined:\n            setHasPing(true);\n            break;\n          case '':\n            setSecondsLeft(0);\n            setHasPing(false);\n            break;\n          default: {\n            const decoded = Buffer.from(encoded, 'base64').toString('hex');\n            setSecondsLeft(parseInt(decoded, 16));\n            setHasPing(false);\n            break;\n          }\n        }\n      })\n      .catch((err) => {\n        console.error('Unable to call VM query', err);\n      });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [hasPendingTransactions]);\n\n  const { sendTransactions } = transactionServices;\n\n  const sendPingTransaction = async () => {\n    const pingTransaction = {\n      value: '1000000000000000000',\n      data: 'ping',\n      receiver: contractAddress\n    };\n    await refreshAccount();\n\n    const { sessionId /*, error*/ } = await sendTransactions({\n      transactions: pingTransaction,\n      transactionsDisplayInfo: {\n        processingMessage: 'Processing Ping transaction',\n        errorMessage: 'An error has occured during Ping',\n        successMessage: 'Ping transaction successful'\n      },\n      redirectAfterSign: false\n    });\n    if (sessionId != null) {\n      setTransactionSessionId(sessionId);\n    }\n  };\n\n  const sendPongTransaction = async () => {\n    const pongTransaction = {\n      value: '0',\n      data: 'pong',\n      receiver: contractAddress\n    };\n    await refreshAccount();\n\n    const { sessionId /*, error*/ } = await sendTransactions({\n      transactions: pongTransaction,\n      transactionsDisplayInfo: {\n        processingMessage: 'Processing Pong transaction',\n        errorMessage: 'An error has occured during Pong',\n        successMessage: 'Pong transaction successful'\n      },\n      redirectAfterSign: false\n    });\n    if (sessionId != null) {\n      setTransactionSessionId(sessionId);\n    }\n  };\n\n  const pongAllowed = secondsLeft === 0 && !hasPendingTransactions;\n  const notAllowedClass = pongAllowed ? '' : 'not-allowed disabled';\n\n  const timeRemaining = moment()\n    .startOf('day')\n    .seconds(secondsLeft || 0)\n    .format('mm:ss');\n\n  return (\n    <div className='d-flex mt-4 justify-content-center'>\n      {hasPing !== undefined && (\n        <>\n          {hasPing && !hasPendingTransactions ? (\n            <div className='action-btn' onClick={sendPingTransaction}>\n              <button className='btn'>\n                <FontAwesomeIcon icon={faArrowUp} className='text-primary' />\n              </button>\n              <p className='text-white text-decoration-none'>\n                Ping\n              </p>\n            </div>\n          ) : (\n            <>\n              <div className='d-flex flex-column'>\n                <div\n                  {...{\n                    className: `action-btn ${notAllowedClass}`,\n                    ...(pongAllowed ? { onClick: sendPongTransaction } : {})\n                  }}\n                >\n                  <button className={`btn ${notAllowedClass}`}>\n                    <FontAwesomeIcon\n                      icon={faArrowDown}\n                      className='text-primary'\n                    />\n                  </button>\n                  <span className='text-white'>\n                    {pongAllowed ? (\n                      <a href='/' className='text-white text-decoration-none'>\n                        Pong\n                      </a>\n                    ) : (\n                      <>Pong</>\n                    )}\n                  </span>\n                </div>\n                {!pongAllowed && !hasPendingTransactions && (\n                  <span className='opacity-6 text-white'>\n                    {timeRemaining} until able to Pong\n                  </span>\n                )}\n              </div>\n            </>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Actions;\n"]},"metadata":{},"sourceType":"module"}