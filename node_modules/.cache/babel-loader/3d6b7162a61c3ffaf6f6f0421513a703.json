{"ast":null,"code":"var _jsxFileName = \"/home/robert/Final Project/dApp-OnlineVote/src/pages/Dashboard/Actions/indexRed.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport { transactionServices, useGetAccountInfo, useGetPendingTransactions, refreshAccount, useGetNetworkConfig } from '@elrondnetwork/dapp-core';\nimport { Address, AddressValue, ContractFunction, ProxyProvider, Query } from '@elrondnetwork/erdjs'; //import { faArrowUp, faArrowDown } from '@fortawesome/free-solid-svg-icons';\n//import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n//import moment from 'moment';\n\nimport { contractAddress } from 'config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ActionsRed = () => {\n  _s();\n\n  const account = useGetAccountInfo();\n  const {\n    hasPendingTransactions\n  } = useGetPendingTransactions();\n  const {\n    network\n  } = useGetNetworkConfig();\n  const {\n    address\n  } = account;\n  const [secondsLeft, setSecondsLeft] = React.useState();\n  const [hasPing, setHasPing] = React.useState();\n  const\n  /*transactionSessionId*/\n  [, setTransactionSessionId] = React.useState(null); // eslint-disable-next-line react-hooks/exhaustive-deps\n  //React.useEffect(mount, [hasPing]);\n\n  React.useEffect(() => {\n    const query = new Query({\n      address: new Address(contractAddress),\n      func: new ContractFunction('didUserPing'),\n      args: [new AddressValue(new Address(address))]\n    });\n    const proxy = new ProxyProvider(network.apiAddress);\n    proxy.queryContract(query).then(_ref => {\n      let {\n        returnData\n      } = _ref;\n      const [encoded] = returnData;\n\n      switch (encoded) {\n        case undefined:\n          setHasPing(true);\n          break;\n      }\n    }).catch(err => {\n      console.error('Unable to call VM query', err);\n    }); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [hasPendingTransactions]);\n  const {\n    sendTransactions\n  } = transactionServices;\n\n  const sendPingTransaction = async () => {\n    const pingTransaction = {\n      value: '1000000000000000000',\n      data: 'ping',\n      receiver: contractAddress\n    };\n    await refreshAccount();\n    const {\n      sessionId\n      /*, error*/\n\n    } = await sendTransactions({\n      transactions: pingTransaction,\n      transactionsDisplayInfo: {\n        processingMessage: 'Processing Ping transaction',\n        errorMessage: 'An error has occured during Ping',\n        successMessage: 'Ping transaction successful'\n      },\n      redirectAfterSign: false\n    });\n\n    if (sessionId != null) {\n      setTransactionSessionId(sessionId);\n    }\n  };\n\n  const pongAllowed = secondsLeft === 0 && !hasPendingTransactions;\n  const notAllowedClass = pongAllowed ? '' : 'not-allowed disabled';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"d-flex col justify-content-center\",\n    children: [hasPing && !hasPendingTransactions && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card row w-100 border-danger shadow mx-auto\",\n      onClick: sendPingTransaction,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-danger m-2\",\n        children: \"Vote\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/\",\n        className: \"text-dark\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this), hasPing && !hasPendingTransactions && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex col justify-content-center not-allowed disable\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card row w-100 border-danger shadow mx-auto not-allowed disable\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-danger m-2 not-allowed disabled\",\n          children: \"Voted\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ActionsRed, \"5itpVADhOmEYoHzzg1V70bFWIBI=\", false, function () {\n  return [useGetAccountInfo, useGetPendingTransactions, useGetNetworkConfig];\n});\n\n_c = ActionsRed;\nexport default ActionsRed;\n\nvar _c;\n\n$RefreshReg$(_c, \"ActionsRed\");","map":{"version":3,"sources":["/home/robert/Final Project/dApp-OnlineVote/src/pages/Dashboard/Actions/indexRed.tsx"],"names":["React","transactionServices","useGetAccountInfo","useGetPendingTransactions","refreshAccount","useGetNetworkConfig","Address","AddressValue","ContractFunction","ProxyProvider","Query","contractAddress","ActionsRed","account","hasPendingTransactions","network","address","secondsLeft","setSecondsLeft","useState","hasPing","setHasPing","setTransactionSessionId","useEffect","query","func","args","proxy","apiAddress","queryContract","then","returnData","encoded","undefined","catch","err","console","error","sendTransactions","sendPingTransaction","pingTransaction","value","data","receiver","sessionId","transactions","transactionsDisplayInfo","processingMessage","errorMessage","successMessage","redirectAfterSign","pongAllowed","notAllowedClass"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  transactionServices,\n  useGetAccountInfo,\n  useGetPendingTransactions,\n  refreshAccount,\n  useGetNetworkConfig\n} from '@elrondnetwork/dapp-core';\nimport {\n  Address,\n  AddressValue,\n  ContractFunction,\n  ProxyProvider,\n  Query\n} from '@elrondnetwork/erdjs';\n//import { faArrowUp, faArrowDown } from '@fortawesome/free-solid-svg-icons';\n//import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n//import moment from 'moment';\nimport { contractAddress } from 'config';\n\nconst ActionsRed = () => {\n  const account = useGetAccountInfo();\n  const { hasPendingTransactions } = useGetPendingTransactions();\n  const { network } = useGetNetworkConfig();\n  const { address } = account;\n\n  const [secondsLeft, setSecondsLeft] = React.useState<number>();\n  const [hasPing, setHasPing] = React.useState<boolean>();\n  const /*transactionSessionId*/ [, setTransactionSessionId] = React.useState<\n      string | null\n    >(null);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  //React.useEffect(mount, [hasPing]);\n\n  React.useEffect(() => {\n    const query = new Query({\n      address: new Address(contractAddress),\n      func: new ContractFunction('didUserPing'),\n      args: [new AddressValue(new Address(address))]\n    });\n    const proxy = new ProxyProvider(network.apiAddress);\n    proxy\n      .queryContract(query)\n      .then(({ returnData }) => {\n        const [encoded] = returnData;\n        switch (encoded) {\n          case undefined:\n            setHasPing(true);\n            break;\n        }\n      })\n      .catch((err) => {\n        console.error('Unable to call VM query', err);\n      });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [hasPendingTransactions]);\n\n  const { sendTransactions } = transactionServices;\n\n  const sendPingTransaction = async () => {\n    const pingTransaction = {\n      value: '1000000000000000000',\n      data: 'ping',\n      receiver: contractAddress\n    };\n    await refreshAccount();\n\n    const { sessionId /*, error*/ } = await sendTransactions({\n      transactions: pingTransaction,\n      transactionsDisplayInfo: {\n        processingMessage: 'Processing Ping transaction',\n        errorMessage: 'An error has occured during Ping',\n        successMessage: 'Ping transaction successful'\n      },\n      redirectAfterSign: false\n    });\n    if (sessionId != null) {\n      setTransactionSessionId(sessionId);\n    }\n  };\n  const pongAllowed = secondsLeft === 0 && !hasPendingTransactions;\n  const notAllowedClass = pongAllowed ? '' : 'not-allowed disabled';\n\n  return (\n    <div className='d-flex col justify-content-center'>\n      {hasPing && !hasPendingTransactions && (\n        <div\n          className='card row w-100 border-danger shadow mx-auto'\n          onClick={sendPingTransaction}\n        >\n          <button type='button' className='btn btn-danger m-2'>\n            Vote\n          </button>\n          <a href='/' className='text-dark'></a>\n        </div>\n      )}\n      {hasPing && !hasPendingTransactions && (\n        <div className='d-flex col justify-content-center not-allowed disable'>\n          <div className='card row w-100 border-danger shadow mx-auto not-allowed disable'>\n            <button\n              type='button'\n              className='btn btn-danger m-2 not-allowed disabled'\n            >\n              Voted\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ActionsRed;\n"]},"metadata":{},"sourceType":"module"}