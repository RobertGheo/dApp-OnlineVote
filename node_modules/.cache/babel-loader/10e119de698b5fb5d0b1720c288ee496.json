{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar bech32 = require('bech32');\n\nvar BigNumber = require('bignumber.js');\n\nvar Transaction = /*#__PURE__*/function () {\n  function Transaction(_ref) {\n    var _ref$nonce = _ref.nonce,\n        nonce = _ref$nonce === void 0 ? 0 : _ref$nonce,\n        _ref$from = _ref.from,\n        from = _ref$from === void 0 ? '' : _ref$from,\n        _ref$to = _ref.to,\n        to = _ref$to === void 0 ? '' : _ref$to,\n        _ref$senderUsername = _ref.senderUsername,\n        senderUsername = _ref$senderUsername === void 0 ? '' : _ref$senderUsername,\n        _ref$receiverUsername = _ref.receiverUsername,\n        receiverUsername = _ref$receiverUsername === void 0 ? '' : _ref$receiverUsername,\n        _ref$value = _ref.value,\n        value = _ref$value === void 0 ? '' : _ref$value,\n        _ref$gasPrice = _ref.gasPrice,\n        gasPrice = _ref$gasPrice === void 0 ? '' : _ref$gasPrice,\n        _ref$gasLimit = _ref.gasLimit,\n        gasLimit = _ref$gasLimit === void 0 ? '' : _ref$gasLimit,\n        _ref$data = _ref.data,\n        data = _ref$data === void 0 ? '' : _ref$data,\n        _ref$chainID = _ref.chainID,\n        chainID = _ref$chainID === void 0 ? '' : _ref$chainID,\n        _ref$version = _ref.version,\n        version = _ref$version === void 0 ? 0 : _ref$version;\n    (0, _classCallCheck2[\"default\"])(this, Transaction);\n    Transaction.validateAddresses([from, to]);\n    this.nonce = nonce;\n    this.sender = from;\n    this.receiver = to;\n    this.senderUsername = senderUsername;\n    this.receiverUsername = receiverUsername;\n    this.value = value;\n    this.gasPrice = gasPrice;\n    this.gasLimit = gasLimit;\n    this.data = data;\n    this.chainID = chainID;\n    this.version = version; // Set an empty signature for start\n\n    this.signature = '';\n  }\n  /**\n   * Returns the Buffer representation of the current transaction in order for it to be signed\n   * @returns {Buffer}\n   */\n\n\n  (0, _createClass2[\"default\"])(Transaction, [{\n    key: \"prepareForSigning\",\n    value: function prepareForSigning() {\n      var mainTx = {\n        nonce: this.nonce,\n        value: this.value,\n        receiver: this.receiver,\n        sender: this.sender\n      }; // The following properties which are optional are added only if they are set up\n\n      if (this.senderUsername) {\n        mainTx.senderUsername = this.senderUsername;\n      }\n\n      if (this.receiverUsername) {\n        mainTx.receiverUsername = this.receiverUsername;\n      }\n\n      if (this.gasPrice) {\n        mainTx.gasPrice = this.gasPrice;\n      }\n\n      if (this.gasLimit) {\n        mainTx.gasLimit = this.gasLimit;\n      }\n\n      if (this.data) {\n        mainTx.data = Buffer.from(this.data).toString('base64');\n      }\n\n      if (this.chainID) {\n        mainTx.chainID = this.chainID;\n      }\n\n      if (this.version) {\n        mainTx.version = this.version;\n      }\n\n      var mainTxJSON = JSON.stringify(mainTx);\n      return Buffer.from(mainTxJSON);\n    }\n  }, {\n    key: \"prepareForNode\",\n    value: function prepareForNode() {\n      return {\n        nonce: this.nonce,\n        value: this.value,\n        receiver: this.receiver,\n        sender: this.sender,\n        senderUsername: this.senderUsername,\n        receiverUsername: this.receiverUsername,\n        gasPrice: this.gasPrice,\n        gasLimit: this.gasLimit,\n        data: Buffer.from(this.data).toString('base64'),\n        chainID: this.chainID,\n        version: this.version,\n        signature: this.signature\n      };\n    }\n  }, {\n    key: \"computeFee\",\n    value: function computeFee(_ref2) {\n      var minGasLimit = _ref2.minGasLimit,\n          gasPerDataByte = _ref2.gasPerDataByte,\n          gasPriceModifier = _ref2.gasPriceModifier;\n      var moveBalanceGas = minGasLimit + Buffer.from(this.data).length * gasPerDataByte;\n      var intGasLimit = parseInt(this.gasLimit);\n      var intGasPrice = parseInt(this.gasPrice);\n\n      if (moveBalanceGas > intGasLimit) {\n        throw new Error(\"Not enough gas provided \".concat(intGasLimit));\n      }\n\n      var gasPrice = new BigNumber(intGasPrice);\n      var feeForMove = new BigNumber(moveBalanceGas).multipliedBy(gasPrice);\n\n      if (moveBalanceGas === intGasLimit) {\n        return feeForMove;\n      }\n\n      var diff = new BigNumber(intGasLimit - moveBalanceGas);\n      var modifiedGasPrice = gasPrice.multipliedBy(new BigNumber(gasPriceModifier));\n      var processingFee = diff.multipliedBy(modifiedGasPrice);\n      return feeForMove.plus(processingFee);\n    }\n  }], [{\n    key: \"validateAddresses\",\n    value: function validateAddresses(addresses) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = addresses[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var address = _step.value;\n\n          try {\n            bech32.decode(address);\n          } catch (e) {\n            throw new Error(\"invalid bech32 address\");\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }]);\n  return Transaction;\n}();\n\nmodule.exports = Transaction;","map":{"version":3,"sources":["/home/robert/Final Project/dApp-OnlineVote/node_modules/@elrondnetwork/elrond-core-js/dist/transaction.js"],"names":["_interopRequireDefault","require","_classCallCheck2","_createClass2","bech32","BigNumber","Transaction","_ref","_ref$nonce","nonce","_ref$from","from","_ref$to","to","_ref$senderUsername","senderUsername","_ref$receiverUsername","receiverUsername","_ref$value","value","_ref$gasPrice","gasPrice","_ref$gasLimit","gasLimit","_ref$data","data","_ref$chainID","chainID","_ref$version","version","validateAddresses","sender","receiver","signature","key","prepareForSigning","mainTx","Buffer","toString","mainTxJSON","JSON","stringify","prepareForNode","computeFee","_ref2","minGasLimit","gasPerDataByte","gasPriceModifier","moveBalanceGas","length","intGasLimit","parseInt","intGasPrice","Error","concat","feeForMove","multipliedBy","diff","modifiedGasPrice","processingFee","plus","addresses","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","next","done","address","decode","e","err","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar bech32 = require('bech32');\n\nvar BigNumber = require('bignumber.js');\n\nvar Transaction =\n/*#__PURE__*/\nfunction () {\n  function Transaction(_ref) {\n    var _ref$nonce = _ref.nonce,\n        nonce = _ref$nonce === void 0 ? 0 : _ref$nonce,\n        _ref$from = _ref.from,\n        from = _ref$from === void 0 ? '' : _ref$from,\n        _ref$to = _ref.to,\n        to = _ref$to === void 0 ? '' : _ref$to,\n        _ref$senderUsername = _ref.senderUsername,\n        senderUsername = _ref$senderUsername === void 0 ? '' : _ref$senderUsername,\n        _ref$receiverUsername = _ref.receiverUsername,\n        receiverUsername = _ref$receiverUsername === void 0 ? '' : _ref$receiverUsername,\n        _ref$value = _ref.value,\n        value = _ref$value === void 0 ? '' : _ref$value,\n        _ref$gasPrice = _ref.gasPrice,\n        gasPrice = _ref$gasPrice === void 0 ? '' : _ref$gasPrice,\n        _ref$gasLimit = _ref.gasLimit,\n        gasLimit = _ref$gasLimit === void 0 ? '' : _ref$gasLimit,\n        _ref$data = _ref.data,\n        data = _ref$data === void 0 ? '' : _ref$data,\n        _ref$chainID = _ref.chainID,\n        chainID = _ref$chainID === void 0 ? '' : _ref$chainID,\n        _ref$version = _ref.version,\n        version = _ref$version === void 0 ? 0 : _ref$version;\n    (0, _classCallCheck2[\"default\"])(this, Transaction);\n    Transaction.validateAddresses([from, to]);\n    this.nonce = nonce;\n    this.sender = from;\n    this.receiver = to;\n    this.senderUsername = senderUsername;\n    this.receiverUsername = receiverUsername;\n    this.value = value;\n    this.gasPrice = gasPrice;\n    this.gasLimit = gasLimit;\n    this.data = data;\n    this.chainID = chainID;\n    this.version = version; // Set an empty signature for start\n\n    this.signature = '';\n  }\n  /**\n   * Returns the Buffer representation of the current transaction in order for it to be signed\n   * @returns {Buffer}\n   */\n\n\n  (0, _createClass2[\"default\"])(Transaction, [{\n    key: \"prepareForSigning\",\n    value: function prepareForSigning() {\n      var mainTx = {\n        nonce: this.nonce,\n        value: this.value,\n        receiver: this.receiver,\n        sender: this.sender\n      }; // The following properties which are optional are added only if they are set up\n\n      if (this.senderUsername) {\n        mainTx.senderUsername = this.senderUsername;\n      }\n\n      if (this.receiverUsername) {\n        mainTx.receiverUsername = this.receiverUsername;\n      }\n\n      if (this.gasPrice) {\n        mainTx.gasPrice = this.gasPrice;\n      }\n\n      if (this.gasLimit) {\n        mainTx.gasLimit = this.gasLimit;\n      }\n\n      if (this.data) {\n        mainTx.data = Buffer.from(this.data).toString('base64');\n      }\n\n      if (this.chainID) {\n        mainTx.chainID = this.chainID;\n      }\n\n      if (this.version) {\n        mainTx.version = this.version;\n      }\n\n      var mainTxJSON = JSON.stringify(mainTx);\n      return Buffer.from(mainTxJSON);\n    }\n  }, {\n    key: \"prepareForNode\",\n    value: function prepareForNode() {\n      return {\n        nonce: this.nonce,\n        value: this.value,\n        receiver: this.receiver,\n        sender: this.sender,\n        senderUsername: this.senderUsername,\n        receiverUsername: this.receiverUsername,\n        gasPrice: this.gasPrice,\n        gasLimit: this.gasLimit,\n        data: Buffer.from(this.data).toString('base64'),\n        chainID: this.chainID,\n        version: this.version,\n        signature: this.signature\n      };\n    }\n  }, {\n    key: \"computeFee\",\n    value: function computeFee(_ref2) {\n      var minGasLimit = _ref2.minGasLimit,\n          gasPerDataByte = _ref2.gasPerDataByte,\n          gasPriceModifier = _ref2.gasPriceModifier;\n      var moveBalanceGas = minGasLimit + Buffer.from(this.data).length * gasPerDataByte;\n      var intGasLimit = parseInt(this.gasLimit);\n      var intGasPrice = parseInt(this.gasPrice);\n\n      if (moveBalanceGas > intGasLimit) {\n        throw new Error(\"Not enough gas provided \".concat(intGasLimit));\n      }\n\n      var gasPrice = new BigNumber(intGasPrice);\n      var feeForMove = new BigNumber(moveBalanceGas).multipliedBy(gasPrice);\n\n      if (moveBalanceGas === intGasLimit) {\n        return feeForMove;\n      }\n\n      var diff = new BigNumber(intGasLimit - moveBalanceGas);\n      var modifiedGasPrice = gasPrice.multipliedBy(new BigNumber(gasPriceModifier));\n      var processingFee = diff.multipliedBy(modifiedGasPrice);\n      return feeForMove.plus(processingFee);\n    }\n  }], [{\n    key: \"validateAddresses\",\n    value: function validateAddresses(addresses) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = addresses[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var address = _step.value;\n\n          try {\n            bech32.decode(address);\n          } catch (e) {\n            throw new Error(\"invalid bech32 address\");\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }]);\n  return Transaction;\n}();\n\nmodule.exports = Transaction;"]},"metadata":{},"sourceType":"script"}