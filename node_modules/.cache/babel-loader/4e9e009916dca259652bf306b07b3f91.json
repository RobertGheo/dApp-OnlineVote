{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ArrayVec = exports.ArrayVecType = void 0;\n\nconst __1 = require(\"../..\");\n\nconst collections_1 = require(\"./collections\");\n\nconst types_1 = require(\"./types\"); // A type for known-length arrays. E.g. \"array20\", \"array32\", \"array64\" etc.\n\n\nclass ArrayVecType extends types_1.Type {\n  constructor(length, typeParameter) {\n    super(\"Array\", [typeParameter]);\n\n    __1.guardTrue(length > 0, \"array length > 0\");\n\n    this.length = length;\n  }\n\n}\n\nexports.ArrayVecType = ArrayVecType;\n\nclass ArrayVec extends types_1.TypedValue {\n  constructor(type, items) {\n    super(type);\n\n    __1.guardLength(items, type.length);\n\n    this.backingCollection = new collections_1.CollectionOfTypedValues(items);\n  }\n\n  getLength() {\n    return this.backingCollection.getLength();\n  }\n\n  getItems() {\n    return this.backingCollection.getItems();\n  }\n\n  valueOf() {\n    return this.backingCollection.valueOf();\n  }\n\n  equals(other) {\n    return this.backingCollection.equals(other.backingCollection);\n  }\n\n}\n\nexports.ArrayVec = ArrayVec;","map":{"version":3,"sources":["../../../src/smartcontracts/typesystem/genericArray.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,GAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AACA,MAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA,C,CAEA;;;AACA,MAAa,YAAb,SAAkC,OAAA,CAAA,IAAlC,CAAsC;AAGlC,EAAA,WAAA,CAAY,MAAZ,EAA4B,aAA5B,EAA+C;AAC3C,UAAM,OAAN,EAAe,CAAC,aAAD,CAAf;;AAEA,IAAA,GAAA,CAAA,SAAA,CAAU,MAAM,GAAG,CAAnB,EAAsB,kBAAtB;;AACA,SAAK,MAAL,GAAc,MAAd;AACH;;AARiC;;AAAtC,OAAA,CAAA,YAAA,GAAA,YAAA;;AAWA,MAAa,QAAb,SAA8B,OAAA,CAAA,UAA9B,CAAwC;AAGpC,EAAA,WAAA,CAAY,IAAZ,EAAgC,KAAhC,EAAmD;AAC/C,UAAM,IAAN;;AACA,IAAA,GAAA,CAAA,WAAA,CAAY,KAAZ,EAAmB,IAAI,CAAC,MAAxB;;AACA,SAAK,iBAAL,GAAyB,IAAI,aAAA,CAAA,uBAAJ,CAA4B,KAA5B,CAAzB;AACH;;AAED,EAAA,SAAS,GAAA;AACL,WAAO,KAAK,iBAAL,CAAuB,SAAvB,EAAP;AACH;;AAED,EAAA,QAAQ,GAAA;AACJ,WAAO,KAAK,iBAAL,CAAuB,QAAvB,EAAP;AACH;;AAED,EAAA,OAAO,GAAA;AACH,WAAO,KAAK,iBAAL,CAAuB,OAAvB,EAAP;AACH;;AAED,EAAA,MAAM,CAAC,KAAD,EAAgB;AAClB,WAAO,KAAK,iBAAL,CAAuB,MAAvB,CAA8B,KAAK,CAAC,iBAApC,CAAP;AACH;;AAvBmC;;AAAxC,OAAA,CAAA,QAAA,GAAA,QAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ArrayVec = exports.ArrayVecType = void 0;\nconst __1 = require(\"../..\");\nconst collections_1 = require(\"./collections\");\nconst types_1 = require(\"./types\");\n// A type for known-length arrays. E.g. \"array20\", \"array32\", \"array64\" etc.\nclass ArrayVecType extends types_1.Type {\n    constructor(length, typeParameter) {\n        super(\"Array\", [typeParameter]);\n        __1.guardTrue(length > 0, \"array length > 0\");\n        this.length = length;\n    }\n}\nexports.ArrayVecType = ArrayVecType;\nclass ArrayVec extends types_1.TypedValue {\n    constructor(type, items) {\n        super(type);\n        __1.guardLength(items, type.length);\n        this.backingCollection = new collections_1.CollectionOfTypedValues(items);\n    }\n    getLength() {\n        return this.backingCollection.getLength();\n    }\n    getItems() {\n        return this.backingCollection.getItems();\n    }\n    valueOf() {\n        return this.backingCollection.valueOf();\n    }\n    equals(other) {\n        return this.backingCollection.equals(other.backingCollection);\n    }\n}\nexports.ArrayVec = ArrayVec;\n//# sourceMappingURL=genericArray.js.map"]},"metadata":{},"sourceType":"script"}