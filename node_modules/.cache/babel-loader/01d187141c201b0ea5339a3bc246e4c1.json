{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BytesValue = exports.BytesType = void 0;\n\nconst types_1 = require(\"./types\");\n\nclass BytesType extends types_1.PrimitiveType {\n  constructor() {\n    super(\"bytes\");\n  }\n\n}\n\nexports.BytesType = BytesType;\n\nclass BytesValue extends types_1.PrimitiveValue {\n  constructor(value) {\n    super(new BytesType());\n    this.value = value;\n  }\n  /**\n   * Creates a BytesValue from a utf-8 string.\n   */\n\n\n  static fromUTF8(value) {\n    let buffer = Buffer.from(value, \"utf-8\");\n    return new BytesValue(buffer);\n  }\n  /**\n   * Creates a BytesValue from a hex-encoded string.\n   */\n\n\n  static fromHex(value) {\n    let buffer = Buffer.from(value, \"hex\");\n    return new BytesValue(buffer);\n  }\n\n  getLength() {\n    return this.value.length;\n  }\n  /**\n   * Returns whether two objects have the same value.\n   */\n\n\n  equals(other) {\n    if (this.getLength() != other.getLength()) {\n      return false;\n    }\n\n    return this.value.equals(other.value);\n  }\n\n  valueOf() {\n    return this.value;\n  }\n\n}\n\nexports.BytesValue = BytesValue;","map":{"version":3,"sources":["../../../src/smartcontracts/typesystem/bytes.ts"],"names":[],"mappings":";;;;;;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAEA,MAAa,SAAb,SAA+B,OAAA,CAAA,aAA/B,CAA4C;AACxC,EAAA,WAAA,GAAA;AACI,UAAM,OAAN;AACH;;AAHuC;;AAA5C,OAAA,CAAA,SAAA,GAAA,SAAA;;AAMA,MAAa,UAAb,SAAgC,OAAA,CAAA,cAAhC,CAA8C;AAG1C,EAAA,WAAA,CAAY,KAAZ,EAAyB;AACrB,UAAM,IAAI,SAAJ,EAAN;AACA,SAAK,KAAL,GAAa,KAAb;AACH;AAED;;AAEG;;;AACY,SAAR,QAAQ,CAAC,KAAD,EAAc;AACzB,QAAI,MAAM,GAAG,MAAM,CAAC,IAAP,CAAY,KAAZ,EAAmB,OAAnB,CAAb;AACA,WAAO,IAAI,UAAJ,CAAe,MAAf,CAAP;AACH;AAED;;AAEG;;;AACW,SAAP,OAAO,CAAC,KAAD,EAAc;AACxB,QAAI,MAAM,GAAG,MAAM,CAAC,IAAP,CAAY,KAAZ,EAAmB,KAAnB,CAAb;AACA,WAAO,IAAI,UAAJ,CAAe,MAAf,CAAP;AACH;;AAED,EAAA,SAAS,GAAA;AACL,WAAO,KAAK,KAAL,CAAW,MAAlB;AACH;AAED;;AAEG;;;AACH,EAAA,MAAM,CAAC,KAAD,EAAkB;AACpB,QAAI,KAAK,SAAL,MAAoB,KAAK,CAAC,SAAN,EAAxB,EAA2C;AACvC,aAAO,KAAP;AACH;;AAED,WAAO,KAAK,KAAL,CAAW,MAAX,CAAkB,KAAK,CAAC,KAAxB,CAAP;AACH;;AAED,EAAA,OAAO,GAAA;AACH,WAAO,KAAK,KAAZ;AACH;;AAzCyC;;AAA9C,OAAA,CAAA,UAAA,GAAA,UAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BytesValue = exports.BytesType = void 0;\nconst types_1 = require(\"./types\");\nclass BytesType extends types_1.PrimitiveType {\n    constructor() {\n        super(\"bytes\");\n    }\n}\nexports.BytesType = BytesType;\nclass BytesValue extends types_1.PrimitiveValue {\n    constructor(value) {\n        super(new BytesType());\n        this.value = value;\n    }\n    /**\n     * Creates a BytesValue from a utf-8 string.\n     */\n    static fromUTF8(value) {\n        let buffer = Buffer.from(value, \"utf-8\");\n        return new BytesValue(buffer);\n    }\n    /**\n     * Creates a BytesValue from a hex-encoded string.\n     */\n    static fromHex(value) {\n        let buffer = Buffer.from(value, \"hex\");\n        return new BytesValue(buffer);\n    }\n    getLength() {\n        return this.value.length;\n    }\n    /**\n     * Returns whether two objects have the same value.\n     */\n    equals(other) {\n        if (this.getLength() != other.getLength()) {\n            return false;\n        }\n        return this.value.equals(other.value);\n    }\n    valueOf() {\n        return this.value;\n    }\n}\nexports.BytesValue = BytesValue;\n//# sourceMappingURL=bytes.js.map"]},"metadata":{},"sourceType":"script"}