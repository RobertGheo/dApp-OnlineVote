{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EnumValue = exports.EnumVariantDefinition = exports.EnumType = void 0;\n\nconst utils_1 = require(\"../../utils\");\n\nconst fields_1 = require(\"./fields\");\n\nconst types_1 = require(\"./types\");\n\nconst SimpleEnumMaxDiscriminant = 256;\n\nclass EnumType extends types_1.CustomType {\n  constructor(name, variants) {\n    super(name);\n    this.variants = [];\n    this.variants = variants;\n  }\n\n  static fromJSON(json) {\n    let variants = (json.variants || []).map(variant => EnumVariantDefinition.fromJSON(variant));\n    return new EnumType(json.name, variants);\n  }\n\n  getVariantByDiscriminant(discriminant) {\n    let result = this.variants.find(e => e.discriminant == discriminant);\n    utils_1.guardValueIsSet(`variant by discriminant (${discriminant})`, result);\n    return result;\n  }\n\n  getVariantByName(name) {\n    let result = this.variants.find(e => e.name == name);\n    utils_1.guardValueIsSet(`variant by name (${name})`, result);\n    return result;\n  }\n\n}\n\nexports.EnumType = EnumType;\n\nclass EnumVariantDefinition {\n  constructor(name, discriminant) {\n    let fieldsDefinitions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    this.fieldsDefinitions = [];\n    utils_1.guardTrue(discriminant < SimpleEnumMaxDiscriminant, `discriminant for simple enum should be less than ${SimpleEnumMaxDiscriminant}`);\n    this.name = name;\n    this.discriminant = discriminant;\n    this.fieldsDefinitions = fieldsDefinitions;\n  }\n\n  static fromJSON(json) {\n    let definitions = (json.fields || []).map(definition => fields_1.FieldDefinition.fromJSON(definition));\n    return new EnumVariantDefinition(json.name, json.discriminant, definitions);\n  }\n\n  getFieldsDefinitions() {\n    return this.fieldsDefinitions;\n  }\n\n}\n\nexports.EnumVariantDefinition = EnumVariantDefinition;\n\nclass EnumValue extends types_1.TypedValue {\n  constructor(type, variant, fields) {\n    super(type);\n    this.fields = [];\n    this.name = variant.name;\n    this.discriminant = variant.discriminant;\n    this.fields = fields;\n    let definitions = variant.getFieldsDefinitions();\n    fields_1.Fields.checkTyping(this.fields, definitions);\n  }\n  /**\n   * Utility (named constructor) to create a simple (i.e. without fields) enum value.\n   */\n\n\n  static fromName(type, name) {\n    let variant = type.getVariantByName(name);\n    return new EnumValue(type, variant, []);\n  }\n  /**\n   * Utility (named constructor) to create a simple (i.e. without fields) enum value.\n   */\n\n\n  static fromDiscriminant(type, discriminant) {\n    let variant = type.getVariantByDiscriminant(discriminant);\n    return new EnumValue(type, variant, []);\n  }\n\n  equals(other) {\n    if (!this.getType().equals(other.getType())) {\n      return false;\n    }\n\n    let selfFields = this.getFields();\n    let otherFields = other.getFields();\n    const nameIsSame = this.name == other.name;\n    const discriminantIsSame = this.discriminant == other.discriminant;\n    const fieldsAreSame = fields_1.Fields.equals(selfFields, otherFields);\n    return nameIsSame && discriminantIsSame && fieldsAreSame;\n  }\n\n  getFields() {\n    return this.fields;\n  }\n\n  valueOf() {\n    let result = {\n      name: this.name,\n      fields: []\n    };\n    this.fields.forEach(field => result.fields[field.name] = field.value.valueOf());\n    return result;\n  }\n\n}\n\nexports.EnumValue = EnumValue;","map":{"version":3,"mappings":"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","names":["SimpleEnumMaxDiscriminant","EnumType","types_1","constructor","name","variants","fromJSON","json","map","variant","EnumVariantDefinition","getVariantByDiscriminant","discriminant","result","find","e","utils_1","getVariantByName","exports","fieldsDefinitions","definitions","fields","definition","fields_1","getFieldsDefinitions","EnumValue","type","checkTyping","fromName","fromDiscriminant","equals","other","getType","selfFields","getFields","otherFields","nameIsSame","discriminantIsSame","fieldsAreSame","valueOf","forEach","field","value"],"sourceRoot":"","sources":["../../../src/smartcontracts/typesystem/enum.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}