{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OptionalValue = exports.OptionalType = void 0;\n\nconst utils_1 = require(\"../../utils\");\n\nconst types_1 = require(\"./types\");\n/**\n * An optional is an algebraic type. It holds zero or one values.\n */\n\n\nclass OptionalType extends types_1.Type {\n  constructor(typeParameter) {\n    super(\"Optional\", [typeParameter], types_1.TypeCardinality.variable(1));\n  }\n\n}\n\nexports.OptionalType = OptionalType;\n\nclass OptionalValue extends types_1.TypedValue {\n  constructor(type) {\n    let value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    super(type); // TODO: assert value is of type type.getFirstTypeParameter()\n\n    this.value = value;\n  }\n\n  isSet() {\n    return this.value ? true : false;\n  }\n\n  getTypedValue() {\n    utils_1.guardValueIsSet(\"value\", this.value);\n    return this.value;\n  }\n\n  valueOf() {\n    return this.value ? this.value.valueOf() : null;\n  }\n\n  equals(other) {\n    var _a;\n\n    return ((_a = this.value) === null || _a === void 0 ? void 0 : _a.equals(other.value)) || false;\n  }\n\n}\n\nexports.OptionalValue = OptionalValue;","map":{"version":3,"sources":["../../../src/smartcontracts/typesystem/algebraic.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,OAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;AAEA;;AAEG;;;AACH,MAAa,YAAb,SAAkC,OAAA,CAAA,IAAlC,CAAsC;AAClC,EAAA,WAAA,CAAY,aAAZ,EAA+B;AAC3B,UAAM,UAAN,EAAkB,CAAC,aAAD,CAAlB,EAAmC,OAAA,CAAA,eAAA,CAAgB,QAAhB,CAAyB,CAAzB,CAAnC;AACH;;AAHiC;;AAAtC,OAAA,CAAA,YAAA,GAAA,YAAA;;AAMA,MAAa,aAAb,SAAmC,OAAA,CAAA,UAAnC,CAA6C;AAGzC,EAAA,WAAA,CAAY,IAAZ,EAA+D;AAAA,QAA/B,KAA+B,uEAAJ,IAAI;AAC3D,UAAM,IAAN,EAD2D,CAG3D;;AAEA,SAAK,KAAL,GAAa,KAAb;AACH;;AAED,EAAA,KAAK,GAAA;AACD,WAAO,KAAK,KAAL,GAAa,IAAb,GAAoB,KAA3B;AACH;;AAED,EAAA,aAAa,GAAA;AACT,IAAA,OAAA,CAAA,eAAA,CAAgB,OAAhB,EAAyB,KAAK,KAA9B;AACA,WAAO,KAAK,KAAZ;AACH;;AAED,EAAA,OAAO,GAAA;AACH,WAAO,KAAK,KAAL,GAAa,KAAK,KAAL,CAAW,OAAX,EAAb,GAAoC,IAA3C;AACH;;AAED,EAAA,MAAM,CAAC,KAAD,EAAqB;;;AACvB,WAAO,CAAA,CAAA,EAAA,GAAA,KAAK,KAAL,MAAU,IAAV,IAAU,EAAA,KAAA,KAAA,CAAV,GAAU,KAAA,CAAV,GAAU,EAAA,CAAE,MAAF,CAAS,KAAK,CAAC,KAAf,CAAV,KAAmC,KAA1C;AACH;;AA1BwC;;AAA7C,OAAA,CAAA,aAAA,GAAA,aAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OptionalValue = exports.OptionalType = void 0;\nconst utils_1 = require(\"../../utils\");\nconst types_1 = require(\"./types\");\n/**\n * An optional is an algebraic type. It holds zero or one values.\n */\nclass OptionalType extends types_1.Type {\n    constructor(typeParameter) {\n        super(\"Optional\", [typeParameter], types_1.TypeCardinality.variable(1));\n    }\n}\nexports.OptionalType = OptionalType;\nclass OptionalValue extends types_1.TypedValue {\n    constructor(type, value = null) {\n        super(type);\n        // TODO: assert value is of type type.getFirstTypeParameter()\n        this.value = value;\n    }\n    isSet() {\n        return this.value ? true : false;\n    }\n    getTypedValue() {\n        utils_1.guardValueIsSet(\"value\", this.value);\n        return this.value;\n    }\n    valueOf() {\n        return this.value ? this.value.valueOf() : null;\n    }\n    equals(other) {\n        var _a;\n        return ((_a = this.value) === null || _a === void 0 ? void 0 : _a.equals(other.value)) || false;\n    }\n}\nexports.OptionalValue = OptionalValue;\n//# sourceMappingURL=algebraic.js.map"]},"metadata":{},"sourceType":"script"}