{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TypeMapper = void 0;\n\nconst errors = __importStar(require(\"../../errors\"));\n\nconst address_1 = require(\"./address\");\n\nconst boolean_1 = require(\"./boolean\");\n\nconst bytes_1 = require(\"./bytes\");\n\nconst composite_1 = require(\"./composite\");\n\nconst enum_1 = require(\"./enum\");\n\nconst generic_1 = require(\"./generic\");\n\nconst h256_1 = require(\"./h256\");\n\nconst numerical_1 = require(\"./numerical\");\n\nconst struct_1 = require(\"./struct\");\n\nconst fields_1 = require(\"./fields\");\n\nconst tokenIdentifier_1 = require(\"./tokenIdentifier\");\n\nconst variadic_1 = require(\"./variadic\");\n\nconst algebraic_1 = require(\"./algebraic\");\n\nconst genericArray_1 = require(\"./genericArray\");\n\nconst string_1 = require(\"./string\");\n\nconst tuple_1 = require(\"./tuple\");\n\nconst codeMetadata_1 = require(\"./codeMetadata\");\n\nconst nothing_1 = require(\"./nothing\");\n\nclass TypeMapper {\n  constructor() {\n    let customTypes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    this.openTypesFactories = new Map([[\"Option\", function () {\n      return new generic_1.OptionType(arguments.length <= 0 ? undefined : arguments[0]);\n    }], [\"List\", function () {\n      return new generic_1.ListType(arguments.length <= 0 ? undefined : arguments[0]);\n    }], // For the following open generics, we use a slightly different typing than the one defined by elrond-wasm-rs (temporary workaround).\n    [\"VarArgs\", function () {\n      return new variadic_1.VariadicType(arguments.length <= 0 ? undefined : arguments[0]);\n    }], [\"MultiResultVec\", function () {\n      return new variadic_1.VariadicType(arguments.length <= 0 ? undefined : arguments[0]);\n    }], [\"variadic\", function () {\n      return new variadic_1.VariadicType(arguments.length <= 0 ? undefined : arguments[0]);\n    }], [\"OptionalArg\", function () {\n      return new algebraic_1.OptionalType(arguments.length <= 0 ? undefined : arguments[0]);\n    }], [\"optional\", function () {\n      return new algebraic_1.OptionalType(arguments.length <= 0 ? undefined : arguments[0]);\n    }], [\"OptionalResult\", function () {\n      return new algebraic_1.OptionalType(arguments.length <= 0 ? undefined : arguments[0]);\n    }], [\"multi\", function () {\n      for (var _len = arguments.length, typeParameters = new Array(_len), _key = 0; _key < _len; _key++) {\n        typeParameters[_key] = arguments[_key];\n      }\n\n      return new composite_1.CompositeType(...typeParameters);\n    }], [\"MultiArg\", function () {\n      for (var _len2 = arguments.length, typeParameters = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        typeParameters[_key2] = arguments[_key2];\n      }\n\n      return new composite_1.CompositeType(...typeParameters);\n    }], [\"MultiResult\", function () {\n      for (var _len3 = arguments.length, typeParameters = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        typeParameters[_key3] = arguments[_key3];\n      }\n\n      return new composite_1.CompositeType(...typeParameters);\n    }], [\"multi\", function () {\n      for (var _len4 = arguments.length, typeParameters = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        typeParameters[_key4] = arguments[_key4];\n      }\n\n      return new composite_1.CompositeType(...typeParameters);\n    }], // Perhaps we can adjust the ABI generator to only output \"tuple\", instead of \"tupleN\"?\n    [\"tuple\", function () {\n      for (var _len5 = arguments.length, typeParameters = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        typeParameters[_key5] = arguments[_key5];\n      }\n\n      return new tuple_1.TupleType(...typeParameters);\n    }], [\"tuple2\", function () {\n      for (var _len6 = arguments.length, typeParameters = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        typeParameters[_key6] = arguments[_key6];\n      }\n\n      return new tuple_1.TupleType(...typeParameters);\n    }], [\"tuple3\", function () {\n      for (var _len7 = arguments.length, typeParameters = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        typeParameters[_key7] = arguments[_key7];\n      }\n\n      return new tuple_1.TupleType(...typeParameters);\n    }], [\"tuple4\", function () {\n      for (var _len8 = arguments.length, typeParameters = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n        typeParameters[_key8] = arguments[_key8];\n      }\n\n      return new tuple_1.TupleType(...typeParameters);\n    }], [\"tuple5\", function () {\n      for (var _len9 = arguments.length, typeParameters = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n        typeParameters[_key9] = arguments[_key9];\n      }\n\n      return new tuple_1.TupleType(...typeParameters);\n    }], [\"tuple6\", function () {\n      for (var _len10 = arguments.length, typeParameters = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n        typeParameters[_key10] = arguments[_key10];\n      }\n\n      return new tuple_1.TupleType(...typeParameters);\n    }], [\"tuple7\", function () {\n      for (var _len11 = arguments.length, typeParameters = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {\n        typeParameters[_key11] = arguments[_key11];\n      }\n\n      return new tuple_1.TupleType(...typeParameters);\n    }], [\"tuple8\", function () {\n      for (var _len12 = arguments.length, typeParameters = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {\n        typeParameters[_key12] = arguments[_key12];\n      }\n\n      return new tuple_1.TupleType(...typeParameters);\n    }], // Known-length arrays.\n    // TODO: Handle these in typeExpressionParser, perhaps?\n    [\"array20\", function () {\n      return new genericArray_1.ArrayVecType(20, arguments.length <= 0 ? undefined : arguments[0]);\n    }], [\"array32\", function () {\n      return new genericArray_1.ArrayVecType(32, arguments.length <= 0 ? undefined : arguments[0]);\n    }], [\"array64\", function () {\n      return new genericArray_1.ArrayVecType(64, arguments.length <= 0 ? undefined : arguments[0]);\n    }]]); // For closed types, we hold actual type instances instead of type constructors / factories (no type parameters needed).\n\n    this.closedTypesMap = new Map([[\"u8\", new numerical_1.U8Type()], [\"u16\", new numerical_1.U16Type()], [\"u32\", new numerical_1.U32Type()], [\"u64\", new numerical_1.U64Type()], [\"U64\", new numerical_1.U64Type()], [\"BigUint\", new numerical_1.BigUIntType()], [\"i8\", new numerical_1.I8Type()], [\"i16\", new numerical_1.I16Type()], [\"i32\", new numerical_1.I32Type()], [\"i64\", new numerical_1.I64Type()], [\"Bigint\", new numerical_1.BigIntType()], [\"BigInt\", new numerical_1.BigIntType()], [\"bool\", new boolean_1.BooleanType()], [\"bytes\", new bytes_1.BytesType()], [\"Address\", new address_1.AddressType()], [\"H256\", new h256_1.H256Type()], [\"utf-8 string\", new string_1.StringType()], [\"TokenIdentifier\", new tokenIdentifier_1.TokenIdentifierType()], [\"CodeMetadata\", new codeMetadata_1.CodeMetadataType()], [\"nothing\", new nothing_1.NothingType()], [\"AsyncCall\", new nothing_1.NothingType()]]);\n\n    for (const customType of customTypes) {\n      this.closedTypesMap.set(customType.getName(), customType);\n    }\n  }\n\n  mapRecursiveType(type) {\n    let isGeneric = type.isGenericType();\n\n    if (type instanceof enum_1.EnumType) {\n      // This will call mapType() recursively, for all the enum variant fields.\n      return this.mapEnumType(type);\n    }\n\n    if (type instanceof struct_1.StructType) {\n      // This will call mapType() recursively, for all the struct's fields.\n      return this.mapStructType(type);\n    }\n\n    if (isGeneric) {\n      // This will call mapType() recursively, for all the type parameters.\n      return this.mapGenericType(type);\n    }\n\n    return null;\n  }\n\n  mapType(type) {\n    var _a;\n\n    let mappedType = this.mapRecursiveType(type);\n\n    if (mappedType !== null) {\n      return mappedType;\n    }\n\n    let knownClosedType = this.closedTypesMap.get(type.getName());\n\n    if (!knownClosedType) {\n      throw new errors.ErrTypingSystem(`Cannot map the type \"${type.getName()}\" to a known type`);\n    }\n\n    return (_a = this.mapRecursiveType(knownClosedType)) !== null && _a !== void 0 ? _a : knownClosedType;\n  }\n\n  feedCustomType(type) {\n    this.closedTypesMap.delete(type.getName());\n    this.closedTypesMap.set(type.getName(), type);\n  }\n\n  mapStructType(type) {\n    let mappedFields = this.mappedFields(type.getFieldsDefinitions());\n    let mappedStruct = new struct_1.StructType(type.getName(), mappedFields);\n    return mappedStruct;\n  }\n\n  mapEnumType(type) {\n    let variants = type.variants.map(variant => new enum_1.EnumVariantDefinition(variant.name, variant.discriminant, this.mappedFields(variant.getFieldsDefinitions())));\n    let mappedEnum = new enum_1.EnumType(type.getName(), variants);\n    return mappedEnum;\n  }\n\n  mappedFields(definitions) {\n    return definitions.map(definition => new fields_1.FieldDefinition(definition.name, definition.description, this.mapType(definition.type)));\n  }\n\n  mapGenericType(type) {\n    let typeParameters = type.getTypeParameters();\n    let mappedTypeParameters = typeParameters.map(item => this.mapType(item));\n    let factory = this.openTypesFactories.get(type.getName());\n\n    if (!factory) {\n      throw new errors.ErrTypingSystem(`Cannot map the generic type \"${type.getName()}\" to a known type`);\n    }\n\n    return factory(...mappedTypeParameters);\n  }\n\n}\n\nexports.TypeMapper = TypeMapper;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAYA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAIA,MAAaA,UAAb,CAAuB;AAInBC,gBAA0C;AAAA,QAA9BC,WAA8B,uEAAF,EAAE;AACtC,SAAKC,kBAAL,GAA0B,IAAIC,GAAJ,CAA6B,CACnD,CAAC,QAAD,EAAW;AAAA,aAA+B,IAAIC,oBAAJ,kDAA/B;AAAA,KAAX,CADmD,EAEnD,CAAC,MAAD,EAAS;AAAA,aAA+B,IAAIA,kBAAJ,kDAA/B;AAAA,KAAT,CAFmD,EAGnD;AACA,KAAC,SAAD,EAAY;AAAA,aAA+B,IAAIC,uBAAJ,kDAA/B;AAAA,KAAZ,CAJmD,EAKnD,CAAC,gBAAD,EAAmB;AAAA,aAA+B,IAAIA,uBAAJ,kDAA/B;AAAA,KAAnB,CALmD,EAMnD,CAAC,UAAD,EAAa;AAAA,aAA+B,IAAIA,uBAAJ,kDAA/B;AAAA,KAAb,CANmD,EAOnD,CAAC,aAAD,EAAgB;AAAA,aAA+B,IAAIC,wBAAJ,kDAA/B;AAAA,KAAhB,CAPmD,EAQnD,CAAC,UAAD,EAAa;AAAA,aAA+B,IAAIA,wBAAJ,kDAA/B;AAAA,KAAb,CARmD,EASnD,CAAC,gBAAD,EAAmB;AAAA,aAA+B,IAAIA,wBAAJ,kDAA/B;AAAA,KAAnB,CATmD,EAUnD,CAAC,OAAD,EAAU;AAAA,wCAAIC,cAAJ;AAAIA,sBAAJ;AAAA;;AAAA,aAA+B,IAAIC,yBAAJ,CAAkB,GAAGD,cAArB,CAA/B;AAAA,KAAV,CAVmD,EAWnD,CAAC,UAAD,EAAa;AAAA,yCAAIA,cAAJ;AAAIA,sBAAJ;AAAA;;AAAA,aAA+B,IAAIC,yBAAJ,CAAkB,GAAGD,cAArB,CAA/B;AAAA,KAAb,CAXmD,EAYnD,CAAC,aAAD,EAAgB;AAAA,yCAAIA,cAAJ;AAAIA,sBAAJ;AAAA;;AAAA,aAA+B,IAAIC,yBAAJ,CAAkB,GAAGD,cAArB,CAA/B;AAAA,KAAhB,CAZmD,EAanD,CAAC,OAAD,EAAU;AAAA,yCAAIA,cAAJ;AAAIA,sBAAJ;AAAA;;AAAA,aAA+B,IAAIC,yBAAJ,CAAkB,GAAGD,cAArB,CAA/B;AAAA,KAAV,CAbmD,EAcnD;AACA,KAAC,OAAD,EAAU;AAAA,yCAAIA,cAAJ;AAAIA,sBAAJ;AAAA;;AAAA,aAA+B,IAAIE,iBAAJ,CAAc,GAAGF,cAAjB,CAA/B;AAAA,KAAV,CAfmD,EAgBnD,CAAC,QAAD,EAAW;AAAA,yCAAIA,cAAJ;AAAIA,sBAAJ;AAAA;;AAAA,aAA+B,IAAIE,iBAAJ,CAAc,GAAGF,cAAjB,CAA/B;AAAA,KAAX,CAhBmD,EAiBnD,CAAC,QAAD,EAAW;AAAA,yCAAIA,cAAJ;AAAIA,sBAAJ;AAAA;;AAAA,aAA+B,IAAIE,iBAAJ,CAAc,GAAGF,cAAjB,CAA/B;AAAA,KAAX,CAjBmD,EAkBnD,CAAC,QAAD,EAAW;AAAA,yCAAIA,cAAJ;AAAIA,sBAAJ;AAAA;;AAAA,aAA+B,IAAIE,iBAAJ,CAAc,GAAGF,cAAjB,CAA/B;AAAA,KAAX,CAlBmD,EAmBnD,CAAC,QAAD,EAAW;AAAA,yCAAIA,cAAJ;AAAIA,sBAAJ;AAAA;;AAAA,aAA+B,IAAIE,iBAAJ,CAAc,GAAGF,cAAjB,CAA/B;AAAA,KAAX,CAnBmD,EAoBnD,CAAC,QAAD,EAAW;AAAA,0CAAIA,cAAJ;AAAIA,sBAAJ;AAAA;;AAAA,aAA+B,IAAIE,iBAAJ,CAAc,GAAGF,cAAjB,CAA/B;AAAA,KAAX,CApBmD,EAqBnD,CAAC,QAAD,EAAW;AAAA,0CAAIA,cAAJ;AAAIA,sBAAJ;AAAA;;AAAA,aAA+B,IAAIE,iBAAJ,CAAc,GAAGF,cAAjB,CAA/B;AAAA,KAAX,CArBmD,EAsBnD,CAAC,QAAD,EAAW;AAAA,0CAAIA,cAAJ;AAAIA,sBAAJ;AAAA;;AAAA,aAA+B,IAAIE,iBAAJ,CAAc,GAAGF,cAAjB,CAA/B;AAAA,KAAX,CAtBmD,EAuBnD;AACA;AACA,KAAC,SAAD,EAAY;AAAA,aAA+B,IAAIG,2BAAJ,CAAiB,EAAjB,mDAA/B;AAAA,KAAZ,CAzBmD,EA0BnD,CAAC,SAAD,EAAY;AAAA,aAA+B,IAAIA,2BAAJ,CAAiB,EAAjB,mDAA/B;AAAA,KAAZ,CA1BmD,EA2BnD,CAAC,SAAD,EAAY;AAAA,aAA+B,IAAIA,2BAAJ,CAAiB,EAAjB,mDAA/B;AAAA,KAAZ,CA3BmD,CAA7B,CAA1B,CADsC,CA+BtC;;AACA,SAAKC,cAAL,GAAsB,IAAIR,GAAJ,CAAsB,CACxC,CAAC,IAAD,EAAO,IAAIS,kBAAJ,EAAP,CADwC,EAExC,CAAC,KAAD,EAAQ,IAAIA,mBAAJ,EAAR,CAFwC,EAGxC,CAAC,KAAD,EAAQ,IAAIA,mBAAJ,EAAR,CAHwC,EAIxC,CAAC,KAAD,EAAQ,IAAIA,mBAAJ,EAAR,CAJwC,EAKxC,CAAC,KAAD,EAAQ,IAAIA,mBAAJ,EAAR,CALwC,EAMxC,CAAC,SAAD,EAAY,IAAIA,uBAAJ,EAAZ,CANwC,EAOxC,CAAC,IAAD,EAAO,IAAIA,kBAAJ,EAAP,CAPwC,EAQxC,CAAC,KAAD,EAAQ,IAAIA,mBAAJ,EAAR,CARwC,EASxC,CAAC,KAAD,EAAQ,IAAIA,mBAAJ,EAAR,CATwC,EAUxC,CAAC,KAAD,EAAQ,IAAIA,mBAAJ,EAAR,CAVwC,EAWxC,CAAC,QAAD,EAAW,IAAIA,sBAAJ,EAAX,CAXwC,EAYxC,CAAC,QAAD,EAAW,IAAIA,sBAAJ,EAAX,CAZwC,EAaxC,CAAC,MAAD,EAAS,IAAIC,qBAAJ,EAAT,CAbwC,EAcxC,CAAC,OAAD,EAAU,IAAIC,iBAAJ,EAAV,CAdwC,EAexC,CAAC,SAAD,EAAY,IAAIC,qBAAJ,EAAZ,CAfwC,EAgBxC,CAAC,MAAD,EAAS,IAAIC,eAAJ,EAAT,CAhBwC,EAiBxC,CAAC,cAAD,EAAiB,IAAIC,mBAAJ,EAAjB,CAjBwC,EAkBxC,CAAC,iBAAD,EAAoB,IAAIC,qCAAJ,EAApB,CAlBwC,EAmBxC,CAAC,cAAD,EAAiB,IAAIC,+BAAJ,EAAjB,CAnBwC,EAoBxC,CAAC,SAAD,EAAY,IAAIC,qBAAJ,EAAZ,CApBwC,EAqBxC,CAAC,WAAD,EAAc,IAAIA,qBAAJ,EAAd,CArBwC,CAAtB,CAAtB;;AAwBA,SAAK,MAAMC,UAAX,IAAyBpB,WAAzB,EAAsC;AAClC,WAAKU,cAAL,CAAoBW,GAApB,CAAwBD,UAAU,CAACE,OAAX,EAAxB,EAA8CF,UAA9C;AACH;AACJ;;AAEDG,kBAAgB,CAACC,IAAD,EAAW;AACvB,QAAIC,SAAS,GAAGD,IAAI,CAACE,aAAL,EAAhB;;AAEA,QAAIF,IAAI,YAAYG,eAApB,EAA8B;AAC1B;AACA,aAAO,KAAKC,WAAL,CAAiBJ,IAAjB,CAAP;AACH;;AAED,QAAIA,IAAI,YAAYK,mBAApB,EAAgC;AAC5B;AACA,aAAO,KAAKC,aAAL,CAAmBN,IAAnB,CAAP;AACH;;AAED,QAAIC,SAAJ,EAAe;AACX;AACA,aAAO,KAAKM,cAAL,CAAoBP,IAApB,CAAP;AACH;;AACD,WAAO,IAAP;AACH;;AAEDQ,SAAO,CAACR,IAAD,EAAW;;;AACd,QAAIS,UAAU,GAAG,KAAKV,gBAAL,CAAsBC,IAAtB,CAAjB;;AACA,QAAIS,UAAU,KAAK,IAAnB,EAAyB;AACrB,aAAOA,UAAP;AACH;;AAED,QAAIC,eAAe,GAAG,KAAKxB,cAAL,CAAoByB,GAApB,CAAwBX,IAAI,CAACF,OAAL,EAAxB,CAAtB;;AACA,QAAI,CAACY,eAAL,EAAsB;AAClB,YAAM,IAAIE,MAAM,CAACC,eAAX,CAA2B,wBAAwBb,IAAI,CAACF,OAAL,EAAc,mBAAjE,CAAN;AACH;;AAED,iBAAO,KAAKC,gBAAL,CAAsBW,eAAtB,CAAP,MAA6C,IAA7C,IAA6CI,aAA7C,GAA6CA,EAA7C,GAAiDJ,eAAjD;AACH;;AAEDK,gBAAc,CAACf,IAAD,EAAW;AACrB,SAAKd,cAAL,CAAoB8B,MAApB,CAA2BhB,IAAI,CAACF,OAAL,EAA3B;AACA,SAAKZ,cAAL,CAAoBW,GAApB,CAAwBG,IAAI,CAACF,OAAL,EAAxB,EAAwCE,IAAxC;AACH;;AAEOM,eAAa,CAACN,IAAD,EAAiB;AAClC,QAAIiB,YAAY,GAAG,KAAKA,YAAL,CAAkBjB,IAAI,CAACkB,oBAAL,EAAlB,CAAnB;AACA,QAAIC,YAAY,GAAG,IAAId,mBAAJ,CAAeL,IAAI,CAACF,OAAL,EAAf,EAA+BmB,YAA/B,CAAnB;AACA,WAAOE,YAAP;AACH;;AAEOf,aAAW,CAACJ,IAAD,EAAe;AAC9B,QAAIoB,QAAQ,GAAGpB,IAAI,CAACoB,QAAL,CAAcC,GAAd,CACVC,OAAD,IACI,IAAInB,4BAAJ,CACImB,OAAO,CAACC,IADZ,EAEID,OAAO,CAACE,YAFZ,EAGI,KAAKP,YAAL,CAAkBK,OAAO,CAACJ,oBAAR,EAAlB,CAHJ,CAFO,CAAf;AAQA,QAAIO,UAAU,GAAG,IAAItB,eAAJ,CAAaH,IAAI,CAACF,OAAL,EAAb,EAA6BsB,QAA7B,CAAjB;AACA,WAAOK,UAAP;AACH;;AAEOR,cAAY,CAACS,WAAD,EAA+B;AAC/C,WAAOA,WAAW,CAACL,GAAZ,CACFM,UAAD,IAAgB,IAAIC,wBAAJ,CAAoBD,UAAU,CAACJ,IAA/B,EAAqCI,UAAU,CAACE,WAAhD,EAA6D,KAAKrB,OAAL,CAAamB,UAAU,CAAC3B,IAAxB,CAA7D,CADb,CAAP;AAGH;;AAEOO,gBAAc,CAACP,IAAD,EAAW;AAC7B,QAAIlB,cAAc,GAAGkB,IAAI,CAAC8B,iBAAL,EAArB;AACA,QAAIC,oBAAoB,GAAGjD,cAAc,CAACuC,GAAf,CAAoBW,IAAD,IAAU,KAAKxB,OAAL,CAAawB,IAAb,CAA7B,CAA3B;AAEA,QAAIC,OAAO,GAAG,KAAKxD,kBAAL,CAAwBkC,GAAxB,CAA4BX,IAAI,CAACF,OAAL,EAA5B,CAAd;;AACA,QAAI,CAACmC,OAAL,EAAc;AACV,YAAM,IAAIrB,MAAM,CAACC,eAAX,CAA2B,gCAAgCb,IAAI,CAACF,OAAL,EAAc,mBAAzE,CAAN;AACH;;AAED,WAAOmC,OAAO,CAAC,GAAGF,oBAAJ,CAAd;AACH;;AA3IkB;;AAAvBG","names":["TypeMapper","constructor","customTypes","openTypesFactories","Map","generic_1","variadic_1","algebraic_1","typeParameters","composite_1","tuple_1","genericArray_1","closedTypesMap","numerical_1","boolean_1","bytes_1","address_1","h256_1","string_1","tokenIdentifier_1","codeMetadata_1","nothing_1","customType","set","getName","mapRecursiveType","type","isGeneric","isGenericType","enum_1","mapEnumType","struct_1","mapStructType","mapGenericType","mapType","mappedType","knownClosedType","get","errors","ErrTypingSystem","_a","feedCustomType","delete","mappedFields","getFieldsDefinitions","mappedStruct","variants","map","variant","name","discriminant","mappedEnum","definitions","definition","fields_1","description","getTypeParameters","mappedTypeParameters","item","factory","exports"],"sourceRoot":"","sources":["../../../src/smartcontracts/typesystem/typeMapper.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}