{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TypeExpressionParser = void 0;\n\nconst errors = __importStar(require(\"../../errors\"));\n\nconst types_1 = require(\"./types\");\n\nvar jsonHandler = require(\"json-duplicate-key-handle\");\n\nclass TypeExpressionParser {\n  parse(expression) {\n    let root = this.doParse(expression);\n    let rootKeys = Object.keys(root);\n\n    if (rootKeys.length != 1) {\n      throw new errors.ErrTypingSystem(`bad type expression: ${expression}`);\n    }\n\n    let name = rootKeys[0];\n    let type = this.nodeToType(name, root[name]);\n    return type;\n  }\n\n  doParse(expression) {\n    let jsoned = this.getJsonedString(expression);\n\n    try {\n      return jsonHandler.parse(jsoned);\n    } catch (error) {\n      throw new errors.ErrTypingSystem(`cannot parse type expression: ${expression}. internal json: ${jsoned}.`);\n    }\n  }\n  /**\n   * Converts a raw type expression to a JSON, parsing-friendly format.\n   * This is a workaround, so that the parser implementation is simpler (thus we actually rely on the JSON parser).\n   *\n   * @param expression a string such as:\n   *\n   * ```\n   *  - Option<List<Address>>\n   *  - VarArgs<MultiArg2<bytes, Address>>\n   *  - MultiResultVec<MultiResult2<Address, u64>\n   * ```\n   */\n\n\n  getJsonedString(expression) {\n    let jsoned = \"\";\n\n    for (var i = 0; i < expression.length; i++) {\n      let char = expression.charAt(i);\n      let previousChar = expression.charAt(i - 1);\n      let nextChar = expression.charAt(i + 1);\n\n      if (char == \"<\") {\n        jsoned += \": {\";\n      } else if (char == \">\") {\n        if (previousChar != \">\") {\n          jsoned += \": {} }\";\n        } else {\n          jsoned += \"}\";\n        }\n      } else if (char == \",\") {\n        if (nextChar == \">\") {// Skip superfluous comma\n        } else {\n          jsoned += \": {},\";\n        }\n      } else {\n        jsoned += char;\n      }\n    } // Split by the delimiters, but exclude the spaces that are found in the middle of \"utf-8 string\"\n\n\n    let symbolsRegex = /(:|\\{|\\}|,|\\s)/;\n    let tokens = jsoned // Hack for Safari compatibility, where we can't use negative lookbehind\n    .replace(/utf\\-8\\sstring/ig, \"utf-8-string\").split(symbolsRegex).filter(token => token);\n    jsoned = tokens.map(token => symbolsRegex.test(token) ? token : `\"${token}\"`).map(token => token.replace(/utf\\-8\\-string/ig, \"utf-8 string\")).join(\"\");\n\n    if (tokens.length == 1) {\n      // Workaround for simple, non-generic types.\n      return `{${jsoned}: {}}`;\n    }\n\n    return `{${jsoned}}`;\n  }\n\n  nodeToType(name, node) {\n    if (name.charAt(name.length - 1) === \"1\") {\n      name = name.slice(0, -1);\n    }\n\n    let typeParameters = Object.keys(node).map(key => this.nodeToType(key, node[key]));\n    return new types_1.Type(name, typeParameters);\n  }\n\n}\n\nexports.TypeExpressionParser = TypeExpressionParser;","map":{"version":3,"sources":["../../../src/smartcontracts/typesystem/typeExpressionParser.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TypeExpressionParser = void 0;\nconst errors = __importStar(require(\"../../errors\"));\nconst types_1 = require(\"./types\");\nvar jsonHandler = require(\"json-duplicate-key-handle\");\nclass TypeExpressionParser {\n    parse(expression) {\n        let root = this.doParse(expression);\n        let rootKeys = Object.keys(root);\n        if (rootKeys.length != 1) {\n            throw new errors.ErrTypingSystem(`bad type expression: ${expression}`);\n        }\n        let name = rootKeys[0];\n        let type = this.nodeToType(name, root[name]);\n        return type;\n    }\n    doParse(expression) {\n        let jsoned = this.getJsonedString(expression);\n        try {\n            return jsonHandler.parse(jsoned);\n        }\n        catch (error) {\n            throw new errors.ErrTypingSystem(`cannot parse type expression: ${expression}. internal json: ${jsoned}.`);\n        }\n    }\n    /**\n     * Converts a raw type expression to a JSON, parsing-friendly format.\n     * This is a workaround, so that the parser implementation is simpler (thus we actually rely on the JSON parser).\n     *\n     * @param expression a string such as:\n     *\n     * ```\n     *  - Option<List<Address>>\n     *  - VarArgs<MultiArg2<bytes, Address>>\n     *  - MultiResultVec<MultiResult2<Address, u64>\n     * ```\n     */\n    getJsonedString(expression) {\n        let jsoned = \"\";\n        for (var i = 0; i < expression.length; i++) {\n            let char = expression.charAt(i);\n            let previousChar = expression.charAt(i - 1);\n            let nextChar = expression.charAt(i + 1);\n            if (char == \"<\") {\n                jsoned += \": {\";\n            }\n            else if (char == \">\") {\n                if (previousChar != \">\") {\n                    jsoned += \": {} }\";\n                }\n                else {\n                    jsoned += \"}\";\n                }\n            }\n            else if (char == \",\") {\n                if (nextChar == \">\") {\n                    // Skip superfluous comma\n                }\n                else {\n                    jsoned += \": {},\";\n                }\n            }\n            else {\n                jsoned += char;\n            }\n        }\n        // Split by the delimiters, but exclude the spaces that are found in the middle of \"utf-8 string\"\n        let symbolsRegex = /(:|\\{|\\}|,|\\s)/;\n        let tokens = jsoned\n            // Hack for Safari compatibility, where we can't use negative lookbehind\n            .replace(/utf\\-8\\sstring/ig, \"utf-8-string\")\n            .split(symbolsRegex)\n            .filter((token) => token);\n        jsoned = tokens.map((token) => (symbolsRegex.test(token) ? token : `\"${token}\"`))\n            .map((token) => token.replace(/utf\\-8\\-string/ig, \"utf-8 string\"))\n            .join(\"\");\n        if (tokens.length == 1) {\n            // Workaround for simple, non-generic types.\n            return `{${jsoned}: {}}`;\n        }\n        return `{${jsoned}}`;\n    }\n    nodeToType(name, node) {\n        if (name.charAt(name.length - 1) === \"1\") {\n            name = name.slice(0, -1);\n        }\n        let typeParameters = Object.keys(node).map((key) => this.nodeToType(key, node[key]));\n        return new types_1.Type(name, typeParameters);\n    }\n}\nexports.TypeExpressionParser = TypeExpressionParser;\n//# sourceMappingURL=typeExpressionParser.js.map"]},"metadata":{},"sourceType":"script"}