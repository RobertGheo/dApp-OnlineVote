{"ast":null,"code":"'use strict';\n\nvar tweetnacl = require('tweetnacl');\n\nvar ed25519Keypair = function ed25519Keypair(_) {\n  var kp = tweetnacl.sign.keyPair();\n  return [kp.publicKey, kp.secretKey];\n};\n\nvar generatePublicKey = function generatePublicKey(privateKey) {\n  var kp = tweetnacl.sign.keyPair.fromSecretKey(privateKey);\n  return kp.publicKey;\n};\n\nvar generatePairFromSeed = function generatePairFromSeed(privateKey) {\n  privateKey = Uint8Array.from(privateKey);\n  var kp = tweetnacl.sign.keyPair.fromSeed(privateKey);\n  return [kp.publicKey, kp.secretKey];\n};\n\nvar sign = function sign(message, privateKey) {\n  var sig = tweetnacl.sign(message, privateKey); // By default, the signature contains the message at the end, we don't need this\n\n  return sig.slice(0, sig.length - message.length);\n};\n\nmodule.exports = {\n  keyPair: ed25519Keypair,\n  sign: sign,\n  generatePublicKey: generatePublicKey,\n  generatePairFromSeed: generatePairFromSeed\n};","map":{"version":3,"sources":["/home/robert/Final Project/dApp-OnlineVote/node_modules/@elrondnetwork/elrond-core-js/dist/crypto/browser/ed25519Keypair.js"],"names":["tweetnacl","require","ed25519Keypair","_","kp","sign","keyPair","publicKey","secretKey","generatePublicKey","privateKey","fromSecretKey","generatePairFromSeed","Uint8Array","from","fromSeed","message","sig","slice","length","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAvB;;AAEA,IAAIC,cAAc,GAAG,SAASA,cAAT,CAAwBC,CAAxB,EAA2B;AAC9C,MAAIC,EAAE,GAAGJ,SAAS,CAACK,IAAV,CAAeC,OAAf,EAAT;AACA,SAAO,CAACF,EAAE,CAACG,SAAJ,EAAeH,EAAE,CAACI,SAAlB,CAAP;AACD,CAHD;;AAKA,IAAIC,iBAAiB,GAAG,SAASA,iBAAT,CAA2BC,UAA3B,EAAuC;AAC7D,MAAIN,EAAE,GAAGJ,SAAS,CAACK,IAAV,CAAeC,OAAf,CAAuBK,aAAvB,CAAqCD,UAArC,CAAT;AACA,SAAON,EAAE,CAACG,SAAV;AACD,CAHD;;AAKA,IAAIK,oBAAoB,GAAG,SAASA,oBAAT,CAA8BF,UAA9B,EAA0C;AACnEA,EAAAA,UAAU,GAAGG,UAAU,CAACC,IAAX,CAAgBJ,UAAhB,CAAb;AACA,MAAIN,EAAE,GAAGJ,SAAS,CAACK,IAAV,CAAeC,OAAf,CAAuBS,QAAvB,CAAgCL,UAAhC,CAAT;AACA,SAAO,CAACN,EAAE,CAACG,SAAJ,EAAeH,EAAE,CAACI,SAAlB,CAAP;AACD,CAJD;;AAMA,IAAIH,IAAI,GAAG,SAASA,IAAT,CAAcW,OAAd,EAAuBN,UAAvB,EAAmC;AAC5C,MAAIO,GAAG,GAAGjB,SAAS,CAACK,IAAV,CAAeW,OAAf,EAAwBN,UAAxB,CAAV,CAD4C,CACG;;AAE/C,SAAOO,GAAG,CAACC,KAAJ,CAAU,CAAV,EAAaD,GAAG,CAACE,MAAJ,GAAaH,OAAO,CAACG,MAAlC,CAAP;AACD,CAJD;;AAMAC,MAAM,CAACC,OAAP,GAAiB;AACff,EAAAA,OAAO,EAAEJ,cADM;AAEfG,EAAAA,IAAI,EAAEA,IAFS;AAGfI,EAAAA,iBAAiB,EAAEA,iBAHJ;AAIfG,EAAAA,oBAAoB,EAAEA;AAJP,CAAjB","sourcesContent":["'use strict';\n\nvar tweetnacl = require('tweetnacl');\n\nvar ed25519Keypair = function ed25519Keypair(_) {\n  var kp = tweetnacl.sign.keyPair();\n  return [kp.publicKey, kp.secretKey];\n};\n\nvar generatePublicKey = function generatePublicKey(privateKey) {\n  var kp = tweetnacl.sign.keyPair.fromSecretKey(privateKey);\n  return kp.publicKey;\n};\n\nvar generatePairFromSeed = function generatePairFromSeed(privateKey) {\n  privateKey = Uint8Array.from(privateKey);\n  var kp = tweetnacl.sign.keyPair.fromSeed(privateKey);\n  return [kp.publicKey, kp.secretKey];\n};\n\nvar sign = function sign(message, privateKey) {\n  var sig = tweetnacl.sign(message, privateKey); // By default, the signature contains the message at the end, we don't need this\n\n  return sig.slice(0, sig.length - message.length);\n};\n\nmodule.exports = {\n  keyPair: ed25519Keypair,\n  sign: sign,\n  generatePublicKey: generatePublicKey,\n  generatePairFromSeed: generatePairFromSeed\n};"]},"metadata":{},"sourceType":"script"}