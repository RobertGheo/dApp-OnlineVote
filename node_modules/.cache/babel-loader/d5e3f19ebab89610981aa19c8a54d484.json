{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExtensionProvider = void 0;\n\nconst signableMessage_1 = require(\"../signableMessage\");\n\nconst signature_1 = require(\"../signature\");\n\nconst transaction_1 = require(\"../transaction\");\n\nclass ExtensionProvider {\n  constructor() {\n    this.initialized = false;\n\n    if (ExtensionProvider._instance) {\n      throw new Error(\"Error: Instantiation failed: Use ExtensionProvider.getInstance() instead of new.\");\n    }\n\n    this.account = {\n      address: \"\"\n    };\n    ExtensionProvider._instance = this;\n  }\n\n  static getInstance() {\n    return ExtensionProvider._instance;\n  }\n\n  setAddress(address) {\n    this.account.address = address;\n    return ExtensionProvider._instance;\n  }\n\n  init() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (window && window.elrondWallet) {\n        this.initialized = true;\n      }\n\n      return this.initialized;\n    });\n  }\n\n  login() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.initialized) {\n        throw new Error(\"Extension provider is not initialised, call init() first\");\n      }\n\n      const {\n        token\n      } = options;\n      const data = token ? token : \"\";\n      yield this.startBgrMsgChannel(\"connect\", data);\n      return this.account.address;\n    });\n  }\n\n  logout() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.initialized) {\n        throw new Error(\"Extension provider is not initialised, call init() first\");\n      }\n\n      try {\n        yield this.startBgrMsgChannel(\"logout\", this.account.address);\n      } catch (error) {\n        console.warn(\"Extension origin url is already cleared!\", error);\n      }\n\n      return true;\n    });\n  }\n\n  getAddress() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.initialized) {\n        throw new Error(\"Extension provider is not initialised, call init() first\");\n      }\n\n      return this.account ? this.account.address : \"\";\n    });\n  }\n\n  isInitialized() {\n    return this.initialized;\n  }\n\n  isConnected() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return !!this.account;\n    });\n  }\n\n  sendTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const txResponse = yield this.startBgrMsgChannel(\"sendTransactions\", {\n        from: this.account.address,\n        transactions: [transaction.toPlainObject()]\n      });\n      return transaction_1.Transaction.fromPlainObject(txResponse[0]);\n    });\n  }\n\n  signTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const txResponse = yield this.startBgrMsgChannel(\"signTransactions\", {\n        from: this.account.address,\n        transactions: [transaction.toPlainObject()]\n      });\n      return transaction_1.Transaction.fromPlainObject(txResponse[0]);\n    });\n  }\n\n  signTransactions(transactions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      transactions = transactions.map(transaction => transaction.toPlainObject());\n      let txResponse = yield this.startBgrMsgChannel(\"signTransactions\", {\n        from: this.account.address,\n        transactions: transactions\n      });\n\n      try {\n        txResponse = txResponse.map(transaction => transaction_1.Transaction.fromPlainObject(transaction));\n      } catch (error) {\n        throw new Error(\"Transaction canceled.\");\n      }\n\n      return txResponse;\n    });\n  }\n\n  signMessage(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const data = {\n        account: this.account.address,\n        message: message.message.toString()\n      };\n      const signResponse = yield this.startBgrMsgChannel(\"signMessage\", data);\n      const signedMsg = new signableMessage_1.SignableMessage({\n        address: message.address,\n        message: Buffer.from(signResponse.message),\n        signature: new signature_1.Signature(signResponse.signature)\n      });\n      return signedMsg;\n    });\n  }\n\n  cancelAction() {\n    return this.startBgrMsgChannel(\"cancelAction\", {});\n  }\n\n  startBgrMsgChannel(operation, connectData) {\n    return new Promise(resolve => {\n      window.postMessage({\n        target: \"erdw-inpage\",\n        type: operation,\n        data: connectData\n      }, window.origin);\n\n      const eventHandler = event => {\n        if (event.isTrusted && event.data.target === \"erdw-contentScript\") {\n          if (event.data.type === \"connectResponse\") {\n            this.account = event.data.data;\n            window.removeEventListener(\"message\", eventHandler);\n            resolve(event.data.data);\n          } else {\n            window.removeEventListener(\"message\", eventHandler);\n            resolve(event.data.data);\n          }\n        }\n      };\n\n      window.addEventListener(\"message\", eventHandler, false);\n    });\n  }\n\n}\n\nexports.ExtensionProvider = ExtensionProvider;\nExtensionProvider._instance = new ExtensionProvider();","map":{"version":3,"mappings":"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","names":["ExtensionProvider","constructor","_instance","Error","account","address","getInstance","setAddress","init","window","elrondWallet","initialized","login","options","token","data","startBgrMsgChannel","logout","error","console","warn","getAddress","isInitialized","isConnected","sendTransaction","transaction","txResponse","from","transactions","toPlainObject","transaction_1","fromPlainObject","signTransaction","signTransactions","map","signMessage","message","toString","signResponse","signedMsg","signableMessage_1","Buffer","signature","signature_1","cancelAction","operation","connectData","Promise","resolve","postMessage","target","type","origin","eventHandler","event","isTrusted","removeEventListener","addEventListener","exports"],"sourceRoot":"","sources":["../../src/dapp/extensionProvider.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}