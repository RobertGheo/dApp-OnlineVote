{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.removeHexLeadingZeros = exports.sanitizeHex = exports.addHexPrefix = exports.removeHexPrefix = exports.padRight = exports.padLeft = exports.sanitizeBytes = exports.swapHex = exports.swapBytes = exports.splitBytes = exports.calcByteLength = exports.trimRight = exports.trimLeft = exports.concatArrays = exports.concatBuffers = exports.getEncoding = exports.getType = exports.isArrayBuffer = exports.isTypedArray = exports.isBuffer = exports.isHexString = exports.isBinaryString = exports.binaryToNumber = exports.binaryToUtf8 = exports.binaryToHex = exports.binaryToArray = exports.binaryToBuffer = exports.numberToBinary = exports.numberToUtf8 = exports.numberToHex = exports.numberToArray = exports.numberToBuffer = exports.utf8ToBinary = exports.utf8ToNumber = exports.utf8ToHex = exports.utf8ToArray = exports.utf8ToBuffer = exports.hexToBinary = exports.hexToNumber = exports.hexToUtf8 = exports.hexToArray = exports.hexToBuffer = exports.arrayToBinary = exports.arrayToNumber = exports.arrayToUtf8 = exports.arrayToHex = exports.arrayToBuffer = exports.bufferToBinary = exports.bufferToNumber = exports.bufferToUtf8 = exports.bufferToHex = exports.bufferToArray = void 0;\n\nconst is_typedarray_1 = __importDefault(require(\"is-typedarray\"));\n\nconst typedarray_to_buffer_1 = __importDefault(require(\"typedarray-to-buffer\"));\n\nconst ENC_HEX = \"hex\";\nconst ENC_UTF8 = \"utf8\";\nconst ENC_BIN = \"binary\";\nconst TYPE_BUFFER = \"buffer\";\nconst TYPE_ARRAY = \"array\";\nconst TYPE_TYPED_ARRAY = \"typed-array\";\nconst TYPE_ARRAY_BUFFER = \"array-buffer\";\nconst STRING_ZERO = \"0\";\n\nfunction bufferToArray(buf) {\n  return new Uint8Array(buf);\n}\n\nexports.bufferToArray = bufferToArray;\n\nfunction bufferToHex(buf) {\n  let prefixed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const hex = buf.toString(ENC_HEX);\n  return prefixed ? addHexPrefix(hex) : hex;\n}\n\nexports.bufferToHex = bufferToHex;\n\nfunction bufferToUtf8(buf) {\n  return buf.toString(ENC_UTF8);\n}\n\nexports.bufferToUtf8 = bufferToUtf8;\n\nfunction bufferToNumber(buf) {\n  return buf.readUIntBE(0, buf.length);\n}\n\nexports.bufferToNumber = bufferToNumber;\n\nfunction bufferToBinary(buf) {\n  return arrayToBinary(bufferToArray(buf));\n}\n\nexports.bufferToBinary = bufferToBinary;\n\nfunction arrayToBuffer(arr) {\n  return typedarray_to_buffer_1.default(arr);\n}\n\nexports.arrayToBuffer = arrayToBuffer;\n\nfunction arrayToHex(arr) {\n  let prefixed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return bufferToHex(arrayToBuffer(arr), prefixed);\n}\n\nexports.arrayToHex = arrayToHex;\n\nfunction arrayToUtf8(arr) {\n  return bufferToUtf8(arrayToBuffer(arr));\n}\n\nexports.arrayToUtf8 = arrayToUtf8;\n\nfunction arrayToNumber(arr) {\n  return bufferToNumber(arrayToBuffer(arr));\n}\n\nexports.arrayToNumber = arrayToNumber;\n\nfunction arrayToBinary(arr) {\n  return Array.from(arr).map(numberToBinary).join(\"\");\n}\n\nexports.arrayToBinary = arrayToBinary;\n\nfunction hexToBuffer(hex) {\n  return Buffer.from(removeHexPrefix(hex), ENC_HEX);\n}\n\nexports.hexToBuffer = hexToBuffer;\n\nfunction hexToArray(hex) {\n  return bufferToArray(hexToBuffer(hex));\n}\n\nexports.hexToArray = hexToArray;\n\nfunction hexToUtf8(hex) {\n  return bufferToUtf8(hexToBuffer(hex));\n}\n\nexports.hexToUtf8 = hexToUtf8;\n\nfunction hexToNumber(hex) {\n  return arrayToNumber(hexToArray(hex));\n}\n\nexports.hexToNumber = hexToNumber;\n\nfunction hexToBinary(hex) {\n  return arrayToBinary(hexToArray(hex));\n}\n\nexports.hexToBinary = hexToBinary;\n\nfunction utf8ToBuffer(utf8) {\n  return Buffer.from(utf8, ENC_UTF8);\n}\n\nexports.utf8ToBuffer = utf8ToBuffer;\n\nfunction utf8ToArray(utf8) {\n  return bufferToArray(utf8ToBuffer(utf8));\n}\n\nexports.utf8ToArray = utf8ToArray;\n\nfunction utf8ToHex(utf8) {\n  let prefixed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return bufferToHex(utf8ToBuffer(utf8), prefixed);\n}\n\nexports.utf8ToHex = utf8ToHex;\n\nfunction utf8ToNumber(utf8) {\n  const num = parseInt(utf8, 10);\n  assert(isDefined(num), \"Number can only safely store up to 53 bits\");\n  return num;\n}\n\nexports.utf8ToNumber = utf8ToNumber;\n\nfunction utf8ToBinary(utf8) {\n  return arrayToBinary(utf8ToArray(utf8));\n}\n\nexports.utf8ToBinary = utf8ToBinary;\n\nfunction numberToBuffer(num) {\n  return binaryToBuffer(numberToBinary(num));\n}\n\nexports.numberToBuffer = numberToBuffer;\n\nfunction numberToArray(num) {\n  return binaryToArray(numberToBinary(num));\n}\n\nexports.numberToArray = numberToArray;\n\nfunction numberToHex(num, prefixed) {\n  return binaryToHex(numberToBinary(num), prefixed);\n}\n\nexports.numberToHex = numberToHex;\n\nfunction numberToUtf8(num) {\n  return `${num}`;\n}\n\nexports.numberToUtf8 = numberToUtf8;\n\nfunction numberToBinary(num) {\n  const bin = (num >>> 0).toString(2);\n  return sanitizeBytes(bin);\n}\n\nexports.numberToBinary = numberToBinary;\n\nfunction binaryToBuffer(bin) {\n  return arrayToBuffer(binaryToArray(bin));\n}\n\nexports.binaryToBuffer = binaryToBuffer;\n\nfunction binaryToArray(bin) {\n  return new Uint8Array(splitBytes(bin).map(x => parseInt(x, 2)));\n}\n\nexports.binaryToArray = binaryToArray;\n\nfunction binaryToHex(bin, prefixed) {\n  return arrayToHex(binaryToArray(bin), prefixed);\n}\n\nexports.binaryToHex = binaryToHex;\n\nfunction binaryToUtf8(bin) {\n  return arrayToUtf8(binaryToArray(bin));\n}\n\nexports.binaryToUtf8 = binaryToUtf8;\n\nfunction binaryToNumber(bin) {\n  return arrayToNumber(binaryToArray(bin));\n}\n\nexports.binaryToNumber = binaryToNumber;\n\nfunction isBinaryString(str) {\n  if (typeof str !== \"string\" || !new RegExp(/^[01]+$/).test(str)) {\n    return false;\n  }\n\n  if (str.length % 8 !== 0) {\n    return false;\n  }\n\n  return true;\n}\n\nexports.isBinaryString = isBinaryString;\n\nfunction isHexString(str, length) {\n  if (typeof str !== \"string\" || !str.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n\n  if (length && str.length !== 2 + 2 * length) {\n    return false;\n  }\n\n  return true;\n}\n\nexports.isHexString = isHexString;\n\nfunction isBuffer(val) {\n  return Buffer.isBuffer(val);\n}\n\nexports.isBuffer = isBuffer;\n\nfunction isTypedArray(val) {\n  return is_typedarray_1.default.strict(val) && !isBuffer(val);\n}\n\nexports.isTypedArray = isTypedArray;\n\nfunction isArrayBuffer(val) {\n  return !isTypedArray(val) && !isBuffer(val) && typeof val.byteLength !== \"undefined\";\n}\n\nexports.isArrayBuffer = isArrayBuffer;\n\nfunction getType(val) {\n  if (isBuffer(val)) {\n    return TYPE_BUFFER;\n  } else if (isTypedArray(val)) {\n    return TYPE_TYPED_ARRAY;\n  } else if (isArrayBuffer(val)) {\n    return TYPE_ARRAY_BUFFER;\n  } else if (Array.isArray(val)) {\n    return TYPE_ARRAY;\n  } else {\n    return typeof val;\n  }\n}\n\nexports.getType = getType;\n\nfunction getEncoding(str) {\n  if (isBinaryString(str)) {\n    return ENC_BIN;\n  }\n\n  if (isHexString(str)) {\n    return ENC_HEX;\n  }\n\n  return ENC_UTF8;\n}\n\nexports.getEncoding = getEncoding;\n\nfunction concatBuffers() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  const result = Buffer.concat(args);\n  return result;\n}\n\nexports.concatBuffers = concatBuffers;\n\nfunction concatArrays() {\n  let result = [];\n\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  args.forEach(arg => result = result.concat(Array.from(arg)));\n  return new Uint8Array([...result]);\n}\n\nexports.concatArrays = concatArrays;\n\nfunction trimLeft(data, length) {\n  const diff = data.length - length;\n\n  if (diff > 0) {\n    data = data.slice(diff);\n  }\n\n  return data;\n}\n\nexports.trimLeft = trimLeft;\n\nfunction trimRight(data, length) {\n  return data.slice(0, length);\n}\n\nexports.trimRight = trimRight;\n\nfunction calcByteLength(length) {\n  let byteSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n  const remainder = length % byteSize;\n  return remainder ? (length - remainder) / byteSize * byteSize + byteSize : length;\n}\n\nexports.calcByteLength = calcByteLength;\n\nfunction splitBytes(str) {\n  let byteSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n  const bytes = sanitizeBytes(str).match(new RegExp(`.{${byteSize}}`, \"gi\"));\n  return Array.from(bytes || []);\n}\n\nexports.splitBytes = splitBytes;\n\nfunction swapBytes(str) {\n  return splitBytes(str).map(reverseString).join(\"\");\n}\n\nexports.swapBytes = swapBytes;\n\nfunction swapHex(str) {\n  return binaryToHex(swapBytes(hexToBinary(str)));\n}\n\nexports.swapHex = swapHex;\n\nfunction sanitizeBytes(str) {\n  let byteSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n  let padding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : STRING_ZERO;\n  return padLeft(str, calcByteLength(str.length, byteSize), padding);\n}\n\nexports.sanitizeBytes = sanitizeBytes;\n\nfunction padLeft(str, length) {\n  let padding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : STRING_ZERO;\n  return padString(str, length, true, padding);\n}\n\nexports.padLeft = padLeft;\n\nfunction padRight(str, length) {\n  let padding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : STRING_ZERO;\n  return padString(str, length, false, padding);\n}\n\nexports.padRight = padRight;\n\nfunction removeHexPrefix(hex) {\n  return hex.replace(/^0x/, \"\");\n}\n\nexports.removeHexPrefix = removeHexPrefix;\n\nfunction addHexPrefix(hex) {\n  return hex.startsWith(\"0x\") ? hex : `0x${hex}`;\n}\n\nexports.addHexPrefix = addHexPrefix;\n\nfunction sanitizeHex(hex) {\n  hex = removeHexPrefix(hex);\n  hex = sanitizeBytes(hex, 2);\n\n  if (hex) {\n    hex = addHexPrefix(hex);\n  }\n\n  return hex;\n}\n\nexports.sanitizeHex = sanitizeHex;\n\nfunction removeHexLeadingZeros(hex) {\n  const prefixed = hex.startsWith(\"0x\");\n  hex = removeHexPrefix(hex);\n  hex = hex.startsWith(STRING_ZERO) ? hex.substring(1) : hex;\n  return prefixed ? addHexPrefix(hex) : hex;\n}\n\nexports.removeHexLeadingZeros = removeHexLeadingZeros;\n\nfunction isUndefined(value) {\n  return typeof value === \"undefined\";\n}\n\nfunction isDefined(value) {\n  return !isUndefined(value);\n}\n\nfunction assert(assertion, errorMessage) {\n  if (!assertion) {\n    throw new Error(errorMessage);\n  }\n}\n\nfunction reverseString(str) {\n  return str.split(\"\").reverse().join(\"\");\n}\n\nfunction padString(str, length, left) {\n  let padding = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : STRING_ZERO;\n  const diff = length - str.length;\n  let result = str;\n\n  if (diff > 0) {\n    const pad = padding.repeat(diff);\n    result = left ? pad + str : str + pad;\n  }\n\n  return result;\n}","map":{"version":3,"mappings":"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","names":["ENC_HEX","ENC_UTF8","ENC_BIN","TYPE_BUFFER","TYPE_ARRAY","TYPE_TYPED_ARRAY","TYPE_ARRAY_BUFFER","STRING_ZERO","bufferToArray","buf","Uint8Array","exports","bufferToHex","prefixed","hex","toString","addHexPrefix","bufferToUtf8","bufferToNumber","readUIntBE","length","bufferToBinary","arrayToBinary","arrayToBuffer","arr","typedarray_to_buffer_1","arrayToHex","arrayToUtf8","arrayToNumber","Array","from","map","numberToBinary","join","hexToBuffer","Buffer","removeHexPrefix","hexToArray","hexToUtf8","hexToNumber","hexToBinary","utf8ToBuffer","utf8","utf8ToArray","utf8ToHex","utf8ToNumber","num","parseInt","assert","isDefined","utf8ToBinary","numberToBuffer","binaryToBuffer","numberToArray","binaryToArray","numberToHex","binaryToHex","numberToUtf8","bin","sanitizeBytes","splitBytes","x","binaryToUtf8","binaryToNumber","isBinaryString","str","RegExp","test","isHexString","match","isBuffer","val","isTypedArray","is_typedarray_1","strict","isArrayBuffer","byteLength","getType","isArray","getEncoding","concatBuffers","args","result","concat","concatArrays","forEach","arg","trimLeft","data","diff","slice","trimRight","calcByteLength","byteSize","remainder","bytes","swapBytes","reverseString","swapHex","padding","padLeft","padString","padRight","replace","startsWith","sanitizeHex","removeHexLeadingZeros","substring","isUndefined","value","assertion","errorMessage","Error","split","reverse","left","pad","repeat"],"sourceRoot":"","sources":["../../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}