{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Signature = void 0;\n\nconst errors = __importStar(require(\"./errors\"));\n\nconst SIGNATURE_LENGTH = 64;\n/**\n * Signature, as an immutable object.\n */\n\nclass Signature {\n  constructor(value) {\n    this.valueHex = \"\";\n\n    if (!value) {\n      return;\n    }\n\n    if (typeof value === \"string\") {\n      return Signature.fromHex(value);\n    }\n\n    if (value instanceof Buffer) {\n      return Signature.fromBuffer(value);\n    }\n  }\n\n  static empty() {\n    return new Signature();\n  }\n\n  static fromHex(value) {\n    if (value.startsWith(\"0x\")) {\n      value = value.slice(2);\n    }\n\n    if (!Signature.isValidHex(value)) {\n      throw new errors.ErrSignatureCannotCreate(value);\n    }\n\n    return Signature.fromValidHex(value);\n  }\n\n  static isValidHex(value) {\n    return Buffer.from(value, \"hex\").length == SIGNATURE_LENGTH;\n  }\n\n  static fromValidHex(value) {\n    let result = new Signature();\n    result.valueHex = value;\n    return result;\n  }\n\n  static fromBuffer(buffer) {\n    if (buffer.length != SIGNATURE_LENGTH) {\n      throw new errors.ErrSignatureCannotCreate(buffer);\n    }\n\n    return Signature.fromValidHex(buffer.toString(\"hex\"));\n  }\n\n  hex() {\n    this.assertNotEmpty();\n    return this.valueHex;\n  }\n\n  isEmpty() {\n    return !this.valueHex;\n  }\n\n  assertNotEmpty() {\n    if (this.isEmpty()) {\n      throw new errors.ErrSignatureEmpty();\n    }\n  }\n\n}\n\nexports.Signature = Signature;","map":{"version":3,"sources":["../src/signature.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAA,MAAA,GAAA,YAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA;;AAGA,MAAM,gBAAgB,GAAG,EAAzB;AAEA;;AAEG;;AACH,MAAa,SAAb,CAAsB;AAGlB,EAAA,WAAA,CAAY,KAAZ,EAAmC;AAF3B,SAAA,QAAA,GAAmB,EAAnB;;AAGJ,QAAI,CAAC,KAAL,EAAY;AACR;AACH;;AACD,QAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC3B,aAAO,SAAS,CAAC,OAAV,CAAkB,KAAlB,CAAP;AACH;;AACD,QAAI,KAAK,YAAY,MAArB,EAA6B;AACzB,aAAO,SAAS,CAAC,UAAV,CAAqB,KAArB,CAAP;AACH;AACJ;;AAEW,SAAL,KAAK,GAAA;AACR,WAAO,IAAI,SAAJ,EAAP;AACH;;AAEa,SAAP,OAAO,CAAC,KAAD,EAAc;AACxB,QAAI,KAAK,CAAC,UAAN,CAAiB,IAAjB,CAAJ,EAA4B;AACxB,MAAA,KAAK,GAAG,KAAK,CAAC,KAAN,CAAY,CAAZ,CAAR;AACH;;AACD,QAAI,CAAC,SAAS,CAAC,UAAV,CAAqB,KAArB,CAAL,EAAkC;AAC9B,YAAM,IAAI,MAAM,CAAC,wBAAX,CAAoC,KAApC,CAAN;AACH;;AAED,WAAO,SAAS,CAAC,YAAV,CAAuB,KAAvB,CAAP;AACH;;AAEwB,SAAV,UAAU,CAAC,KAAD,EAAc;AACnC,WAAO,MAAM,CAAC,IAAP,CAAY,KAAZ,EAAmB,KAAnB,EAA0B,MAA1B,IAAoC,gBAA3C;AACH;;AAE0B,SAAZ,YAAY,CAAC,KAAD,EAAc;AACrC,QAAI,MAAM,GAAG,IAAI,SAAJ,EAAb;AACA,IAAA,MAAM,CAAC,QAAP,GAAkB,KAAlB;AACA,WAAO,MAAP;AACH;;AAEgB,SAAV,UAAU,CAAC,MAAD,EAAe;AAC5B,QAAI,MAAM,CAAC,MAAP,IAAiB,gBAArB,EAAuC;AACnC,YAAM,IAAI,MAAM,CAAC,wBAAX,CAAoC,MAApC,CAAN;AACH;;AAED,WAAO,SAAS,CAAC,YAAV,CAAuB,MAAM,CAAC,QAAP,CAAgB,KAAhB,CAAvB,CAAP;AACH;;AAED,EAAA,GAAG,GAAA;AACC,SAAK,cAAL;AAEA,WAAO,KAAK,QAAZ;AACH;;AAED,EAAA,OAAO,GAAA;AACH,WAAO,CAAC,KAAK,QAAb;AACH;;AAEO,EAAA,cAAc,GAAA;AAClB,QAAI,KAAK,OAAL,EAAJ,EAAoB;AAChB,YAAM,IAAI,MAAM,CAAC,iBAAX,EAAN;AACH;AACJ;;AA9DiB;;AAAtB,OAAA,CAAA,SAAA,GAAA,SAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Signature = void 0;\nconst errors = __importStar(require(\"./errors\"));\nconst SIGNATURE_LENGTH = 64;\n/**\n * Signature, as an immutable object.\n */\nclass Signature {\n    constructor(value) {\n        this.valueHex = \"\";\n        if (!value) {\n            return;\n        }\n        if (typeof value === \"string\") {\n            return Signature.fromHex(value);\n        }\n        if (value instanceof Buffer) {\n            return Signature.fromBuffer(value);\n        }\n    }\n    static empty() {\n        return new Signature();\n    }\n    static fromHex(value) {\n        if (value.startsWith(\"0x\")) {\n            value = value.slice(2);\n        }\n        if (!Signature.isValidHex(value)) {\n            throw new errors.ErrSignatureCannotCreate(value);\n        }\n        return Signature.fromValidHex(value);\n    }\n    static isValidHex(value) {\n        return Buffer.from(value, \"hex\").length == SIGNATURE_LENGTH;\n    }\n    static fromValidHex(value) {\n        let result = new Signature();\n        result.valueHex = value;\n        return result;\n    }\n    static fromBuffer(buffer) {\n        if (buffer.length != SIGNATURE_LENGTH) {\n            throw new errors.ErrSignatureCannotCreate(buffer);\n        }\n        return Signature.fromValidHex(buffer.toString(\"hex\"));\n    }\n    hex() {\n        this.assertNotEmpty();\n        return this.valueHex;\n    }\n    isEmpty() {\n        return !this.valueHex;\n    }\n    assertNotEmpty() {\n        if (this.isEmpty()) {\n            throw new errors.ErrSignatureEmpty();\n        }\n    }\n}\nexports.Signature = Signature;\n//# sourceMappingURL=signature.js.map"]},"metadata":{},"sourceType":"script"}