{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StringValue = exports.StringType = void 0;\n\nconst types_1 = require(\"./types\");\n\nclass StringType extends types_1.PrimitiveType {\n  constructor() {\n    super(\"utf-8 string\");\n  }\n\n}\n\nexports.StringType = StringType;\n\nclass StringValue extends types_1.PrimitiveValue {\n  constructor(value) {\n    super(new StringType());\n    this.value = value;\n  }\n  /**\n   * Creates a StringValue from a utf-8 string.\n   */\n\n\n  static fromUTF8(value) {\n    return new StringValue(value);\n  }\n  /**\n   * Creates a StringValue from a hex-encoded string.\n   */\n\n\n  static fromHex(value) {\n    let decodedValue = Buffer.from(value, \"hex\").toString();\n    return new StringValue(decodedValue);\n  }\n\n  getLength() {\n    return this.value.length;\n  }\n  /**\n   * Returns whether two objects have the same value.\n   */\n\n\n  equals(other) {\n    return this.value === other.value;\n  }\n\n  valueOf() {\n    return this.value;\n  }\n\n}\n\nexports.StringValue = StringValue;","map":{"version":3,"sources":["../../../src/smartcontracts/typesystem/string.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAEA,MAAa,UAAb,SAAgC,OAAA,CAAA,aAAhC,CAA6C;AACzC,EAAA,WAAA,GAAA;AACI,UAAM,cAAN;AACH;;AAHwC;;AAA7C,OAAA,CAAA,UAAA,GAAA,UAAA;;AAMA,MAAa,WAAb,SAAiC,OAAA,CAAA,cAAjC,CAA+C;AAG3C,EAAA,WAAA,CAAY,KAAZ,EAAyB;AACrB,UAAM,IAAI,UAAJ,EAAN;AACA,SAAK,KAAL,GAAa,KAAb;AACH;AAED;;AAEG;;;AACY,SAAR,QAAQ,CAAC,KAAD,EAAc;AACzB,WAAO,IAAI,WAAJ,CAAgB,KAAhB,CAAP;AACH;AAED;;AAEG;;;AACW,SAAP,OAAO,CAAC,KAAD,EAAc;AACxB,QAAI,YAAY,GAAG,MAAM,CAAC,IAAP,CAAY,KAAZ,EAAmB,KAAnB,EAA0B,QAA1B,EAAnB;AACA,WAAO,IAAI,WAAJ,CAAgB,YAAhB,CAAP;AACH;;AAED,EAAA,SAAS,GAAA;AACL,WAAO,KAAK,KAAL,CAAW,MAAlB;AACH;AAED;;AAEG;;;AACH,EAAA,MAAM,CAAC,KAAD,EAAmB;AACrB,WAAO,KAAK,KAAL,KAAe,KAAK,CAAC,KAA5B;AACH;;AAED,EAAA,OAAO,GAAA;AACH,WAAO,KAAK,KAAZ;AACH;;AApC0C;;AAA/C,OAAA,CAAA,WAAA,GAAA,WAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StringValue = exports.StringType = void 0;\nconst types_1 = require(\"./types\");\nclass StringType extends types_1.PrimitiveType {\n    constructor() {\n        super(\"utf-8 string\");\n    }\n}\nexports.StringType = StringType;\nclass StringValue extends types_1.PrimitiveValue {\n    constructor(value) {\n        super(new StringType());\n        this.value = value;\n    }\n    /**\n     * Creates a StringValue from a utf-8 string.\n     */\n    static fromUTF8(value) {\n        return new StringValue(value);\n    }\n    /**\n     * Creates a StringValue from a hex-encoded string.\n     */\n    static fromHex(value) {\n        let decodedValue = Buffer.from(value, \"hex\").toString();\n        return new StringValue(decodedValue);\n    }\n    getLength() {\n        return this.value.length;\n    }\n    /**\n     * Returns whether two objects have the same value.\n     */\n    equals(other) {\n        return this.value === other.value;\n    }\n    valueOf() {\n        return this.value;\n    }\n}\nexports.StringValue = StringValue;\n//# sourceMappingURL=string.js.map"]},"metadata":{},"sourceType":"script"}