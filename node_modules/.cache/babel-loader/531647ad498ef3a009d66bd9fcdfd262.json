{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BooleanBinaryCodec = void 0;\n\nconst errors = __importStar(require(\"../../errors\"));\n\nconst typesystem_1 = require(\"../typesystem\");\n/**\n * Encodes and decodes \"BooleanValue\" objects\n * with respect to: {@link https://docs.elrond.com/developers/developer-reference/elrond-serialization-format/ | The Elrond Serialization Format}.\n */\n\n\nclass BooleanBinaryCodec {\n  decodeNested(buffer) {\n    // We don't check the size of the buffer, we just read the first byte.\n    let byte = buffer.readUInt8(0);\n    return [new typesystem_1.BooleanValue(byte == BooleanBinaryCodec.TRUE), 1];\n  }\n\n  decodeTopLevel(buffer) {\n    if (buffer.length > 1) {\n      throw new errors.ErrInvalidArgument(\"buffer\", buffer, \"should be a buffer of size <= 1\");\n    }\n\n    let firstByte = buffer[0];\n    return new typesystem_1.BooleanValue(firstByte == BooleanBinaryCodec.TRUE);\n  }\n\n  encodeNested(primitive) {\n    if (primitive.isTrue()) {\n      return Buffer.from([BooleanBinaryCodec.TRUE]);\n    }\n\n    return Buffer.from([BooleanBinaryCodec.FALSE]);\n  }\n\n  encodeTopLevel(primitive) {\n    if (primitive.isTrue()) {\n      return Buffer.from([BooleanBinaryCodec.TRUE]);\n    }\n\n    return Buffer.from([]);\n  }\n\n}\n\nexports.BooleanBinaryCodec = BooleanBinaryCodec;\nBooleanBinaryCodec.TRUE = 0x01;\nBooleanBinaryCodec.FALSE = 0x00;","map":{"version":3,"sources":["../../../src/smartcontracts/codec/boolean.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAA,MAAA,GAAA,YAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;;AACA,MAAA,YAAA,GAAA,OAAA,CAAA,eAAA,CAAA;AAEA;;;AAGG;;;AACH,MAAa,kBAAb,CAA+B;AAI3B,EAAA,YAAY,CAAC,MAAD,EAAe;AACvB;AAEA,QAAI,IAAI,GAAG,MAAM,CAAC,SAAP,CAAiB,CAAjB,CAAX;AACA,WAAO,CAAC,IAAI,YAAA,CAAA,YAAJ,CAAiB,IAAI,IAAI,kBAAkB,CAAC,IAA5C,CAAD,EAAoD,CAApD,CAAP;AACH;;AAED,EAAA,cAAc,CAAC,MAAD,EAAe;AACzB,QAAI,MAAM,CAAC,MAAP,GAAgB,CAApB,EAAuB;AACnB,YAAM,IAAI,MAAM,CAAC,kBAAX,CAA8B,QAA9B,EAAwC,MAAxC,EAAgD,iCAAhD,CAAN;AACH;;AAED,QAAI,SAAS,GAAG,MAAM,CAAC,CAAD,CAAtB;AACA,WAAO,IAAI,YAAA,CAAA,YAAJ,CAAiB,SAAS,IAAI,kBAAkB,CAAC,IAAjD,CAAP;AACH;;AAED,EAAA,YAAY,CAAC,SAAD,EAAwB;AAChC,QAAI,SAAS,CAAC,MAAV,EAAJ,EAAwB;AACpB,aAAO,MAAM,CAAC,IAAP,CAAY,CAAC,kBAAkB,CAAC,IAApB,CAAZ,CAAP;AACH;;AAED,WAAO,MAAM,CAAC,IAAP,CAAY,CAAC,kBAAkB,CAAC,KAApB,CAAZ,CAAP;AACH;;AAED,EAAA,cAAc,CAAC,SAAD,EAAwB;AAClC,QAAI,SAAS,CAAC,MAAV,EAAJ,EAAwB;AACpB,aAAO,MAAM,CAAC,IAAP,CAAY,CAAC,kBAAkB,CAAC,IAApB,CAAZ,CAAP;AACH;;AAED,WAAO,MAAM,CAAC,IAAP,CAAY,EAAZ,CAAP;AACH;;AAlC0B;;AAA/B,OAAA,CAAA,kBAAA,GAAA,kBAAA;AAC4B,kBAAA,CAAA,IAAA,GAAe,IAAf;AACA,kBAAA,CAAA,KAAA,GAAgB,IAAhB","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BooleanBinaryCodec = void 0;\nconst errors = __importStar(require(\"../../errors\"));\nconst typesystem_1 = require(\"../typesystem\");\n/**\n * Encodes and decodes \"BooleanValue\" objects\n * with respect to: {@link https://docs.elrond.com/developers/developer-reference/elrond-serialization-format/ | The Elrond Serialization Format}.\n */\nclass BooleanBinaryCodec {\n    decodeNested(buffer) {\n        // We don't check the size of the buffer, we just read the first byte.\n        let byte = buffer.readUInt8(0);\n        return [new typesystem_1.BooleanValue(byte == BooleanBinaryCodec.TRUE), 1];\n    }\n    decodeTopLevel(buffer) {\n        if (buffer.length > 1) {\n            throw new errors.ErrInvalidArgument(\"buffer\", buffer, \"should be a buffer of size <= 1\");\n        }\n        let firstByte = buffer[0];\n        return new typesystem_1.BooleanValue(firstByte == BooleanBinaryCodec.TRUE);\n    }\n    encodeNested(primitive) {\n        if (primitive.isTrue()) {\n            return Buffer.from([BooleanBinaryCodec.TRUE]);\n        }\n        return Buffer.from([BooleanBinaryCodec.FALSE]);\n    }\n    encodeTopLevel(primitive) {\n        if (primitive.isTrue()) {\n            return Buffer.from([BooleanBinaryCodec.TRUE]);\n        }\n        return Buffer.from([]);\n    }\n}\nexports.BooleanBinaryCodec = BooleanBinaryCodec;\nBooleanBinaryCodec.TRUE = 0x01;\nBooleanBinaryCodec.FALSE = 0x00;\n//# sourceMappingURL=boolean.js.map"]},"metadata":{},"sourceType":"script"}